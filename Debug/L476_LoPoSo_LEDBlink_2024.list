
L476_LoPoSo_LEDBlink_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002144  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002314  08002314  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  08002314  08002314  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002314  08002314  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002314  08002314  00003314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002318  08002318  00003318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800231c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  08002320  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08002320  00004038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007156  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184a  00000000  00000000  0000b18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0000c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064a  00000000  00000000  0000d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038c9  00000000  00000000  0000d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007579  00000000  00000000  0001117b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0e6e  00000000  00000000  000186f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021dc  00000000  00000000  000c95a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cb784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022b4 	.word	0x080022b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080022b4 	.word	0x080022b4

080001c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db0a      	blt.n	80001f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	490c      	ldr	r1, [pc, #48]	@ (8000214 <__NVIC_SetPriority+0x4c>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	0112      	lsls	r2, r2, #4
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f0:	e00a      	b.n	8000208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4908      	ldr	r1, [pc, #32]	@ (8000218 <__NVIC_SetPriority+0x50>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f003 030f 	and.w	r3, r3, #15
 80001fe:	3b04      	subs	r3, #4
 8000200:	0112      	lsls	r2, r2, #4
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	440b      	add	r3, r1
 8000206:	761a      	strb	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000e100 	.word	0xe000e100
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <LL_RCC_MSI_Enable+0x1c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	@ (8000238 <LL_RCC_MSI_Enable+0x1c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000

0800023c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <LL_RCC_MSI_IsReady+0x20>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b02      	cmp	r3, #2
 800024a:	d101      	bne.n	8000250 <LL_RCC_MSI_IsReady+0x14>
 800024c:	2301      	movs	r3, #1
 800024e:	e000      	b.n	8000252 <LL_RCC_MSI_IsReady+0x16>
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <LL_RCC_SetSysClkSource+0x24>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	f023 0203 	bic.w	r2, r3, #3
 8000270:	4904      	ldr	r1, [pc, #16]	@ (8000284 <LL_RCC_SetSysClkSource+0x24>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4313      	orrs	r3, r2
 8000276:	608b      	str	r3, [r1, #8]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <LL_RCC_GetSysClkSource+0x18>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f003 030c 	and.w	r3, r3, #12
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80002b4:	4904      	ldr	r1, [pc, #16]	@ (80002c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	608b      	str	r3, [r1, #8]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80002dc:	4904      	ldr	r1, [pc, #16]	@ (80002f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	608b      	str	r3, [r1, #8]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000304:	4904      	ldr	r1, [pc, #16]	@ (8000318 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4313      	orrs	r3, r2
 800030a:	608b      	str	r3, [r1, #8]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000

0800031c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <LL_RCC_PLL_Enable+0x1c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <LL_RCC_PLL_Enable+0x1c>)
 8000326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800032a:	6013      	str	r3, [r2, #0]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <LL_RCC_PLL_IsReady+0x24>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000348:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800034c:	d101      	bne.n	8000352 <LL_RCC_PLL_IsReady+0x16>
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <LL_RCC_PLL_IsReady+0x18>
 8000352:	2300      	movs	r3, #0
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000

08000364 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000374:	68da      	ldr	r2, [r3, #12]
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000378:	4013      	ands	r3, r2
 800037a:	68f9      	ldr	r1, [r7, #12]
 800037c:	68ba      	ldr	r2, [r7, #8]
 800037e:	4311      	orrs	r1, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	0212      	lsls	r2, r2, #8
 8000384:	4311      	orrs	r1, r2
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	430a      	orrs	r2, r1
 800038a:	4904      	ldr	r1, [pc, #16]	@ (800039c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800038c:	4313      	orrs	r3, r2
 800038e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000
 80003a0:	f9ff808c 	.word	0xf9ff808c

080003a4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a04      	ldr	r2, [pc, #16]	@ (80003c0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80003ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003b2:	60d3      	str	r3, [r2, #12]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80003d4:	4904      	ldr	r1, [pc, #16]	@ (80003e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4313      	orrs	r3, r2
 80003da:	600b      	str	r3, [r1, #0]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40007000 	.word	0x40007000

080003ec <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <LL_FLASH_SetLatency+0x24>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f023 0207 	bic.w	r2, r3, #7
 80003fc:	4904      	ldr	r1, [pc, #16]	@ (8000410 <LL_FLASH_SetLatency+0x24>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4313      	orrs	r3, r2
 8000402:	600b      	str	r3, [r1, #0]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40022000 	.word	0x40022000

08000414 <SystemClock_Config_80M>:
  *            APB2 Prescaler                 = 1
  *            MSI Frequency(Hz)              = 4000000
  *            Flash Latency(WS)              = 4
  */
void SystemClock_Config_80M()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/* MSI configuration and activation */
	LL_RCC_MSI_Enable();			// normalement il est deja enabled
 8000418:	f7ff ff00 	bl	800021c <LL_RCC_MSI_Enable>
	while	(LL_RCC_MSI_IsReady() != 1)	// c'est pour le cas ou on l'aurait change
 800041c:	bf00      	nop
 800041e:	f7ff ff0d 	bl	800023c <LL_RCC_MSI_IsReady>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d1fa      	bne.n	800041e <SystemClock_Config_80M+0xa>
		{ }

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);	// 4 pour 80MHz
 8000428:	2004      	movs	r0, #4
 800042a:	f7ff ffdf 	bl	80003ec <LL_FLASH_SetLatency>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1); //réglage tension régulateur interne
 800042e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000432:	f7ff ffc7 	bl	80003c4 <LL_PWR_SetRegulVoltageScaling>

	// demarrer la PLL principale 4MHz --> 80 MHz
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000436:	2300      	movs	r3, #0
 8000438:	2228      	movs	r2, #40	@ 0x28
 800043a:	2100      	movs	r1, #0
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff ff91 	bl	8000364 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000442:	f7ff ff6b 	bl	800031c <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8000446:	f7ff ffad 	bl	80003a4 <LL_RCC_PLL_EnableDomain_SYS>
	while	( LL_RCC_PLL_IsReady() != 1 )
 800044a:	bf00      	nop
 800044c:	f7ff ff76 	bl	800033c <LL_RCC_PLL_IsReady>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d1fa      	bne.n	800044c <SystemClock_Config_80M+0x38>
		{ }

	// connecter Sysclk sur cette PLL
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ff24 	bl	80002a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800045c:	2003      	movs	r0, #3
 800045e:	f7ff feff 	bl	8000260 <LL_RCC_SetSysClkSource>
	while	( LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 8000462:	bf00      	nop
 8000464:	f7ff ff10 	bl	8000288 <LL_RCC_GetSysClkSource>
 8000468:	4603      	mov	r3, r0
 800046a:	2b0c      	cmp	r3, #12
 800046c:	d1fa      	bne.n	8000464 <SystemClock_Config_80M+0x50>
		{ }

	/* Set APB1 & APB2 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff2c 	bl	80002cc <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff3d 	bl	80002f4 <LL_RCC_SetAPB2Prescaler>

	//update global variable SystemCoreClock --> give access to CPU clock frequency.
	LL_SetSystemCoreClock(80000000);
 800047a:	4802      	ldr	r0, [pc, #8]	@ (8000484 <SystemClock_Config_80M+0x70>)
 800047c:	f001 fede 	bl	800223c <LL_SetSystemCoreClock>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	04c4b400 	.word	0x04c4b400

08000488 <mySystick>:
}

// config systick avec interrupt. L'argument periode_en_ticks indique la période de débordement
//du Systick, donnée en nombre de périodes du buc clock.
void mySystick( unsigned int periode_en_ticks )
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// periode
	SysTick->LOAD  = periode_en_ticks - 1;
 8000490:	4a0c      	ldr	r2, [pc, #48]	@ (80004c4 <mySystick+0x3c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3b01      	subs	r3, #1
 8000496:	6053      	str	r3, [r2, #4]

	// priorite
	NVIC_SetPriority( SysTick_IRQn, 7 );
 8000498:	2107      	movs	r1, #7
 800049a:	f04f 30ff 	mov.w	r0, #4294967295
 800049e:	f7ff fe93 	bl	80001c8 <__NVIC_SetPriority>
	// init counter
	SysTick->VAL = 0;
 80004a2:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <mySystick+0x3c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
	// prescale (0 ===> %8)
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <mySystick+0x3c>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	601a      	str	r2, [r3, #0]
	// enable timer, enable interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 80004ae:	4b05      	ldr	r3, [pc, #20]	@ (80004c4 <mySystick+0x3c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <mySystick+0x3c>)
 80004b4:	f043 0303 	orr.w	r3, r3, #3
 80004b8:	6013      	str	r3, [r2, #0]
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	e000e010 	.word	0xe000e010

080004c8 <__NVIC_GetPriorityGrouping>:
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004cc:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	0a1b      	lsrs	r3, r3, #8
 80004d2:	f003 0307 	and.w	r3, r3, #7
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <__NVIC_EnableIRQ>:
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	db0b      	blt.n	800050e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	f003 021f 	and.w	r2, r3, #31
 80004fc:	4907      	ldr	r1, [pc, #28]	@ (800051c <__NVIC_EnableIRQ+0x38>)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	095b      	lsrs	r3, r3, #5
 8000504:	2001      	movs	r0, #1
 8000506:	fa00 f202 	lsl.w	r2, r0, r2
 800050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000e100 	.word	0xe000e100

08000520 <__NVIC_SetPriority>:
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800052c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000530:	2b00      	cmp	r3, #0
 8000532:	db0a      	blt.n	800054a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2da      	uxtb	r2, r3
 8000538:	490c      	ldr	r1, [pc, #48]	@ (800056c <__NVIC_SetPriority+0x4c>)
 800053a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053e:	0112      	lsls	r2, r2, #4
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	440b      	add	r3, r1
 8000544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000548:	e00a      	b.n	8000560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4908      	ldr	r1, [pc, #32]	@ (8000570 <__NVIC_SetPriority+0x50>)
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	3b04      	subs	r3, #4
 8000558:	0112      	lsls	r2, r2, #4
 800055a:	b2d2      	uxtb	r2, r2
 800055c:	440b      	add	r3, r1
 800055e:	761a      	strb	r2, [r3, #24]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000e100 	.word	0xe000e100
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000574:	b480      	push	{r7}
 8000576:	b089      	sub	sp, #36	@ 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	f1c3 0307 	rsb	r3, r3, #7
 800058e:	2b04      	cmp	r3, #4
 8000590:	bf28      	it	cs
 8000592:	2304      	movcs	r3, #4
 8000594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	3304      	adds	r3, #4
 800059a:	2b06      	cmp	r3, #6
 800059c:	d902      	bls.n	80005a4 <NVIC_EncodePriority+0x30>
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3b03      	subs	r3, #3
 80005a2:	e000      	b.n	80005a6 <NVIC_EncodePriority+0x32>
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	43da      	mvns	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	401a      	ands	r2, r3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43d9      	mvns	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	4313      	orrs	r3, r2
         );
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3724      	adds	r7, #36	@ 0x24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005e8:	4907      	ldr	r1, [pc, #28]	@ (8000608 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800060c:	b480      	push	{r7}
 800060e:	b08b      	sub	sp, #44	@ 0x2c
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa93 f3a3 	rbit	r3, r3
 8000626:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000632:	2320      	movs	r3, #32
 8000634:	e003      	b.n	800063e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	fab3 f383 	clz	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	2103      	movs	r1, #3
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	401a      	ands	r2, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	fa93 f3a3 	rbit	r3, r3
 8000654:	61fb      	str	r3, [r7, #28]
  return result;
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000660:	2320      	movs	r3, #32
 8000662:	e003      	b.n	800066c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	431a      	orrs	r2, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	372c      	adds	r7, #44	@ 0x2c
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000686:	b480      	push	{r7}
 8000688:	b08b      	sub	sp, #44	@ 0x2c
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	fa93 f3a3 	rbit	r3, r3
 80006a0:	613b      	str	r3, [r7, #16]
  return result;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006ac:	2320      	movs	r3, #32
 80006ae:	e003      	b.n	80006b8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	2103      	movs	r1, #3
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	401a      	ands	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	fa93 f3a3 	rbit	r3, r3
 80006ce:	61fb      	str	r3, [r7, #28]
  return result;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80006da:	2320      	movs	r3, #32
 80006dc:	e003      	b.n	80006e6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	fab3 f383 	clz	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	431a      	orrs	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	60da      	str	r2, [r3, #12]
}
 80006f4:	bf00      	nop
 80006f6:	372c      	adds	r7, #44	@ 0x2c
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	691a      	ldr	r2, [r3, #16]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	4013      	ands	r3, r2
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d101      	bne.n	800071c <LL_GPIO_IsInputPinSet+0x1c>
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <LL_GPIO_IsInputPinSet+0x1e>
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	619a      	str	r2, [r3, #24]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <LL_SYSCFG_SetEXTISource>:
{
 8000764:	b480      	push	{r7}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800076e:	4a17      	ldr	r2, [pc, #92]	@ (80007cc <LL_SYSCFG_SetEXTISource+0x68>)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	3302      	adds	r3, #2
 8000776:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	43db      	mvns	r3, r3
 8000780:	ea02 0103 	and.w	r1, r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	0c1b      	lsrs	r3, r3, #16
 8000788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	fa93 f3a3 	rbit	r3, r3
 8000790:	60fb      	str	r3, [r7, #12]
  return result;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 800079c:	2320      	movs	r3, #32
 800079e:	e003      	b.n	80007a8 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	fa03 f202 	lsl.w	r2, r3, r2
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <LL_SYSCFG_SetEXTISource+0x68>)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	430a      	orrs	r2, r1
 80007b8:	3302      	adds	r3, #2
 80007ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007be:	bf00      	nop
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40010000 	.word	0x40010000

080007d0 <GPIO_init>:
//#include "options.h"
#include "gpio.h"


void GPIO_init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
	  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]

	  /* GPIO Ports Clock Enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fef2 	bl	80005dc <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff feef 	bl	80005dc <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff feec 	bl	80005dc <LL_AHB2_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, nRF_CSN_Pin|nRF_CE_Pin);
 8000804:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080c:	f7ff ff9b 	bl	8000746 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 8000810:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000814:	483c      	ldr	r0, [pc, #240]	@ (8000908 <GPIO_init+0x138>)
 8000816:	f7ff ff96 	bl	8000746 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(Clock_Monitor_GPIO_Port, Clock_Monitor_Pin);
 800081a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081e:	483b      	ldr	r0, [pc, #236]	@ (800090c <GPIO_init+0x13c>)
 8000820:	f7ff ff91 	bl	8000746 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = User_Button_Pin;
 8000824:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000828:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4835      	ldr	r0, [pc, #212]	@ (800090c <GPIO_init+0x13c>)
 8000838:	f000 ff45 	bl	80016c6 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = nRF_CSN_Pin|nRF_CE_Pin;
 800083c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000840:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000842:	2301      	movs	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f000 ff34 	bl	80016c6 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = User_LED_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000862:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000864:	2301      	movs	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4823      	ldr	r0, [pc, #140]	@ (8000908 <GPIO_init+0x138>)
 800087a:	f000 ff24 	bl	80016c6 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = Clock_Monitor_Pin;
 800087e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000882:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000884:	2301      	movs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(Clock_Monitor_GPIO_Port, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	481c      	ldr	r0, [pc, #112]	@ (800090c <GPIO_init+0x13c>)
 800089a:	f000 ff14 	bl	80016c6 <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 800089e:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff ff5e 	bl	8000764 <LL_SYSCFG_SetEXTISource>

	  /**/
	  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
	  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
	  EXTI_InitStruct.LineCommand = ENABLE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80008bc:	2302      	movs	r3, #2
 80008be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	  LL_EXTI_Init(&EXTI_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fcbe 	bl	8001248 <LL_EXTI_Init>

	  /**/
	  LL_GPIO_SetPinPull(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_PULL_UP);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <GPIO_init+0x138>)
 80008d2:	f7ff fed8 	bl	8000686 <LL_GPIO_SetPinPull>

	  /**/
	  LL_GPIO_SetPinMode(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_MODE_INPUT);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <GPIO_init+0x138>)
 80008dc:	f7ff fe96 	bl	800060c <LL_GPIO_SetPinMode>

	  /* EXTI interrupt init*/
	  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008e0:	f7ff fdf2 	bl	80004c8 <__NVIC_GetPriorityGrouping>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe42 	bl	8000574 <NVIC_EncodePriority>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4619      	mov	r1, r3
 80008f4:	2006      	movs	r0, #6
 80008f6:	f7ff fe13 	bl	8000520 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(EXTI0_IRQn);
 80008fa:	2006      	movs	r0, #6
 80008fc:	f7ff fdf2 	bl	80004e4 <__NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800

08000910 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if	( val )
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <LED_GREEN+0x1a>
		LL_GPIO_SetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 800091e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <LED_GREEN+0x2c>)
 8000924:	f7ff ff01 	bl	800072a <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
}
 8000928:	e004      	b.n	8000934 <LED_GREEN+0x24>
	else	LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 800092a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092e:	4803      	ldr	r0, [pc, #12]	@ (800093c <LED_GREEN+0x2c>)
 8000930:	f7ff ff09 	bl	8000746 <LL_GPIO_ResetOutputPin>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	48000400 	.word	0x48000400

08000940 <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	return ( !LL_GPIO_IsInputPinSet(User_Button_GPIO_Port, User_Button_Pin) );
 8000944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <BLUE_BUTTON+0x20>)
 800094a:	f7ff fed9 	bl	8000700 <LL_GPIO_IsInputPinSet>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	48000800 	.word	0x48000800

08000964 <__NVIC_SetPriorityGrouping>:
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009b8:	4907      	ldr	r1, [pc, #28]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4013      	ands	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009e8:	4907      	ldr	r1, [pc, #28]	@ (8000a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000

08000a0c <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3350      	adds	r3, #80	@ 0x50
 8000a20:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	4413      	add	r3, r2
 8000a2a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3350      	adds	r3, #80	@ 0x50
 8000a50:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4413      	add	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <main>:
int status;



int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

	/*clock domains activation*/
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff ffb3 	bl	80009dc <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a76:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a7a:	f7ff ff97 	bl	80009ac <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f7ff ff70 	bl	8000964 <__NVIC_SetPriorityGrouping>

	// config GPIO
	GPIO_init();
 8000a84:	f7ff fea4 	bl	80007d0 <GPIO_init>
	//config clock
	SystemClock_Config_80M();
 8000a88:	f7ff fcc4 	bl	8000414 <SystemClock_Config_80M>
	//config bus SPI1 (pour la communication avec le transceiver nRF24L01)
	SPI1_Init();
 8000a8c:	f000 f8f0 	bl	8000c70 <SPI1_Init>
	//config USART2
	USART2_Init();
 8000a90:	f000 fa30 	bl	8000ef4 <USART2_Init>

	// config systick avec interrupt
	mySystick( SystemCoreClock / 100 );	// 100 Hz --> 10 ms
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <main+0xc4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a26      	ldr	r2, [pc, #152]	@ (8000b34 <main+0xc8>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fcf1 	bl	8000488 <mySystick>

	//Init to RTC
	//LL_RTC_Init(RTC, &RTC_InitStruct);
	LL_RTC_BAK_SetRegister(RTC, 3, expe);
 8000aa6:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <main+0xcc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2103      	movs	r1, #3
 8000aae:	4823      	ldr	r0, [pc, #140]	@ (8000b3c <main+0xd0>)
 8000ab0:	f7ff ffac 	bl	8000a0c <LL_RTC_BAK_SetRegister>
	testing = LL_RTC_BAK_GetRegister(RTC, 3);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	4821      	ldr	r0, [pc, #132]	@ (8000b3c <main+0xd0>)
 8000ab8:	f7ff ffc1 	bl	8000a3e <LL_RTC_BAK_GetRegister>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a20      	ldr	r2, [pc, #128]	@ (8000b40 <main+0xd4>)
 8000ac0:	6013      	str	r3, [r2, #0]
	expe = LL_RTC_BAK_GetRegister(RTC, 3);
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <main+0xd0>)
 8000ac6:	f7ff ffba 	bl	8000a3e <LL_RTC_BAK_GetRegister>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <main+0xcc>)
 8000ad0:	601a      	str	r2, [r3, #0]
	  // config systick avec interrupt
	  mySystick( SystemCoreClock / 100 );	// 100 Hz --> 10 ms
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <main+0xc4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <main+0xc8>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fcd2 	bl	8000488 <mySystick>
	while (expe < 7)
 8000ae4:	e01e      	b.n	8000b24 <main+0xb8>
	{
		status = BLUE_BUTTON();
 8000ae6:	f7ff ff2b 	bl	8000940 <BLUE_BUTTON>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <main+0xd8>)
 8000aee:	6013      	str	r3, [r2, #0]
		if ( 1 == status)
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <main+0xd8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d115      	bne.n	8000b24 <main+0xb8>
		{
			LL_mDelay(100);
 8000af8:	2064      	movs	r0, #100	@ 0x64
 8000afa:	f001 fb77 	bl	80021ec <LL_mDelay>
			expe++;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <main+0xcc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <main+0xcc>)
 8000b06:	6013      	str	r3, [r2, #0]
			LL_RTC_BAK_SetRegister(RTC, 3, expe);
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <main+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2103      	movs	r1, #3
 8000b10:	480a      	ldr	r0, [pc, #40]	@ (8000b3c <main+0xd0>)
 8000b12:	f7ff ff7b 	bl	8000a0c <LL_RTC_BAK_SetRegister>
			testing = LL_RTC_BAK_GetRegister(RTC, 3);
 8000b16:	2103      	movs	r1, #3
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <main+0xd0>)
 8000b1a:	f7ff ff90 	bl	8000a3e <LL_RTC_BAK_GetRegister>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <main+0xd4>)
 8000b22:	6013      	str	r3, [r2, #0]
	while (expe < 7)
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <main+0xcc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b06      	cmp	r3, #6
 8000b2a:	dddc      	ble.n	8000ae6 <main+0x7a>
	//	StartListen();
	//
	//	//Ecoute continue
	//	Continuous_RX_Listen(500);

	while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <main+0xc0>
 8000b30:	20000000 	.word	0x20000000
 8000b34:	51eb851f 	.word	0x51eb851f
 8000b38:	2000002c 	.word	0x2000002c
 8000b3c:	40002800 	.word	0x40002800
 8000b40:	20000030 	.word	0x20000030
 8000b44:	20000034 	.word	0x20000034

08000b48 <SysTick_Handler>:
}

// systick interrupt handler --> allumage LED toutes les 2 s pendant 50 ms.
//Scrutation de l'état du bouton bleu  (pas d'action à ce stade).
void SysTick_Handler()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	unsigned int subticks;

	//scrutation bouton bleu
	ticks += 1;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <SysTick_Handler+0x70>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <SysTick_Handler+0x70>)
 8000b56:	6013      	str	r3, [r2, #0]
	if	( BLUE_BUTTON() )
 8000b58:	f7ff fef2 	bl	8000940 <BLUE_BUTTON>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00a      	beq.n	8000b78 <SysTick_Handler+0x30>
	{
		if	( old_blue == 0 )
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <SysTick_Handler+0x74>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <SysTick_Handler+0x28>
			blue_mode = 1;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <SysTick_Handler+0x78>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
		old_blue = 1;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <SysTick_Handler+0x74>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	e002      	b.n	8000b7e <SysTick_Handler+0x36>
	}
	else 	old_blue = 0;
 8000b78:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <SysTick_Handler+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]

	//gestion de l'allumage de la LED
	subticks = ticks % 200;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <SysTick_Handler+0x70>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <SysTick_Handler+0x7c>)
 8000b84:	fba2 1203 	umull	r1, r2, r2, r3
 8000b88:	0992      	lsrs	r2, r2, #6
 8000b8a:	21c8      	movs	r1, #200	@ 0xc8
 8000b8c:	fb01 f202 	mul.w	r2, r1, r2
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	607b      	str	r3, [r7, #4]
	if	( subticks == 0 )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <SysTick_Handler+0x5a>
		LED_GREEN(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff feb8 	bl	8000910 <LED_GREEN>
	else if	( subticks == 5 )
		LED_GREEN(0);
}
 8000ba0:	e005      	b.n	8000bae <SysTick_Handler+0x66>
	else if	( subticks == 5 )
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	d102      	bne.n	8000bae <SysTick_Handler+0x66>
		LED_GREEN(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff feb1 	bl	8000910 <LED_GREEN>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000020 	.word	0x20000020
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	20000024 	.word	0x20000024
 8000bc4:	51eb851f 	.word	0x51eb851f

08000bc8 <LL_AHB2_GRP1_EnableClock>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bd4:	4907      	ldr	r1, [pc, #28]	@ (8000bf4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4013      	ands	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <LL_APB2_GRP1_EnableClock>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c04:	4907      	ldr	r1, [pc, #28]	@ (8000c24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4013      	ands	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000

08000c28 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f023 0210 	bic.w	r2, r3, #16
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	605a      	str	r2, [r3, #4]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f023 0208 	bic.w	r2, r3, #8
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	605a      	str	r2, [r3, #4]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SPI1_Init>:
// > mode master, full duplex
// > 8 bits
// > pin NSS généré logiciellement
// > bit rate = 5 Mbps --> avec un bus clock à 80 MHz le prescaler est réglé à 16.
void SPI1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b090      	sub	sp, #64	@ 0x40
 8000c74:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	2228      	movs	r2, #40	@ 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 faec 	bl	800225c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000c94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c98:	f7ff ffae 	bl	8000bf8 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff ff93 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca2:	23e0      	movs	r3, #224	@ 0xe0
 8000ca4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc2:	f000 fd00 	bl	80016c6 <LL_GPIO_Init>

  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000cca:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000cce:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000cd0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cd4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000ce4:	2318      	movs	r3, #24
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <SPI1_Init+0xa8>)
 8000cfc:	f001 f93b 	bl	8001f76 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000d00:	2100      	movs	r1, #0
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <SPI1_Init+0xa8>)
 8000d04:	f7ff ff90 	bl	8000c28 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <SPI1_Init+0xa8>)
 8000d0a:	f7ff ffa0 	bl	8000c4e <LL_SPI_DisableNSSPulseMgt>
}
 8000d0e:	bf00      	nop
 8000d10:	3740      	adds	r7, #64	@ 0x40
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40013000 	.word	0x40013000

08000d1c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d101      	bne.n	8000d36 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40010400 	.word	0x40010400

08000d48 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6153      	str	r3, [r2, #20]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40010400 	.word	0x40010400

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	bf00      	nop
 8000d7c:	e7fd      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d82:	bf00      	nop
 8000d84:	e7fd      	b.n	8000d82 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	bf00      	nop
 8000d8c:	e7fd      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d92:	bf00      	nop
 8000d94:	e7fd      	b.n	8000d92 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff ffa9 	bl	8000d1c <LL_EXTI_IsActiveFlag_0_31>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff ffb9 	bl	8000d48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <SystemInit+0x64>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <SystemInit+0x64>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <SystemInit+0x68>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <SystemInit+0x68>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <SystemInit+0x68>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <SystemInit+0x68>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <SystemInit+0x68>)
 8000e08:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e0c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <SystemInit+0x68>)
 8000e14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <SystemInit+0x68>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <SystemInit+0x68>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <SystemInit+0x68>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <SystemInit+0x64>)
 8000e2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e32:	609a      	str	r2, [r3, #8]
#endif
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	40021000 	.word	0x40021000

08000e48 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f043 0201 	orr.w	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_AHB2_GRP1_EnableClock>:
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000eaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <LL_APB1_GRP1_EnableClock>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ece:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ed0:	4907      	ldr	r1, [pc, #28]	@ (8000ef0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eda:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <USART2_Init>:
#include "stm32l4xx_ll_gpio.h"


//Initialisation de l'USART2.
void USART2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
 8000ef8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000f1e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000f22:	f7ff ffcf 	bl	8000ec4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ffb4 	bl	8000e94 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f40:	2307      	movs	r3, #7
 8000f42:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f000 fbbb 	bl	80016c6 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8000f50:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f54:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f62:	230c      	movs	r3, #12
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <USART2_Init+0x9c>)
 8000f76:	f001 f8bd 	bl	80020f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <USART2_Init+0x9c>)
 8000f7c:	f7ff ff74 	bl	8000e68 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <USART2_Init+0x9c>)
 8000f82:	f7ff ff61 	bl	8000e48 <LL_USART_Enable>
}
 8000f86:	bf00      	nop
 8000f88:	3738      	adds	r7, #56	@ 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ff20 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa8:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <LoopForever+0x16>)
	cmp	r2, r3
 8000fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f001 f953 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff fd51 	bl	8000a6c <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fd0:	0800231c 	.word	0x0800231c
	ldr	r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fd8:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000fdc:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000fe0:	20000038 	.word	0x20000038

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <LL_EXTI_EnableIT_0_31>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4904      	ldr	r1, [pc, #16]	@ (8001008 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40010400 	.word	0x40010400

0800100c <LL_EXTI_EnableIT_32_63>:
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <LL_EXTI_EnableIT_32_63+0x20>)
 8001016:	6a1a      	ldr	r2, [r3, #32]
 8001018:	4904      	ldr	r1, [pc, #16]	@ (800102c <LL_EXTI_EnableIT_32_63+0x20>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	620b      	str	r3, [r1, #32]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40010400 	.word	0x40010400

08001030 <LL_EXTI_DisableIT_0_31>:
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <LL_EXTI_DisableIT_0_31+0x24>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	43db      	mvns	r3, r3
 8001040:	4904      	ldr	r1, [pc, #16]	@ (8001054 <LL_EXTI_DisableIT_0_31+0x24>)
 8001042:	4013      	ands	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40010400 	.word	0x40010400

08001058 <LL_EXTI_DisableIT_32_63>:
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <LL_EXTI_DisableIT_32_63+0x24>)
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	43db      	mvns	r3, r3
 8001068:	4904      	ldr	r1, [pc, #16]	@ (800107c <LL_EXTI_DisableIT_32_63+0x24>)
 800106a:	4013      	ands	r3, r2
 800106c:	620b      	str	r3, [r1, #32]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40010400 	.word	0x40010400

08001080 <LL_EXTI_EnableEvent_0_31>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4904      	ldr	r1, [pc, #16]	@ (80010a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40010400 	.word	0x40010400

080010a4 <LL_EXTI_EnableEvent_32_63>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80010ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b0:	4904      	ldr	r1, [pc, #16]	@ (80010c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40010400 	.word	0x40010400

080010c8 <LL_EXTI_DisableEvent_0_31>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	4904      	ldr	r1, [pc, #16]	@ (80010ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80010da:	4013      	ands	r3, r2
 80010dc:	604b      	str	r3, [r1, #4]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40010400 	.word	0x40010400

080010f0 <LL_EXTI_DisableEvent_32_63>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <LL_EXTI_DisableEvent_32_63+0x24>)
 80010fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4904      	ldr	r1, [pc, #16]	@ (8001114 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001102:	4013      	ands	r3, r2
 8001104:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40010400 	.word	0x40010400

08001118 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4904      	ldr	r1, [pc, #16]	@ (8001138 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40010400 	.word	0x40010400

0800113c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001146:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001148:	4904      	ldr	r1, [pc, #16]	@ (800115c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40010400 	.word	0x40010400

08001160 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	43db      	mvns	r3, r3
 8001170:	4904      	ldr	r1, [pc, #16]	@ (8001184 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001172:	4013      	ands	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40010400 	.word	0x40010400

08001188 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	43db      	mvns	r3, r3
 8001198:	4904      	ldr	r1, [pc, #16]	@ (80011ac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800119a:	4013      	ands	r3, r2
 800119c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40010400 	.word	0x40010400

080011b0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4904      	ldr	r1, [pc, #16]	@ (80011d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40010400 	.word	0x40010400

080011d4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80011de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011e0:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40010400 	.word	0x40010400

080011f8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	43db      	mvns	r3, r3
 8001208:	4904      	ldr	r1, [pc, #16]	@ (800121c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800120a:	4013      	ands	r3, r2
 800120c:	60cb      	str	r3, [r1, #12]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010400 	.word	0x40010400

08001220 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800122a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	43db      	mvns	r3, r3
 8001230:	4904      	ldr	r1, [pc, #16]	@ (8001244 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001232:	4013      	ands	r3, r2
 8001234:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40010400 	.word	0x40010400

08001248 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7a1b      	ldrb	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80d0 	beq.w	80013fe <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7a5b      	ldrb	r3, [r3, #9]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d01c      	beq.n	80012a8 <LL_EXTI_Init+0x60>
 800126e:	2b02      	cmp	r3, #2
 8001270:	dc25      	bgt.n	80012be <LL_EXTI_Init+0x76>
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <LL_EXTI_Init+0x34>
 8001276:	2b01      	cmp	r3, #1
 8001278:	d00b      	beq.n	8001292 <LL_EXTI_Init+0x4a>
 800127a:	e020      	b.n	80012be <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff21 	bl	80010c8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff feac 	bl	8000fe8 <LL_EXTI_EnableIT_0_31>
          break;
 8001290:	e018      	b.n	80012c4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff feca 	bl	8001030 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff feed 	bl	8001080 <LL_EXTI_EnableEvent_0_31>
          break;
 80012a6:	e00d      	b.n	80012c4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fe9b 	bl	8000fe8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fee2 	bl	8001080 <LL_EXTI_EnableEvent_0_31>
          break;
 80012bc:	e002      	b.n	80012c4 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80012be:	2301      	movs	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
          break;
 80012c2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7a9b      	ldrb	r3, [r3, #10]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d030      	beq.n	800132e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7a9b      	ldrb	r3, [r3, #10]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d01c      	beq.n	800130e <LL_EXTI_Init+0xc6>
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	dc25      	bgt.n	8001324 <LL_EXTI_Init+0xdc>
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <LL_EXTI_Init+0x9a>
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d00b      	beq.n	80012f8 <LL_EXTI_Init+0xb0>
 80012e0:	e020      	b.n	8001324 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff86 	bl	80011f8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff11 	bl	8001118 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80012f6:	e01a      	b.n	800132e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff2f 	bl	8001160 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff52 	bl	80011b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800130c:	e00f      	b.n	800132e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff00 	bl	8001118 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff47 	bl	80011b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001322:	e004      	b.n	800132e <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
            break;
 800132c:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d077      	beq.n	8001426 <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7a5b      	ldrb	r3, [r3, #9]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d01c      	beq.n	8001378 <LL_EXTI_Init+0x130>
 800133e:	2b02      	cmp	r3, #2
 8001340:	dc25      	bgt.n	800138e <LL_EXTI_Init+0x146>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <LL_EXTI_Init+0x104>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d00b      	beq.n	8001362 <LL_EXTI_Init+0x11a>
 800134a:	e020      	b.n	800138e <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fecd 	bl	80010f0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe56 	bl	800100c <LL_EXTI_EnableIT_32_63>
          break;
 8001360:	e01a      	b.n	8001398 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe76 	bl	8001058 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe97 	bl	80010a4 <LL_EXTI_EnableEvent_32_63>
          break;
 8001376:	e00f      	b.n	8001398 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe45 	bl	800100c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fe8c 	bl	80010a4 <LL_EXTI_EnableEvent_32_63>
          break;
 800138c:	e004      	b.n	8001398 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	60fb      	str	r3, [r7, #12]
          break;
 8001396:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7a9b      	ldrb	r3, [r3, #10]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d042      	beq.n	8001426 <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a9b      	ldrb	r3, [r3, #10]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d01c      	beq.n	80013e2 <LL_EXTI_Init+0x19a>
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	dc25      	bgt.n	80013f8 <LL_EXTI_Init+0x1b0>
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d002      	beq.n	80013b6 <LL_EXTI_Init+0x16e>
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d00b      	beq.n	80013cc <LL_EXTI_Init+0x184>
 80013b4:	e020      	b.n	80013f8 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff30 	bl	8001220 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff feb9 	bl	800113c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80013ca:	e02c      	b.n	8001426 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fed9 	bl	8001188 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fefa 	bl	80011d4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80013e0:	e021      	b.n	8001426 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fea8 	bl	800113c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff feef 	bl	80011d4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80013f6:	e016      	b.n	8001426 <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
            break;
 80013fc:	e013      	b.n	8001426 <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe14 	bl	8001030 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe5b 	bl	80010c8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe1e 	bl	8001058 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe65 	bl	80010f0 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <LL_GPIO_SetPinMode>:
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	@ 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	613b      	str	r3, [r7, #16]
  return result;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001456:	2320      	movs	r3, #32
 8001458:	e003      	b.n	8001462 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2103      	movs	r1, #3
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	401a      	ands	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	61fb      	str	r3, [r7, #28]
  return result;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001484:	2320      	movs	r3, #32
 8001486:	e003      	b.n	8001490 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	372c      	adds	r7, #44	@ 0x2c
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_GPIO_SetPinOutputType>:
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_GPIO_SetPinSpeed>:
{
 80014da:	b480      	push	{r7}
 80014dc:	b08b      	sub	sp, #44	@ 0x2c
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	613b      	str	r3, [r7, #16]
  return result;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001500:	2320      	movs	r3, #32
 8001502:	e003      	b.n	800150c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2103      	movs	r1, #3
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	61fb      	str	r3, [r7, #28]
  return result;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800152e:	2320      	movs	r3, #32
 8001530:	e003      	b.n	800153a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	431a      	orrs	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	609a      	str	r2, [r3, #8]
}
 8001548:	bf00      	nop
 800154a:	372c      	adds	r7, #44	@ 0x2c
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_GPIO_SetPinPull>:
{
 8001554:	b480      	push	{r7}
 8001556:	b08b      	sub	sp, #44	@ 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	613b      	str	r3, [r7, #16]
  return result;
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800157a:	2320      	movs	r3, #32
 800157c:	e003      	b.n	8001586 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2103      	movs	r1, #3
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	401a      	ands	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	61fb      	str	r3, [r7, #28]
  return result;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80015a8:	2320      	movs	r3, #32
 80015aa:	e003      	b.n	80015b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	60da      	str	r2, [r3, #12]
}
 80015c2:	bf00      	nop
 80015c4:	372c      	adds	r7, #44	@ 0x2c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_GPIO_SetAFPin_0_7>:
{
 80015ce:	b480      	push	{r7}
 80015d0:	b08b      	sub	sp, #44	@ 0x2c
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a1a      	ldr	r2, [r3, #32]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	613b      	str	r3, [r7, #16]
  return result;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80015f4:	2320      	movs	r3, #32
 80015f6:	e003      	b.n	8001600 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	210f      	movs	r1, #15
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	61fb      	str	r3, [r7, #28]
  return result;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001622:	2320      	movs	r3, #32
 8001624:	e003      	b.n	800162e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	621a      	str	r2, [r3, #32]
}
 800163c:	bf00      	nop
 800163e:	372c      	adds	r7, #44	@ 0x2c
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_GPIO_SetAFPin_8_15>:
{
 8001648:	b480      	push	{r7}
 800164a:	b08b      	sub	sp, #44	@ 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	613b      	str	r3, [r7, #16]
  return result;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001670:	2320      	movs	r3, #32
 8001672:	e003      	b.n	800167c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	210f      	movs	r1, #15
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	61fb      	str	r3, [r7, #28]
  return result;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e003      	b.n	80016ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	431a      	orrs	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80016ba:	bf00      	nop
 80016bc:	372c      	adds	r7, #44	@ 0x2c
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	60fb      	str	r3, [r7, #12]
  return result;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <LL_GPIO_Init+0x26>
    return 32U;
 80016e8:	2320      	movs	r3, #32
 80016ea:	e003      	b.n	80016f4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80016f6:	e040      	b.n	800177a <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d032      	beq.n	8001774 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	69b9      	ldr	r1, [r7, #24]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe8a 	bl	8001430 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d003      	beq.n	800172c <LL_GPIO_Init+0x66>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d106      	bne.n	800173a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	461a      	mov	r2, r3
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fed0 	bl	80014da <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	461a      	mov	r2, r3
 8001740:	69b9      	ldr	r1, [r7, #24]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff06 	bl	8001554 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d111      	bne.n	8001774 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	@ 0xff
 8001754:	d807      	bhi.n	8001766 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	461a      	mov	r2, r3
 800175c:	69b9      	ldr	r1, [r7, #24]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff35 	bl	80015ce <LL_GPIO_SetAFPin_0_7>
 8001764:	e006      	b.n	8001774 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	461a      	mov	r2, r3
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff6a 	bl	8001648 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1b7      	bne.n	80016f8 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <LL_GPIO_Init+0xd2>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d107      	bne.n	80017a8 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	461a      	mov	r2, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe81 	bl	80014aa <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <LL_RCC_HSI_IsReady>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <LL_RCC_HSI_IsReady+0x24>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c4:	d101      	bne.n	80017ca <LL_RCC_HSI_IsReady+0x16>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <LL_RCC_HSI_IsReady+0x18>
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_LSE_IsReady>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <LL_RCC_LSE_IsReady+0x24>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d101      	bne.n	80017f2 <LL_RCC_LSE_IsReady+0x16>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_RCC_LSE_IsReady+0x18>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b08      	cmp	r3, #8
 8001812:	d101      	bne.n	8001818 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000

08001828 <LL_RCC_MSI_GetRange>:
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <LL_RCC_MSI_GetRange+0x18>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000

08001860 <LL_RCC_GetSysClkSource>:
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <LL_RCC_GetSysClkSource+0x18>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <LL_RCC_GetAHBPrescaler>:
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <LL_RCC_GetAHBPrescaler+0x18>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <LL_RCC_GetAPB1Prescaler>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <LL_RCC_GetAPB2Prescaler>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <LL_RCC_GetUSARTClockSource>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <LL_RCC_GetUSARTClockSource+0x24>)
 80018da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	4313      	orrs	r3, r2
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_RCC_GetUARTClockSource>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <LL_RCC_GetUARTClockSource+0x24>)
 8001902:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	401a      	ands	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	4313      	orrs	r3, r2
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000

08001920 <LL_RCC_PLL_GetMainSource>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <LL_RCC_PLL_GetMainSource+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0303 	and.w	r3, r3, #3
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <LL_RCC_PLL_GetN>:
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <LL_RCC_PLL_GetN+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40021000 	.word	0x40021000

08001958 <LL_RCC_PLL_GetR>:
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <LL_RCC_PLL_GetR+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <LL_RCC_PLL_GetDivider>:
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <LL_RCC_PLL_GetDivider+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d137      	bne.n	8001a12 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff94 	bl	80018d0 <LL_RCC_GetUSARTClockSource>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f200 80b3 	bhi.w	8001b1a <LL_RCC_GetUSARTClockFreq+0x18a>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <LL_RCC_GetUSARTClockFreq+0x2c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019fb 	.word	0x080019fb
 80019c0:	080019cd 	.word	0x080019cd
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019e7 	.word	0x080019e7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80019cc:	f000 f956 	bl	8001c7c <RCC_GetSystemClockFreq>
 80019d0:	60f8      	str	r0, [r7, #12]
        break;
 80019d2:	e0b3      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80019d4:	f7ff feee 	bl	80017b4 <LL_RCC_HSI_IsReady>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 809f 	beq.w	8001b1e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80019e0:	4b59      	ldr	r3, [pc, #356]	@ (8001b48 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80019e2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80019e4:	e09b      	b.n	8001b1e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80019e6:	f7ff fef9 	bl	80017dc <LL_RCC_LSE_IsReady>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8098 	beq.w	8001b22 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80019f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80019f8:	e093      	b.n	8001b22 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80019fa:	f000 f93f 	bl	8001c7c <RCC_GetSystemClockFreq>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f9cb 	bl	8001d9c <RCC_GetHCLKClockFreq>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9f1 	bl	8001df0 <RCC_GetPCLK2ClockFreq>
 8001a0e:	60f8      	str	r0, [r7, #12]
        break;
 8001a10:	e094      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d146      	bne.n	8001aa6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff59 	bl	80018d0 <LL_RCC_GetUSARTClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d87e      	bhi.n	8001b26 <LL_RCC_GetUSARTClockFreq+0x196>
 8001a28:	a201      	add	r2, pc, #4	@ (adr r2, 8001a30 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001b27 	.word	0x08001b27
 8001a38:	08001b27 	.word	0x08001b27
 8001a3c:	08001b27 	.word	0x08001b27
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001b27 	.word	0x08001b27
 8001a48:	08001b27 	.word	0x08001b27
 8001a4c:	08001b27 	.word	0x08001b27
 8001a50:	08001a6d 	.word	0x08001a6d
 8001a54:	08001b27 	.word	0x08001b27
 8001a58:	08001b27 	.word	0x08001b27
 8001a5c:	08001b27 	.word	0x08001b27
 8001a60:	08001a7d 	.word	0x08001a7d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001a64:	f000 f90a 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001a68:	60f8      	str	r0, [r7, #12]
        break;
 8001a6a:	e067      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001a6c:	f7ff fea2 	bl	80017b4 <LL_RCC_HSI_IsReady>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d059      	beq.n	8001b2a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8001a76:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001a78:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a7a:	e056      	b.n	8001b2a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001a7c:	f7ff feae 	bl	80017dc <LL_RCC_LSE_IsReady>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d053      	beq.n	8001b2e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8001a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a8a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a8c:	e04f      	b.n	8001b2e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001a8e:	f000 f8f5 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f981 	bl	8001d9c <RCC_GetHCLKClockFreq>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f993 	bl	8001dc8 <RCC_GetPCLK1ClockFreq>
 8001aa2:	60f8      	str	r0, [r7, #12]
        break;
 8001aa4:	e04a      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b30      	cmp	r3, #48	@ 0x30
 8001aaa:	d147      	bne.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff0f 	bl	80018d0 <LL_RCC_GetUSARTClockSource>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001ab8:	d01a      	beq.n	8001af0 <LL_RCC_GetUSARTClockFreq+0x160>
 8001aba:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001abe:	d838      	bhi.n	8001b32 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001ac0:	4a22      	ldr	r2, [pc, #136]	@ (8001b4c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00c      	beq.n	8001ae0 <LL_RCC_GetUSARTClockFreq+0x150>
 8001ac6:	4a21      	ldr	r2, [pc, #132]	@ (8001b4c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d832      	bhi.n	8001b32 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001ad0:	d017      	beq.n	8001b02 <LL_RCC_GetUSARTClockFreq+0x172>
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12c      	bne.n	8001b32 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001ad8:	f000 f8d0 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001adc:	60f8      	str	r0, [r7, #12]
          break;
 8001ade:	e02d      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8001ae0:	f7ff fe68 	bl	80017b4 <LL_RCC_HSI_IsReady>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d025      	beq.n	8001b36 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8001aea:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001aec:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001aee:	e022      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8001af0:	f7ff fe74 	bl	80017dc <LL_RCC_LSE_IsReady>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01f      	beq.n	8001b3a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8001afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001afe:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001b00:	e01b      	b.n	8001b3a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001b02:	f000 f8bb 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f947 	bl	8001d9c <RCC_GetHCLKClockFreq>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f959 	bl	8001dc8 <RCC_GetPCLK1ClockFreq>
 8001b16:	60f8      	str	r0, [r7, #12]
          break;
 8001b18:	e010      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b1a:	bf00      	nop
 8001b1c:	e00e      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b1e:	bf00      	nop
 8001b20:	e00c      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b22:	bf00      	nop
 8001b24:	e00a      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b26:	bf00      	nop
 8001b28:	e008      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b2a:	bf00      	nop
 8001b2c:	e006      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b2e:	bf00      	nop
 8001b30:	e004      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8001b32:	bf00      	nop
 8001b34:	e002      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001b3a:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	00300020 	.word	0x00300020
 8001b50:	00300010 	.word	0x00300010

08001b54 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8001b64:	d13b      	bne.n	8001bde <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fec6 	bl	80018f8 <LL_RCC_GetUARTClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001b72:	d01a      	beq.n	8001baa <LL_RCC_GetUARTClockFreq+0x56>
 8001b74:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001b78:	d82c      	bhi.n	8001bd4 <LL_RCC_GetUARTClockFreq+0x80>
 8001b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c68 <LL_RCC_GetUARTClockFreq+0x114>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00c      	beq.n	8001b9a <LL_RCC_GetUARTClockFreq+0x46>
 8001b80:	4a39      	ldr	r2, [pc, #228]	@ (8001c68 <LL_RCC_GetUARTClockFreq+0x114>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d826      	bhi.n	8001bd4 <LL_RCC_GetUARTClockFreq+0x80>
 8001b86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001b8a:	d017      	beq.n	8001bbc <LL_RCC_GetUARTClockFreq+0x68>
 8001b8c:	4a37      	ldr	r2, [pc, #220]	@ (8001c6c <LL_RCC_GetUARTClockFreq+0x118>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d120      	bne.n	8001bd4 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001b92:	f000 f873 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001b96:	60f8      	str	r0, [r7, #12]
        break;
 8001b98:	e021      	b.n	8001bde <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001b9a:	f7ff fe0b 	bl	80017b4 <LL_RCC_HSI_IsReady>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d019      	beq.n	8001bd8 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <LL_RCC_GetUARTClockFreq+0x11c>)
 8001ba6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ba8:	e016      	b.n	8001bd8 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001baa:	f7ff fe17 	bl	80017dc <LL_RCC_LSE_IsReady>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8001bb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bb8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001bba:	e00f      	b.n	8001bdc <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001bbc:	f000 f85e 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8ea 	bl	8001d9c <RCC_GetHCLKClockFreq>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f8fc 	bl	8001dc8 <RCC_GetPCLK1ClockFreq>
 8001bd0:	60f8      	str	r0, [r7, #12]
        break;
 8001bd2:	e004      	b.n	8001bde <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8001bd4:	bf00      	nop
 8001bd6:	e002      	b.n	8001bde <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001bdc:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001be4:	d13b      	bne.n	8001c5e <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe86 	bl	80018f8 <LL_RCC_GetUARTClockSource>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001bf2:	d01a      	beq.n	8001c2a <LL_RCC_GetUARTClockFreq+0xd6>
 8001bf4:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001bf8:	d82c      	bhi.n	8001c54 <LL_RCC_GetUARTClockFreq+0x100>
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <LL_RCC_GetUARTClockFreq+0x120>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00c      	beq.n	8001c1a <LL_RCC_GetUARTClockFreq+0xc6>
 8001c00:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <LL_RCC_GetUARTClockFreq+0x120>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d826      	bhi.n	8001c54 <LL_RCC_GetUARTClockFreq+0x100>
 8001c06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001c0a:	d017      	beq.n	8001c3c <LL_RCC_GetUARTClockFreq+0xe8>
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <LL_RCC_GetUARTClockFreq+0x124>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d120      	bne.n	8001c54 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001c12:	f000 f833 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001c16:	60f8      	str	r0, [r7, #12]
        break;
 8001c18:	e021      	b.n	8001c5e <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001c1a:	f7ff fdcb 	bl	80017b4 <LL_RCC_HSI_IsReady>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d019      	beq.n	8001c58 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <LL_RCC_GetUARTClockFreq+0x11c>)
 8001c26:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c28:	e016      	b.n	8001c58 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001c2a:	f7ff fdd7 	bl	80017dc <LL_RCC_LSE_IsReady>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8001c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c38:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c3a:	e00f      	b.n	8001c5c <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c3c:	f000 f81e 	bl	8001c7c <RCC_GetSystemClockFreq>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f8aa 	bl	8001d9c <RCC_GetHCLKClockFreq>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f8bc 	bl	8001dc8 <RCC_GetPCLK1ClockFreq>
 8001c50:	60f8      	str	r0, [r7, #12]
        break;
 8001c52:	e004      	b.n	8001c5e <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8001c54:	bf00      	nop
 8001c56:	e002      	b.n	8001c5e <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001c58:	bf00      	nop
 8001c5a:	e000      	b.n	8001c5e <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001c5c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	00c00080 	.word	0x00c00080
 8001c6c:	00c00040 	.word	0x00c00040
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	03000200 	.word	0x03000200
 8001c78:	03000100 	.word	0x03000100

08001c7c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c82:	f7ff fded 	bl	8001860 <LL_RCC_GetSysClkSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d851      	bhi.n	8001d30 <RCC_GetSystemClockFreq+0xb4>
 8001c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <RCC_GetSystemClockFreq+0x18>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001cc9 	.word	0x08001cc9
 8001c98:	08001d31 	.word	0x08001d31
 8001c9c:	08001d31 	.word	0x08001d31
 8001ca0:	08001d31 	.word	0x08001d31
 8001ca4:	08001d1d 	.word	0x08001d1d
 8001ca8:	08001d31 	.word	0x08001d31
 8001cac:	08001d31 	.word	0x08001d31
 8001cb0:	08001d31 	.word	0x08001d31
 8001cb4:	08001d23 	.word	0x08001d23
 8001cb8:	08001d31 	.word	0x08001d31
 8001cbc:	08001d31 	.word	0x08001d31
 8001cc0:	08001d31 	.word	0x08001d31
 8001cc4:	08001d29 	.word	0x08001d29
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001cc8:	f7ff fd9c 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d111      	bne.n	8001cf6 <RCC_GetSystemClockFreq+0x7a>
 8001cd2:	f7ff fd97 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <RCC_GetSystemClockFreq+0x6a>
 8001cdc:	f7ff fda4 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	e003      	b.n	8001cee <RCC_GetSystemClockFreq+0x72>
 8001ce6:	f7ff fdad 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001cea:	4603      	mov	r3, r0
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	4a28      	ldr	r2, [pc, #160]	@ (8001d90 <RCC_GetSystemClockFreq+0x114>)
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	e010      	b.n	8001d18 <RCC_GetSystemClockFreq+0x9c>
 8001cf6:	f7ff fd85 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <RCC_GetSystemClockFreq+0x8e>
 8001d00:	f7ff fd92 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001d04:	4603      	mov	r3, r0
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	e003      	b.n	8001d12 <RCC_GetSystemClockFreq+0x96>
 8001d0a:	f7ff fd9b 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <RCC_GetSystemClockFreq+0x114>)
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001d1a:	e033      	b.n	8001d84 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <RCC_GetSystemClockFreq+0x118>)
 8001d1e:	607b      	str	r3, [r7, #4]
      break;
 8001d20:	e030      	b.n	8001d84 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <RCC_GetSystemClockFreq+0x11c>)
 8001d24:	607b      	str	r3, [r7, #4]
      break;
 8001d26:	e02d      	b.n	8001d84 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001d28:	f000 f876 	bl	8001e18 <RCC_PLL_GetFreqDomain_SYS>
 8001d2c:	6078      	str	r0, [r7, #4]
      break;
 8001d2e:	e029      	b.n	8001d84 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d30:	f7ff fd68 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d111      	bne.n	8001d5e <RCC_GetSystemClockFreq+0xe2>
 8001d3a:	f7ff fd63 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <RCC_GetSystemClockFreq+0xd2>
 8001d44:	f7ff fd70 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	e003      	b.n	8001d56 <RCC_GetSystemClockFreq+0xda>
 8001d4e:	f7ff fd79 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d52:	4603      	mov	r3, r0
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <RCC_GetSystemClockFreq+0x114>)
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	e010      	b.n	8001d80 <RCC_GetSystemClockFreq+0x104>
 8001d5e:	f7ff fd51 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <RCC_GetSystemClockFreq+0xf6>
 8001d68:	f7ff fd5e 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	e003      	b.n	8001d7a <RCC_GetSystemClockFreq+0xfe>
 8001d72:	f7ff fd67 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d76:	4603      	mov	r3, r0
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <RCC_GetSystemClockFreq+0x114>)
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001d82:	bf00      	nop
  }

  return frequency;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	080022e4 	.word	0x080022e4
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001da4:	f7ff fd6a 	bl	800187c <LL_RCC_GetAHBPrescaler>
 8001da8:	4603      	mov	r3, r0
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <RCC_GetHCLKClockFreq+0x28>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	40d3      	lsrs	r3, r2
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080022cc 	.word	0x080022cc

08001dc8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001dd0:	f7ff fd62 	bl	8001898 <LL_RCC_GetAPB1Prescaler>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <RCC_GetPCLK1ClockFreq+0x24>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	40d3      	lsrs	r3, r2
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	080022dc 	.word	0x080022dc

08001df0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001df8:	f7ff fd5c 	bl	80018b4 <LL_RCC_GetAPB2Prescaler>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <RCC_GetPCLK2ClockFreq+0x24>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	40d3      	lsrs	r3, r2
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	080022dc 	.word	0x080022dc

08001e18 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001e1e:	f7ff fd7f 	bl	8001920 <LL_RCC_PLL_GetMainSource>
 8001e22:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d036      	beq.n	8001e98 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d836      	bhi.n	8001e9e <RCC_PLL_GetFreqDomain_SYS+0x86>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d003      	beq.n	8001e3e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d02a      	beq.n	8001e92 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8001e3c:	e02f      	b.n	8001e9e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e3e:	f7ff fce1 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d111      	bne.n	8001e6c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8001e48:	f7ff fcdc 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8001e52:	f7ff fce9 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001e56:	4603      	mov	r3, r0
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	e003      	b.n	8001e64 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001e5c:	f7ff fcf2 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e60:	4603      	mov	r3, r0
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	4a2f      	ldr	r2, [pc, #188]	@ (8001f24 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	e010      	b.n	8001e8e <RCC_PLL_GetFreqDomain_SYS+0x76>
 8001e6c:	f7ff fcca 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8001e76:	f7ff fcd7 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	e003      	b.n	8001e88 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8001e80:	f7ff fce0 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e84:	4603      	mov	r3, r0
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	4a26      	ldr	r2, [pc, #152]	@ (8001f24 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001e90:	e02f      	b.n	8001ef2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001e92:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8001e94:	607b      	str	r3, [r7, #4]
      break;
 8001e96:	e02c      	b.n	8001ef2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8001e9a:	607b      	str	r3, [r7, #4]
      break;
 8001e9c:	e029      	b.n	8001ef2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e9e:	f7ff fcb1 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d111      	bne.n	8001ecc <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8001ea8:	f7ff fcac 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8001eb2:	f7ff fcb9 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	e003      	b.n	8001ec4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8001ebc:	f7ff fcc2 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	e010      	b.n	8001eee <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8001ecc:	f7ff fc9a 	bl	8001804 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8001ed6:	f7ff fca7 	bl	8001828 <LL_RCC_MSI_GetRange>
 8001eda:	4603      	mov	r3, r0
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	e003      	b.n	8001ee8 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8001ee0:	f7ff fcb0 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f24 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001ef0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001ef2:	f7ff fd3f 	bl	8001974 <LL_RCC_PLL_GetDivider>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	3301      	adds	r3, #1
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	fbb2 f4f3 	udiv	r4, r2, r3
 8001f02:	f7ff fd1b 	bl	800193c <LL_RCC_PLL_GetN>
 8001f06:	4603      	mov	r3, r0
 8001f08:	fb03 f404 	mul.w	r4, r3, r4
 8001f0c:	f7ff fd24 	bl	8001958 <LL_RCC_PLL_GetR>
 8001f10:	4603      	mov	r3, r0
 8001f12:	0e5b      	lsrs	r3, r3, #25
 8001f14:	3301      	adds	r3, #1
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}
 8001f24:	080022e4 	.word	0x080022e4
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <LL_SPI_IsEnabled>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f40:	2b40      	cmp	r3, #64	@ 0x40
 8001f42:	d101      	bne.n	8001f48 <LL_SPI_IsEnabled+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_SPI_IsEnabled+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_SPI_SetCRCPolynomial>:
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffd3 	bl	8001f30 <LL_SPI_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13b      	bne.n	8002008 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f98:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	6811      	ldr	r1, [r2, #0]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	6852      	ldr	r2, [r2, #4]
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	68d2      	ldr	r2, [r2, #12]
 8001faa:	4311      	orrs	r1, r2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	6912      	ldr	r2, [r2, #16]
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6952      	ldr	r2, [r2, #20]
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6992      	ldr	r2, [r2, #24]
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	69d2      	ldr	r2, [r2, #28]
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	6a12      	ldr	r2, [r2, #32]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6891      	ldr	r1, [r2, #8]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6952      	ldr	r2, [r2, #20]
 8001fe4:	0c12      	lsrs	r2, r2, #16
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ff6:	d105      	bne.n	8002004 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa9 	bl	8001f56 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <LL_USART_IsEnabled>:
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <LL_USART_IsEnabled+0x18>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_USART_IsEnabled+0x1a>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_USART_SetStopBitsLength>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	605a      	str	r2, [r3, #4]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_USART_SetHWFlowCtrl>:
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_USART_SetBaudRate>:
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002098:	d11a      	bne.n	80020d0 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	005a      	lsls	r2, r3, #1
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	441a      	add	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
}
 80020ce:	e00a      	b.n	80020e6 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	085a      	lsrs	r2, r3, #1
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	441a      	add	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	60da      	str	r2, [r3, #12]
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff83 	bl	8002012 <LL_USART_IsEnabled>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d15b      	bne.n	80021ca <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <LL_USART_Init+0xe0>)
 8002118:	4013      	ands	r3, r2
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6851      	ldr	r1, [r2, #4]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	6912      	ldr	r2, [r2, #16]
 8002128:	4311      	orrs	r1, r2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	6992      	ldr	r2, [r2, #24]
 800212e:	430a      	orrs	r2, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff7b 	bl	8002038 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff88 	bl	800205e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <LL_USART_Init+0xe4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d104      	bne.n	8002160 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002156:	2003      	movs	r0, #3
 8002158:	f7ff fc1a 	bl	8001990 <LL_RCC_GetUSARTClockFreq>
 800215c:	60b8      	str	r0, [r7, #8]
 800215e:	e023      	b.n	80021a8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a1e      	ldr	r2, [pc, #120]	@ (80021dc <LL_USART_Init+0xe8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d104      	bne.n	8002172 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002168:	200c      	movs	r0, #12
 800216a:	f7ff fc11 	bl	8001990 <LL_RCC_GetUSARTClockFreq>
 800216e:	60b8      	str	r0, [r7, #8]
 8002170:	e01a      	b.n	80021a8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <LL_USART_Init+0xec>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d104      	bne.n	8002184 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800217a:	2030      	movs	r0, #48	@ 0x30
 800217c:	f7ff fc08 	bl	8001990 <LL_RCC_GetUSARTClockFreq>
 8002180:	60b8      	str	r0, [r7, #8]
 8002182:	e011      	b.n	80021a8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <LL_USART_Init+0xf0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d104      	bne.n	8002196 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800218c:	20c0      	movs	r0, #192	@ 0xc0
 800218e:	f7ff fce1 	bl	8001b54 <LL_RCC_GetUARTClockFreq>
 8002192:	60b8      	str	r0, [r7, #8]
 8002194:	e008      	b.n	80021a8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a13      	ldr	r2, [pc, #76]	@ (80021e8 <LL_USART_Init+0xf4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d104      	bne.n	80021a8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800219e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80021a2:	f7ff fcd7 	bl	8001b54 <LL_RCC_GetUARTClockFreq>
 80021a6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff5d 	bl	8002084 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	efff69f3 	.word	0xefff69f3
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40004800 	.word	0x40004800
 80021e4:	40004c00 	.word	0x40004c00
 80021e8:	40005000 	.word	0x40005000

080021ec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <LL_mDelay+0x4c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021fe:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d00c      	beq.n	8002222 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800220e:	e008      	b.n	8002222 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <LL_mDelay+0x4c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3b01      	subs	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f3      	bne.n	8002210 <LL_mDelay+0x24>
    }
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <LL_SetSystemCoreClock+0x1c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000000 	.word	0x20000000

0800225c <memset>:
 800225c:	4402      	add	r2, r0
 800225e:	4603      	mov	r3, r0
 8002260:	4293      	cmp	r3, r2
 8002262:	d100      	bne.n	8002266 <memset+0xa>
 8002264:	4770      	bx	lr
 8002266:	f803 1b01 	strb.w	r1, [r3], #1
 800226a:	e7f9      	b.n	8002260 <memset+0x4>

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	4d0d      	ldr	r5, [pc, #52]	@ (80022a4 <__libc_init_array+0x38>)
 8002270:	4c0d      	ldr	r4, [pc, #52]	@ (80022a8 <__libc_init_array+0x3c>)
 8002272:	1b64      	subs	r4, r4, r5
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	2600      	movs	r6, #0
 8002278:	42a6      	cmp	r6, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	4d0b      	ldr	r5, [pc, #44]	@ (80022ac <__libc_init_array+0x40>)
 800227e:	4c0c      	ldr	r4, [pc, #48]	@ (80022b0 <__libc_init_array+0x44>)
 8002280:	f000 f818 	bl	80022b4 <_init>
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	2600      	movs	r6, #0
 800228a:	42a6      	cmp	r6, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	f855 3b04 	ldr.w	r3, [r5], #4
 8002294:	4798      	blx	r3
 8002296:	3601      	adds	r6, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	f855 3b04 	ldr.w	r3, [r5], #4
 800229e:	4798      	blx	r3
 80022a0:	3601      	adds	r6, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	08002314 	.word	0x08002314
 80022a8:	08002314 	.word	0x08002314
 80022ac:	08002314 	.word	0x08002314
 80022b0:	08002318 	.word	0x08002318

080022b4 <_init>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr

080022c0 <_fini>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr
