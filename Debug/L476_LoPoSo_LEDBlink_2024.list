
L476_LoPoSo_LEDBlink_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b4  080040b4  000060a4  2**0
                  CONTENTS
  4 .ARM          00000008  080040b4  080040b4  000050b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040bc  080040bc  000060a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c0  080040c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080040c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000a4  08004168  000060a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004168  00006248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a2f  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1c  00000000  00000000  0000eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00010a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000824  00000000  00000000  00011530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216dd  00000000  00000000  00011d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000927c  00000000  00000000  00033431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b57a3  00000000  00000000  0003c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1e50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  000f1e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f4f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003edc 	.word	0x08003edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08003edc 	.word	0x08003edc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	619a      	str	r2, [r3, #24]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <nRF24_CE_L>:
#define CRC_Field_1byte 0
#define CRC_Field_2byte 1

#define NRF_SPI SPI1

static inline void nRF24_CE_L() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(nRF_CE_GPIO_Port, nRF_CE_Pin);
 80002ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b4:	f7ff ffea 	bl	800028c <LL_GPIO_ResetOutputPin>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}

080002bc <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(nRF_CE_GPIO_Port, nRF_CE_Pin);
 80002c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c8:	f7ff ffd2 	bl	8000270 <LL_GPIO_SetOutputPin>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <Delay_ms>:
    while (!LL_SPI_IsActiveFlag_RXNE(NRF_SPI));
    return LL_SPI_ReceiveData8(NRF_SPI);
}


static inline void Delay_ms(uint32_t ms) { LL_mDelay(ms); }
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f003 f913 	bl	8003504 <LL_mDelay>
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 80002f4:	4b21      	ldr	r3, [pc, #132]	@ (800037c <nRF24_TransmitPacket+0x94>)
 80002f6:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 80002f8:	f7ff ffd6 	bl	80002a8 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	4619      	mov	r1, r3
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f001 fc62 	bl	8001bca <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000306:	f7ff ffd9 	bl	80002bc <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 800030a:	f001 fc26 	bl	8001b5a <nRF24_GetStatus>
 800030e:	4603      	mov	r3, r0
 8000310:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	1e5a      	subs	r2, r3, #1
 8000320:	60ba      	str	r2, [r7, #8]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f1      	bne.n	800030a <nRF24_TransmitPacket+0x22>
 8000326:	e000      	b.n	800032a <nRF24_TransmitPacket+0x42>
			break;
 8000328:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 800032a:	f7ff ffbd 	bl	80002a8 <nRF24_CE_L>

	if (!wait) {
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d101      	bne.n	8000338 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8000334:	2302      	movs	r3, #2
 8000336:	e01c      	b.n	8000372 <nRF24_TransmitPacket+0x8a>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8000338:	4811      	ldr	r0, [pc, #68]	@ (8000380 <nRF24_TransmitPacket+0x98>)
 800033a:	f001 ff1b 	bl	8002174 <UART_SendStr>
	UART_SendHex8(status);
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	4618      	mov	r0, r3
 8000342:	f001 ff5b 	bl	80021fc <UART_SendHex8>
	UART_SendStr("] ");
 8000346:	480f      	ldr	r0, [pc, #60]	@ (8000384 <nRF24_TransmitPacket+0x9c>)
 8000348:	f001 ff14 	bl	8002174 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800034c:	f001 fc28 	bl	8001ba0 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f003 0310 	and.w	r3, r3, #16
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <nRF24_TransmitPacket+0x76>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 800035a:	2303      	movs	r3, #3
 800035c:	e009      	b.n	8000372 <nRF24_TransmitPacket+0x8a>
	}

	if (status & nRF24_FLAG_TX_DS) {
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <nRF24_TransmitPacket+0x84>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000368:	2301      	movs	r3, #1
 800036a:	e002      	b.n	8000372 <nRF24_TransmitPacket+0x8a>
	}
	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 800036c:	f001 fc08 	bl	8001b80 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	000fffff 	.word	0x000fffff
 8000380:	08003ef4 	.word	0x08003ef4
 8000384:	08003ef8 	.word	0x08003ef8

08000388 <Init_Transceiver>:

//Initialisation du transceiver --> paramètres par défaut, raz des IRQ, passage en mode power down
//et vérification que le transceiver fonctionne.
//Les registres du nRF24L01 sont accessibles par SPI même en mode power down.
void Init_Transceiver() {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	uint8_t check_OK;

	nRF24_Init(); // Initialize the nRF24L01 to its default state
 800038e:	f001 f9dc 	bl	800174a <nRF24_Init>
	nRF24_ClearIRQFlags(); // Clear any pending IRQ flags
 8000392:	f001 fc05 	bl	8001ba0 <nRF24_ClearIRQFlags>
	nRF24_SetPowerMode(nRF24_PWR_DOWN); //passage en mode power down.
 8000396:	2000      	movs	r0, #0
 8000398:	f001 fa52 	bl	8001840 <nRF24_SetPowerMode>
	//même si le passage en mode power down est rapide, on laisse un délai de 1 ms (suppose que
	//le Systick soit cadencé pour déborder toutes les 1 ms).
	Delay_ms(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ff97 	bl	80002d0 <Delay_ms>

	check_OK = nRF24_Check(); //vérif de la présence du nRF24L01
 80003a2:	f001 fa1f 	bl	80017e4 <nRF24_Check>
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	if (check_OK == 1) {
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d103      	bne.n	80003b8 <Init_Transceiver+0x30>
		UART_SendStr("The transceiver nRF24L01 is on-line.\r\n");
 80003b0:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <Init_Transceiver+0x40>)
 80003b2:	f001 fedf 	bl	8002174 <UART_SendStr>
	} else {
		UART_SendStr("The transceiver nRF24L01 is not responding.\r\n");
	}
}
 80003b6:	e002      	b.n	80003be <Init_Transceiver+0x36>
		UART_SendStr("The transceiver nRF24L01 is not responding.\r\n");
 80003b8:	4804      	ldr	r0, [pc, #16]	@ (80003cc <Init_Transceiver+0x44>)
 80003ba:	f001 fedb 	bl	8002174 <UART_SendStr>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08003efc 	.word	0x08003efc
 80003cc:	08003f24 	.word	0x08003f24

080003d0 <Config_RF_channel>:

//Configuration du canal RF : fréq du canal RF, puissance RF et data rate
void Config_RF_channel(uint8_t channel_nb, uint8_t DataRate, uint8_t TX_Power) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	460b      	mov	r3, r1
 80003dc:	71bb      	strb	r3, [r7, #6]
 80003de:	4613      	mov	r3, r2
 80003e0:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Set RF channel
	nRF24_SetRFChannel(channel_nb);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fa8c 	bl	8001902 <nRF24_SetRFChannel>
	// Set data rate
	nRF24_SetDataRate(DataRate);
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fb28 	bl	8001a42 <nRF24_SetDataRate>
	// Set TX power
	nRF24_SetTXPower(TX_Power);
 80003f2:	797b      	ldrb	r3, [r7, #5]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fb07 	bl	8001a08 <nRF24_SetTXPower>

	//verification des registres.
	//reg = ReadReg(0x05); //registre RF_CH
	//reg = ReadReg(0x06); //registre RF_SETUP
	//reg = ReadReg(0x00); //registre config
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <Config_CRC>:

//configuration du CRC :
//CRC_On = 0 --> desactivation du champ CRC, = 1 --> activation du champ CRC
//size_CRC = 0 --> CRC sur 1 octet. size_CRC = 1 --> CRC sur 2 octets
void Config_CRC(uint8_t CRC_On, uint8_t size_CRC) {
 8000402:	b580      	push	{r7, lr}
 8000404:	b084      	sub	sp, #16
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	460a      	mov	r2, r1
 800040c:	71fb      	strb	r3, [r7, #7]
 800040e:	4613      	mov	r3, r2
 8000410:	71bb      	strb	r3, [r7, #6]
	uint8_t scheme_CRC = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]

	if (CRC_On == CRC_Field_On) {
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d107      	bne.n	800042c <Config_CRC+0x2a>
		if (size_CRC == CRC_Field_1byte) {
 800041c:	79bb      	ldrb	r3, [r7, #6]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d102      	bne.n	8000428 <Config_CRC+0x26>
			scheme_CRC = 0x8;
 8000422:	2308      	movs	r3, #8
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	e001      	b.n	800042c <Config_CRC+0x2a>
		}
		else {
			scheme_CRC = 0xC;
 8000428:	230c      	movs	r3, #12
 800042a:	73fb      	strb	r3, [r7, #15]
		}
	}

	nRF24_SetCRCScheme(scheme_CRC);
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fa46 	bl	80018c0 <nRF24_SetCRCScheme>
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <Config_PRX_adress>:

//configure les 6 adresses des data pipes. Configure aussi la largeur de l'adresse (3 à 5 octets)
//Addr_Default = Default_pipe_address ou Custom_pipe_address.
void Config_PRX_adress(uint8_t Address_width, uint8_t autoAck_on, uint8_t Addr_Default) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
 8000446:	460b      	mov	r3, r1
 8000448:	71bb      	strb	r3, [r7, #6]
 800044a:	4613      	mov	r3, r2
 800044c:	717b      	strb	r3, [r7, #5]
	uint8_t verif_RX0_Adr[5];

	if ((Address_width < 3) | (Address_width > 5)) { //par défaut, adresse sur 5 octets
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b02      	cmp	r3, #2
 8000452:	bf94      	ite	ls
 8000454:	2301      	movls	r3, #1
 8000456:	2300      	movhi	r3, #0
 8000458:	b2da      	uxtb	r2, r3
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b05      	cmp	r3, #5
 800045e:	bf8c      	ite	hi
 8000460:	2301      	movhi	r3, #1
 8000462:	2300      	movls	r3, #0
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4313      	orrs	r3, r2
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b00      	cmp	r3, #0
 800046c:	d003      	beq.n	8000476 <Config_PRX_adress+0x3a>
		nRF24_SetAddrWidth(5);
 800046e:	2005      	movs	r0, #5
 8000470:	f001 fa70 	bl	8001954 <nRF24_SetAddrWidth>
 8000474:	e003      	b.n	800047e <Config_PRX_adress+0x42>
	} else {
		nRF24_SetAddrWidth(Address_width);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fa6b 	bl	8001954 <nRF24_SetAddrWidth>
	}

	//ouverture des 6 data pipes (bits du registre EN_RXADDR)
	nRF24_SetRXPipe(nRF24_PIPE0,autoAck_on,payload_length);
 800047e:	4b28      	ldr	r3, [pc, #160]	@ (8000520 <Config_PRX_adress+0xe4>)
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	4619      	mov	r1, r3
 8000486:	2000      	movs	r0, #0
 8000488:	f001 faf6 	bl	8001a78 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE1,autoAck_on,payload_length);
 800048c:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <Config_PRX_adress+0xe4>)
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	4619      	mov	r1, r3
 8000494:	2001      	movs	r0, #1
 8000496:	f001 faef 	bl	8001a78 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE2,autoAck_on,payload_length);
 800049a:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <Config_PRX_adress+0xe4>)
 800049c:	781a      	ldrb	r2, [r3, #0]
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2002      	movs	r0, #2
 80004a4:	f001 fae8 	bl	8001a78 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE3,autoAck_on,payload_length);
 80004a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000520 <Config_PRX_adress+0xe4>)
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	4619      	mov	r1, r3
 80004b0:	2003      	movs	r0, #3
 80004b2:	f001 fae1 	bl	8001a78 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE4,autoAck_on,payload_length);
 80004b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <Config_PRX_adress+0xe4>)
 80004b8:	781a      	ldrb	r2, [r3, #0]
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	4619      	mov	r1, r3
 80004be:	2004      	movs	r0, #4
 80004c0:	f001 fada 	bl	8001a78 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE5,autoAck_on,payload_length);
 80004c4:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <Config_PRX_adress+0xe4>)
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	4619      	mov	r1, r3
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 fad3 	bl	8001a78 <nRF24_SetRXPipe>

	//configuration des adresses des 6 data pipes :
	if (Addr_Default == Custom_pipe_address) {
 80004d2:	797b      	ldrb	r3, [r7, #5]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d117      	bne.n	8000508 <Config_PRX_adress+0xcc>
		nRF24_SetAddr(nRF24_PIPE0, addresses_RX[0]);
 80004d8:	4912      	ldr	r1, [pc, #72]	@ (8000524 <Config_PRX_adress+0xe8>)
 80004da:	2000      	movs	r0, #0
 80004dc:	f001 fa4a 	bl	8001974 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE1, addresses_RX[1]);
 80004e0:	4911      	ldr	r1, [pc, #68]	@ (8000528 <Config_PRX_adress+0xec>)
 80004e2:	2001      	movs	r0, #1
 80004e4:	f001 fa46 	bl	8001974 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE2, addresses_RX[2]);
 80004e8:	4910      	ldr	r1, [pc, #64]	@ (800052c <Config_PRX_adress+0xf0>)
 80004ea:	2002      	movs	r0, #2
 80004ec:	f001 fa42 	bl	8001974 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE3, addresses_RX[3]);
 80004f0:	490f      	ldr	r1, [pc, #60]	@ (8000530 <Config_PRX_adress+0xf4>)
 80004f2:	2003      	movs	r0, #3
 80004f4:	f001 fa3e 	bl	8001974 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE4, addresses_RX[4]);
 80004f8:	490e      	ldr	r1, [pc, #56]	@ (8000534 <Config_PRX_adress+0xf8>)
 80004fa:	2004      	movs	r0, #4
 80004fc:	f001 fa3a 	bl	8001974 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE5, addresses_RX[5]);
 8000500:	490d      	ldr	r1, [pc, #52]	@ (8000538 <Config_PRX_adress+0xfc>)
 8000502:	2005      	movs	r0, #5
 8000504:	f001 fa36 	bl	8001974 <nRF24_SetAddr>
	//else : on ne fait rien. Après l'extinction de l'alim du nRF24L01, les adresses
	//de chaque pipe reprendront leurs valeurs par défaut.


	//vérification de l'écriture des adresses de réception
	ReadMBReg(0x0A, verif_RX0_Adr, 5);
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	2205      	movs	r2, #5
 800050e:	4619      	mov	r1, r3
 8000510:	200a      	movs	r0, #10
 8000512:	f001 f908 	bl	8001726 <ReadMBReg>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000
 8000524:	20000028 	.word	0x20000028
 8000528:	2000002e 	.word	0x2000002e
 800052c:	20000034 	.word	0x20000034
 8000530:	2000003a 	.word	0x2000003a
 8000534:	20000040 	.word	0x20000040
 8000538:	20000046 	.word	0x20000046

0800053c <Config_PTX_adress>:

//configure l'adresse du data pipe utilisé par le PTX. On indique le numéro du data pipe num_data_pipe.
//num_data_pipe est compris entre 0 et 5. Addr_Default = Default_pipe_address ou Custom_pipe_address.
void Config_PTX_adress(uint8_t Address_width, uint8_t Addr_Default, uint8_t num_data_pipe, uint8_t autoAck_on) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b089      	sub	sp, #36	@ 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	4604      	mov	r4, r0
 8000544:	4608      	mov	r0, r1
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4623      	mov	r3, r4
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4603      	mov	r3, r0
 8000550:	71bb      	strb	r3, [r7, #6]
 8000552:	460b      	mov	r3, r1
 8000554:	717b      	strb	r3, [r7, #5]
 8000556:	4613      	mov	r3, r2
 8000558:	713b      	strb	r3, [r7, #4]
	uint8_t reg;
	uint8_t verif_TX_Adr[5];
	uint8_t verif_RX0_Adr[5];
	uint8_t pipeAddrVar[5];

	if ((Address_width < 3) | (Address_width > 5)) { //par défaut, adresse sur 5 octets
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b02      	cmp	r3, #2
 800055e:	bf94      	ite	ls
 8000560:	2301      	movls	r3, #1
 8000562:	2300      	movhi	r3, #0
 8000564:	b2da      	uxtb	r2, r3
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b05      	cmp	r3, #5
 800056a:	bf8c      	ite	hi
 800056c:	2301      	movhi	r3, #1
 800056e:	2300      	movls	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d003      	beq.n	8000582 <Config_PTX_adress+0x46>
			nRF24_SetAddrWidth(5);
 800057a:	2005      	movs	r0, #5
 800057c:	f001 f9ea 	bl	8001954 <nRF24_SetAddrWidth>
 8000580:	e003      	b.n	800058a <Config_PTX_adress+0x4e>
	} else {
			nRF24_SetAddrWidth(Address_width);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f001 f9e5 	bl	8001954 <nRF24_SetAddrWidth>
	}

	//On rend identique l'adresse TX et l'adresse RX_P0, lorsque l'auto-acknowledgment est activé.
	//Par défaut, les adresses sont sur 5 octets, AA activés et data pipe 0 et 1 activés par défaut.
	nRF24_SetRXPipe(nRF24_PIPE0,autoAck_on,payload_length);
 800058a:	4b83      	ldr	r3, [pc, #524]	@ (8000798 <Config_PTX_adress+0x25c>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	793b      	ldrb	r3, [r7, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	2000      	movs	r0, #0
 8000594:	f001 fa70 	bl	8001a78 <nRF24_SetRXPipe>
	//on vérifie la largeur du champ d'adresse
	reg = ReadReg(0x03);
 8000598:	2003      	movs	r0, #3
 800059a:	f001 f8b6 	bl	800170a <ReadReg>
 800059e:	4603      	mov	r3, r0
 80005a0:	77fb      	strb	r3, [r7, #31]

	if (autoAck_on == nRF24_AA_ON) {  //l'adresse TX = l'adresse RX_P0.
 80005a2:	793b      	ldrb	r3, [r7, #4]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	f040 8089 	bne.w	80006bc <Config_PTX_adress+0x180>

		if (Addr_Default == Default_pipe_address) {
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d160      	bne.n	8000672 <Config_PTX_adress+0x136>
			switch (num_data_pipe) {
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	d850      	bhi.n	8000658 <Config_PTX_adress+0x11c>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <Config_PTX_adress+0x80>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005d5 	.word	0x080005d5
 80005c0:	080005eb 	.word	0x080005eb
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000617 	.word	0x08000617
 80005cc:	0800062d 	.word	0x0800062d
 80005d0:	08000643 	.word	0x08000643
				case 0 : pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; break; //adr défaut RX_ADDR_P0
 80005d4:	23e7      	movs	r3, #231	@ 0xe7
 80005d6:	733b      	strb	r3, [r7, #12]
 80005d8:	23e7      	movs	r3, #231	@ 0xe7
 80005da:	72fb      	strb	r3, [r7, #11]
 80005dc:	23e7      	movs	r3, #231	@ 0xe7
 80005de:	72bb      	strb	r3, [r7, #10]
 80005e0:	23e7      	movs	r3, #231	@ 0xe7
 80005e2:	727b      	strb	r3, [r7, #9]
 80005e4:	23e7      	movs	r3, #231	@ 0xe7
 80005e6:	723b      	strb	r3, [r7, #8]
 80005e8:	e036      	b.n	8000658 <Config_PTX_adress+0x11c>
				case 1 : pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P1
 80005ea:	23c2      	movs	r3, #194	@ 0xc2
 80005ec:	733b      	strb	r3, [r7, #12]
 80005ee:	23c2      	movs	r3, #194	@ 0xc2
 80005f0:	72fb      	strb	r3, [r7, #11]
 80005f2:	23c2      	movs	r3, #194	@ 0xc2
 80005f4:	72bb      	strb	r3, [r7, #10]
 80005f6:	23c2      	movs	r3, #194	@ 0xc2
 80005f8:	727b      	strb	r3, [r7, #9]
 80005fa:	23c2      	movs	r3, #194	@ 0xc2
 80005fc:	723b      	strb	r3, [r7, #8]
 80005fe:	e02b      	b.n	8000658 <Config_PTX_adress+0x11c>
				case 2 : pipeAddrVar[4]=0xC3; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P2
 8000600:	23c3      	movs	r3, #195	@ 0xc3
 8000602:	733b      	strb	r3, [r7, #12]
 8000604:	23c2      	movs	r3, #194	@ 0xc2
 8000606:	72fb      	strb	r3, [r7, #11]
 8000608:	23c2      	movs	r3, #194	@ 0xc2
 800060a:	72bb      	strb	r3, [r7, #10]
 800060c:	23c2      	movs	r3, #194	@ 0xc2
 800060e:	727b      	strb	r3, [r7, #9]
 8000610:	23c2      	movs	r3, #194	@ 0xc2
 8000612:	723b      	strb	r3, [r7, #8]
 8000614:	e020      	b.n	8000658 <Config_PTX_adress+0x11c>
				case 3 : pipeAddrVar[4]=0xC4; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P3
 8000616:	23c4      	movs	r3, #196	@ 0xc4
 8000618:	733b      	strb	r3, [r7, #12]
 800061a:	23c2      	movs	r3, #194	@ 0xc2
 800061c:	72fb      	strb	r3, [r7, #11]
 800061e:	23c2      	movs	r3, #194	@ 0xc2
 8000620:	72bb      	strb	r3, [r7, #10]
 8000622:	23c2      	movs	r3, #194	@ 0xc2
 8000624:	727b      	strb	r3, [r7, #9]
 8000626:	23c2      	movs	r3, #194	@ 0xc2
 8000628:	723b      	strb	r3, [r7, #8]
 800062a:	e015      	b.n	8000658 <Config_PTX_adress+0x11c>
				case 4 : pipeAddrVar[4]=0xC5; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P4
 800062c:	23c5      	movs	r3, #197	@ 0xc5
 800062e:	733b      	strb	r3, [r7, #12]
 8000630:	23c2      	movs	r3, #194	@ 0xc2
 8000632:	72fb      	strb	r3, [r7, #11]
 8000634:	23c2      	movs	r3, #194	@ 0xc2
 8000636:	72bb      	strb	r3, [r7, #10]
 8000638:	23c2      	movs	r3, #194	@ 0xc2
 800063a:	727b      	strb	r3, [r7, #9]
 800063c:	23c2      	movs	r3, #194	@ 0xc2
 800063e:	723b      	strb	r3, [r7, #8]
 8000640:	e00a      	b.n	8000658 <Config_PTX_adress+0x11c>
				case 5 : pipeAddrVar[4]=0xC6; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P5
 8000642:	23c6      	movs	r3, #198	@ 0xc6
 8000644:	733b      	strb	r3, [r7, #12]
 8000646:	23c2      	movs	r3, #194	@ 0xc2
 8000648:	72fb      	strb	r3, [r7, #11]
 800064a:	23c2      	movs	r3, #194	@ 0xc2
 800064c:	72bb      	strb	r3, [r7, #10]
 800064e:	23c2      	movs	r3, #194	@ 0xc2
 8000650:	727b      	strb	r3, [r7, #9]
 8000652:	23c2      	movs	r3, #194	@ 0xc2
 8000654:	723b      	strb	r3, [r7, #8]
 8000656:	bf00      	nop
			}
			nRF24_SetAddr(nRF24_PIPE0,pipeAddrVar);
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	4619      	mov	r1, r3
 800065e:	2000      	movs	r0, #0
 8000660:	f001 f988 	bl	8001974 <nRF24_SetAddr>
			nRF24_SetAddr(nRF24_PIPETX,pipeAddrVar);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	4619      	mov	r1, r3
 800066a:	2006      	movs	r0, #6
 800066c:	f001 f982 	bl	8001974 <nRF24_SetAddr>
 8000670:	e015      	b.n	800069e <Config_PTX_adress+0x162>
		}
		//sinon, on fixe les adresses TX et RX0 à partir du contenu du tableau addresses.
		else {
			nRF24_SetAddr(nRF24_PIPE0,addresses_TX[num_data_pipe]);
 8000672:	797a      	ldrb	r2, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4a47      	ldr	r2, [pc, #284]	@ (800079c <Config_PTX_adress+0x260>)
 800067e:	4413      	add	r3, r2
 8000680:	4619      	mov	r1, r3
 8000682:	2000      	movs	r0, #0
 8000684:	f001 f976 	bl	8001974 <nRF24_SetAddr>
			nRF24_SetAddr(nRF24_PIPETX,addresses_TX[num_data_pipe]);
 8000688:	797a      	ldrb	r2, [r7, #5]
 800068a:	4613      	mov	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4a42      	ldr	r2, [pc, #264]	@ (800079c <Config_PTX_adress+0x260>)
 8000694:	4413      	add	r3, r2
 8000696:	4619      	mov	r1, r3
 8000698:	2006      	movs	r0, #6
 800069a:	f001 f96b 	bl	8001974 <nRF24_SetAddr>
		}

		//vérification des adresses :
		ReadMBReg(0x0A, verif_RX0_Adr, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	200a      	movs	r0, #10
 80006a8:	f001 f83d 	bl	8001726 <ReadMBReg>
		ReadMBReg(0x10, verif_TX_Adr, 5);
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	2205      	movs	r2, #5
 80006b2:	4619      	mov	r1, r3
 80006b4:	2010      	movs	r0, #16
 80006b6:	f001 f836 	bl	8001726 <ReadMBReg>
		}
		else {
			nRF24_SetAddr(nRF24_PIPETX, addresses_TX[num_data_pipe]);
		}
	}
}
 80006ba:	e069      	b.n	8000790 <Config_PTX_adress+0x254>
		if (Addr_Default == Default_pipe_address) {
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d15b      	bne.n	800077a <Config_PTX_adress+0x23e>
			switch (num_data_pipe) {
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	d851      	bhi.n	800076c <Config_PTX_adress+0x230>
 80006c8:	a201      	add	r2, pc, #4	@ (adr r2, 80006d0 <Config_PTX_adress+0x194>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	080006e9 	.word	0x080006e9
 80006d4:	080006ff 	.word	0x080006ff
 80006d8:	08000715 	.word	0x08000715
 80006dc:	0800072b 	.word	0x0800072b
 80006e0:	08000741 	.word	0x08000741
 80006e4:	08000757 	.word	0x08000757
				case 0 : pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; break; //adr défaut RX_ADDR_P0
 80006e8:	23e7      	movs	r3, #231	@ 0xe7
 80006ea:	733b      	strb	r3, [r7, #12]
 80006ec:	23e7      	movs	r3, #231	@ 0xe7
 80006ee:	72fb      	strb	r3, [r7, #11]
 80006f0:	23e7      	movs	r3, #231	@ 0xe7
 80006f2:	72bb      	strb	r3, [r7, #10]
 80006f4:	23e7      	movs	r3, #231	@ 0xe7
 80006f6:	727b      	strb	r3, [r7, #9]
 80006f8:	23e7      	movs	r3, #231	@ 0xe7
 80006fa:	723b      	strb	r3, [r7, #8]
 80006fc:	e036      	b.n	800076c <Config_PTX_adress+0x230>
				case 1 : pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break; //adr défaut RX_ADDR_P1
 80006fe:	23c2      	movs	r3, #194	@ 0xc2
 8000700:	733b      	strb	r3, [r7, #12]
 8000702:	23c2      	movs	r3, #194	@ 0xc2
 8000704:	72fb      	strb	r3, [r7, #11]
 8000706:	23c2      	movs	r3, #194	@ 0xc2
 8000708:	72bb      	strb	r3, [r7, #10]
 800070a:	23c2      	movs	r3, #194	@ 0xc2
 800070c:	727b      	strb	r3, [r7, #9]
 800070e:	23c2      	movs	r3, #194	@ 0xc2
 8000710:	723b      	strb	r3, [r7, #8]
 8000712:	e02b      	b.n	800076c <Config_PTX_adress+0x230>
				case 2 : pipeAddrVar[4]=0xC3; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break; //adr défaut RX_ADDR_P2
 8000714:	23c3      	movs	r3, #195	@ 0xc3
 8000716:	733b      	strb	r3, [r7, #12]
 8000718:	23c2      	movs	r3, #194	@ 0xc2
 800071a:	72fb      	strb	r3, [r7, #11]
 800071c:	23c2      	movs	r3, #194	@ 0xc2
 800071e:	72bb      	strb	r3, [r7, #10]
 8000720:	23c2      	movs	r3, #194	@ 0xc2
 8000722:	727b      	strb	r3, [r7, #9]
 8000724:	23c2      	movs	r3, #194	@ 0xc2
 8000726:	723b      	strb	r3, [r7, #8]
 8000728:	e020      	b.n	800076c <Config_PTX_adress+0x230>
				case 3 : pipeAddrVar[4]=0xC4; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break; //adr défaut RX_ADDR_P3
 800072a:	23c4      	movs	r3, #196	@ 0xc4
 800072c:	733b      	strb	r3, [r7, #12]
 800072e:	23c2      	movs	r3, #194	@ 0xc2
 8000730:	72fb      	strb	r3, [r7, #11]
 8000732:	23c2      	movs	r3, #194	@ 0xc2
 8000734:	72bb      	strb	r3, [r7, #10]
 8000736:	23c2      	movs	r3, #194	@ 0xc2
 8000738:	727b      	strb	r3, [r7, #9]
 800073a:	23c2      	movs	r3, #194	@ 0xc2
 800073c:	723b      	strb	r3, [r7, #8]
 800073e:	e015      	b.n	800076c <Config_PTX_adress+0x230>
				case 4 : pipeAddrVar[4]=0xC5; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break; //adr défaut RX_ADDR_P4
 8000740:	23c5      	movs	r3, #197	@ 0xc5
 8000742:	733b      	strb	r3, [r7, #12]
 8000744:	23c2      	movs	r3, #194	@ 0xc2
 8000746:	72fb      	strb	r3, [r7, #11]
 8000748:	23c2      	movs	r3, #194	@ 0xc2
 800074a:	72bb      	strb	r3, [r7, #10]
 800074c:	23c2      	movs	r3, #194	@ 0xc2
 800074e:	727b      	strb	r3, [r7, #9]
 8000750:	23c2      	movs	r3, #194	@ 0xc2
 8000752:	723b      	strb	r3, [r7, #8]
 8000754:	e00a      	b.n	800076c <Config_PTX_adress+0x230>
				case 5 : pipeAddrVar[4]=0xC6; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break; //adr défaut RX_ADDR_P5
 8000756:	23c6      	movs	r3, #198	@ 0xc6
 8000758:	733b      	strb	r3, [r7, #12]
 800075a:	23c2      	movs	r3, #194	@ 0xc2
 800075c:	72fb      	strb	r3, [r7, #11]
 800075e:	23c2      	movs	r3, #194	@ 0xc2
 8000760:	72bb      	strb	r3, [r7, #10]
 8000762:	23c2      	movs	r3, #194	@ 0xc2
 8000764:	727b      	strb	r3, [r7, #9]
 8000766:	23c2      	movs	r3, #194	@ 0xc2
 8000768:	723b      	strb	r3, [r7, #8]
 800076a:	bf00      	nop
			nRF24_SetAddr(nRF24_PIPETX,pipeAddrVar);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4619      	mov	r1, r3
 8000772:	2006      	movs	r0, #6
 8000774:	f001 f8fe 	bl	8001974 <nRF24_SetAddr>
}
 8000778:	e00a      	b.n	8000790 <Config_PTX_adress+0x254>
			nRF24_SetAddr(nRF24_PIPETX, addresses_TX[num_data_pipe]);
 800077a:	797a      	ldrb	r2, [r7, #5]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4a05      	ldr	r2, [pc, #20]	@ (800079c <Config_PTX_adress+0x260>)
 8000786:	4413      	add	r3, r2
 8000788:	4619      	mov	r1, r3
 800078a:	2006      	movs	r0, #6
 800078c:	f001 f8f2 	bl	8001974 <nRF24_SetAddr>
}
 8000790:	bf00      	nop
 8000792:	3724      	adds	r7, #36	@ 0x24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000004 	.word	0x20000004

080007a0 <Config_ESB_Protocol>:

//Active le protocole Enhanced ShockBurst, notamment l'auto acknowledgment et l'auto retransmit.
//On spécifie, pour le PTX uniquement, le nb de retransmission (ARC --> count_retries, de 0 à 15) et le
//délai entre retransmission (ARD --> delay_retries, de 0 à 15)
void Config_ESB_Protocol(uint8_t delay_retries, uint8_t count_retries) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;

	//autorisation de l'auto acknowledgement pour tous les data pipes
	nRF24_EnableAA(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 f9b5 	bl	8001b20 <nRF24_EnableAA>
	nRF24_EnableAA(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f001 f9b2 	bl	8001b20 <nRF24_EnableAA>
	nRF24_EnableAA(2);
 80007bc:	2002      	movs	r0, #2
 80007be:	f001 f9af 	bl	8001b20 <nRF24_EnableAA>
	nRF24_EnableAA(3);
 80007c2:	2003      	movs	r0, #3
 80007c4:	f001 f9ac 	bl	8001b20 <nRF24_EnableAA>
	nRF24_EnableAA(4);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f001 f9a9 	bl	8001b20 <nRF24_EnableAA>
	nRF24_EnableAA(5);
 80007ce:	2005      	movs	r0, #5
 80007d0:	f001 f9a6 	bl	8001b20 <nRF24_EnableAA>

	//réglage paramètres de retransmission
	nRF24_SetAutoRetr(delay_retries,count_retries);
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f89f 	bl	800191e <nRF24_SetAutoRetr>

	//verification des registres
	//reg = ReadReg(0x01); //registre EN_AA
	//reg = ReadReg(0x04); //registre SETUP_RETR
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <StartListen>:

//la fonction active la fonction RX (mise à 1 de la broche CE).
//Le transceiver doit être au préalable sorti du mode power down (donc en mode StandBy I) et
//et le mode RX doit avoir été sélectionné (PRIM_RX = 1).
void StartListen() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	nRF24_CE_H();
 80007ec:	f7ff fd66 	bl	80002bc <nRF24_CE_H>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <StopListen>:

//la fonction active la fonction TX (mise à 0 de la broche CE).
//Le transceiver doit être au préalable sorti du mode power down (donc en mode StandBy I) et
//et le mode TX doit avoir été sélectionné (PRIM_RX = 0).
void StopListen() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	nRF24_CE_L();
 80007f8:	f7ff fd56 	bl	80002a8 <nRF24_CE_L>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Continuous_RX_Listen>:

//attention : fonction bloquante ! La fonction permet une écoute permanente et l'affichage des messages
//reçues sur le canal RF via l'UART. Ici, la fonction n'utilise pas d'interruption, mais un polling
//du statut du RX_FIFO. Le délai wait_time_ms est ajouté entre chaque interrogation de l'état du
//RX_FIFO
void Continuous_RX_Listen(int wait_time_ms) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	while (1) {
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000808:	f001 f9af 	bl	8001b6a <nRF24_GetStatus_RXFIFO>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d026      	beq.n	8000860 <Continuous_RX_Listen+0x60>
			// Get a payload from the transceiver
			pipe_message_recu = nRF24_ReadPayload(nRF24_payload_recu, &payload_length);
 8000812:	4917      	ldr	r1, [pc, #92]	@ (8000870 <Continuous_RX_Listen+0x70>)
 8000814:	4817      	ldr	r0, [pc, #92]	@ (8000874 <Continuous_RX_Listen+0x74>)
 8000816:	f001 fa45 	bl	8001ca4 <nRF24_ReadPayload>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <Continuous_RX_Listen+0x78>)
 8000820:	701a      	strb	r2, [r3, #0]

			// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 8000822:	f001 f9bd 	bl	8001ba0 <nRF24_ClearIRQFlags>

			// Print a payload contents to UART
			UART_SendStr("Message reçu sur le data pipe #");
 8000826:	4815      	ldr	r0, [pc, #84]	@ (800087c <Continuous_RX_Listen+0x7c>)
 8000828:	f001 fca4 	bl	8002174 <UART_SendStr>
			UART_SendInt(pipe_message_recu);
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <Continuous_RX_Listen+0x78>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fcff 	bl	8002234 <UART_SendInt>
			UART_SendStr(" de ");
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <Continuous_RX_Listen+0x80>)
 8000838:	f001 fc9c 	bl	8002174 <UART_SendStr>
			UART_SendInt(payload_length);
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <Continuous_RX_Listen+0x70>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fcf7 	bl	8002234 <UART_SendInt>
			UART_SendStr(" octets:>");
 8000846:	480f      	ldr	r0, [pc, #60]	@ (8000884 <Continuous_RX_Listen+0x84>)
 8000848:	f001 fc94 	bl	8002174 <UART_SendStr>
			UART_SendBufHex((char *)nRF24_payload_recu, payload_length);
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <Continuous_RX_Listen+0x70>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <Continuous_RX_Listen+0x74>)
 8000854:	f001 fca4 	bl	80021a0 <UART_SendBufHex>
			UART_SendStr("<\r\n");
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <Continuous_RX_Listen+0x88>)
 800085a:	f001 fc8b 	bl	8002174 <UART_SendStr>
 800085e:	e7d3      	b.n	8000808 <Continuous_RX_Listen+0x8>
		}
		else {
			UART_SendStr("Wait for message \n");
 8000860:	480a      	ldr	r0, [pc, #40]	@ (800088c <Continuous_RX_Listen+0x8c>)
 8000862:	f001 fc87 	bl	8002174 <UART_SendStr>
			Delay_ms(900);
 8000866:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800086a:	f7ff fd31 	bl	80002d0 <Delay_ms>
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 800086e:	e7cb      	b.n	8000808 <Continuous_RX_Listen+0x8>
 8000870:	20000000 	.word	0x20000000
 8000874:	200000c0 	.word	0x200000c0
 8000878:	200000e0 	.word	0x200000e0
 800087c:	08003f54 	.word	0x08003f54
 8000880:	08003f78 	.word	0x08003f78
 8000884:	08003f80 	.word	0x08003f80
 8000888:	08003f8c 	.word	0x08003f8c
 800088c:	08003f90 	.word	0x08003f90

08000890 <Transmit_Message>:
	}
}

//La fonction transmet le message Message de longueur donnée par l'argument longueur.
//La fonction indique aussi sur l'UART si la transmission s'est faite.
void Transmit_Message(uint8_t *Message,uint8_t longueur) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]

	payload_length = longueur;
 800089c:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <Transmit_Message+0x84>)
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	7013      	strb	r3, [r2, #0]

	UART_SendStr("Message a transmettre:>");
 80008a2:	481d      	ldr	r0, [pc, #116]	@ (8000918 <Transmit_Message+0x88>)
 80008a4:	f001 fc66 	bl	8002174 <UART_SendStr>
	UART_SendBufHex((char *)Message,payload_length);
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <Transmit_Message+0x84>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f001 fc76 	bl	80021a0 <UART_SendBufHex>
	UART_SendStr("<: ");
 80008b4:	4819      	ldr	r0, [pc, #100]	@ (800091c <Transmit_Message+0x8c>)
 80008b6:	f001 fc5d 	bl	8002174 <UART_SendStr>

	// Transmit a packet
	tx_result = nRF24_TransmitPacket(Message, payload_length);
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <Transmit_Message+0x84>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff fd11 	bl	80002e8 <nRF24_TransmitPacket>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <Transmit_Message+0x90>)
 80008cc:	701a      	strb	r2, [r3, #0]
	switch (tx_result) {
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <Transmit_Message+0x90>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d00e      	beq.n	80008f4 <Transmit_Message+0x64>
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	dc10      	bgt.n	80008fc <Transmit_Message+0x6c>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d002      	beq.n	80008e4 <Transmit_Message+0x54>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d004      	beq.n	80008ec <Transmit_Message+0x5c>
 80008e2:	e00b      	b.n	80008fc <Transmit_Message+0x6c>
		case nRF24_TX_SUCCESS:
			UART_SendStr("OK");
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <Transmit_Message+0x94>)
 80008e6:	f001 fc45 	bl	8002174 <UART_SendStr>
			break;
 80008ea:	e00b      	b.n	8000904 <Transmit_Message+0x74>
		case nRF24_TX_TIMEOUT:
			UART_SendStr("TIMEOUT");
 80008ec:	480e      	ldr	r0, [pc, #56]	@ (8000928 <Transmit_Message+0x98>)
 80008ee:	f001 fc41 	bl	8002174 <UART_SendStr>
			break;
 80008f2:	e007      	b.n	8000904 <Transmit_Message+0x74>
		case nRF24_TX_MAXRT:
			UART_SendStr("MAX RETRANSMIT");
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <Transmit_Message+0x9c>)
 80008f6:	f001 fc3d 	bl	8002174 <UART_SendStr>
			break;
 80008fa:	e003      	b.n	8000904 <Transmit_Message+0x74>
		default:
			UART_SendStr("ERROR");
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <Transmit_Message+0xa0>)
 80008fe:	f001 fc39 	bl	8002174 <UART_SendStr>
			break;
 8000902:	bf00      	nop
	}
	UART_SendStr("\r\n");
 8000904:	480b      	ldr	r0, [pc, #44]	@ (8000934 <Transmit_Message+0xa4>)
 8000906:	f001 fc35 	bl	8002174 <UART_SendStr>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000000 	.word	0x20000000
 8000918:	08003fa4 	.word	0x08003fa4
 800091c:	08003fbc 	.word	0x08003fbc
 8000920:	200000e1 	.word	0x200000e1
 8000924:	08003fc0 	.word	0x08003fc0
 8000928:	08003fc4 	.word	0x08003fc4
 800092c:	08003fcc 	.word	0x08003fcc
 8000930:	08003fdc 	.word	0x08003fdc
 8000934:	08003fe4 	.word	0x08003fe4

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	@ (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	@ (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <LL_RCC_MSI_Enable+0x1c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <LL_RCC_MSI_Enable+0x1c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <LL_RCC_MSI_IsReady+0x20>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d101      	bne.n	80009c0 <LL_RCC_MSI_IsReady+0x14>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <LL_RCC_MSI_IsReady+0x16>
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <LL_RCC_SetSysClkSource+0x24>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f023 0203 	bic.w	r2, r3, #3
 80009e0:	4904      	ldr	r1, [pc, #16]	@ (80009f4 <LL_RCC_SetSysClkSource+0x24>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	608b      	str	r3, [r1, #8]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <LL_RCC_GetSysClkSource+0x18>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 030c 	and.w	r3, r3, #12
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a24:	4904      	ldr	r1, [pc, #16]	@ (8000a38 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	608b      	str	r3, [r1, #8]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000

08000a3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000a4c:	4904      	ldr	r1, [pc, #16]	@ (8000a60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000

08000a64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000a74:	4904      	ldr	r1, [pc, #16]	@ (8000a88 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000

08000a8c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <LL_RCC_PLL_Enable+0x1c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <LL_RCC_PLL_Enable+0x1c>)
 8000a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <LL_RCC_PLL_IsReady+0x24>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000abc:	d101      	bne.n	8000ac2 <LL_RCC_PLL_IsReady+0x16>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <LL_RCC_PLL_IsReady+0x18>
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	68f9      	ldr	r1, [r7, #12]
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	4311      	orrs	r1, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	0212      	lsls	r2, r2, #8
 8000af4:	4311      	orrs	r1, r2
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	4904      	ldr	r1, [pc, #16]	@ (8000b0c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000afc:	4313      	orrs	r3, r2
 8000afe:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	f9ff808c 	.word	0xf9ff808c

08000b14 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000b44:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	600b      	str	r3, [r1, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40007000 	.word	0x40007000

08000b5c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <LL_FLASH_SetLatency+0x24>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 0207 	bic.w	r2, r3, #7
 8000b6c:	4904      	ldr	r1, [pc, #16]	@ (8000b80 <LL_FLASH_SetLatency+0x24>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	600b      	str	r3, [r1, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40022000 	.word	0x40022000

08000b84 <SystemClock_Config_80M>:
  *            APB2 Prescaler                 = 1
  *            MSI Frequency(Hz)              = 4000000
  *            Flash Latency(WS)              = 4
  */
void SystemClock_Config_80M()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	/* MSI configuration and activation */
	LL_RCC_MSI_Enable();			// normalement il est deja enabled
 8000b88:	f7ff ff00 	bl	800098c <LL_RCC_MSI_Enable>
	while	(LL_RCC_MSI_IsReady() != 1)	// c'est pour le cas ou on l'aurait change
 8000b8c:	bf00      	nop
 8000b8e:	f7ff ff0d 	bl	80009ac <LL_RCC_MSI_IsReady>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d1fa      	bne.n	8000b8e <SystemClock_Config_80M+0xa>
		{ }

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);	// 4 pour 80MHz
 8000b98:	2004      	movs	r0, #4
 8000b9a:	f7ff ffdf 	bl	8000b5c <LL_FLASH_SetLatency>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1); //réglage tension régulateur interne
 8000b9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ba2:	f7ff ffc7 	bl	8000b34 <LL_PWR_SetRegulVoltageScaling>

	// demarrer la PLL principale 4MHz --> 80 MHz
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2228      	movs	r2, #40	@ 0x28
 8000baa:	2100      	movs	r1, #0
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff ff91 	bl	8000ad4 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000bb2:	f7ff ff6b 	bl	8000a8c <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8000bb6:	f7ff ffad 	bl	8000b14 <LL_RCC_PLL_EnableDomain_SYS>
	while	( LL_RCC_PLL_IsReady() != 1 )
 8000bba:	bf00      	nop
 8000bbc:	f7ff ff76 	bl	8000aac <LL_RCC_PLL_IsReady>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d1fa      	bne.n	8000bbc <SystemClock_Config_80M+0x38>
		{ }

	// connecter Sysclk sur cette PLL
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ff24 	bl	8000a14 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f7ff feff 	bl	80009d0 <LL_RCC_SetSysClkSource>
	while	( LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ff10 	bl	80009f8 <LL_RCC_GetSysClkSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b0c      	cmp	r3, #12
 8000bdc:	d1fa      	bne.n	8000bd4 <SystemClock_Config_80M+0x50>
		{ }

	/* Set APB1 & APB2 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ff2c 	bl	8000a3c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff ff3d 	bl	8000a64 <LL_RCC_SetAPB2Prescaler>

	//update global variable SystemCoreClock --> give access to CPU clock frequency.
	LL_SetSystemCoreClock(80000000);
 8000bea:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <SystemClock_Config_80M+0x70>)
 8000bec:	f002 fcb2 	bl	8003554 <LL_SetSystemCoreClock>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	04c4b400 	.word	0x04c4b400

08000bf8 <mySystick>:
}

// config systick avec interrupt. L'argument periode_en_ticks indique la période de débordement
//du Systick, donnée en nombre de périodes du buc clock.
void mySystick( unsigned int periode_en_ticks )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	// periode
	SysTick->LOAD  = periode_en_ticks - 1;
 8000c00:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <mySystick+0x3c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	6053      	str	r3, [r2, #4]

	// priorite
	NVIC_SetPriority( SysTick_IRQn, 7 );
 8000c08:	2107      	movs	r1, #7
 8000c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0e:	f7ff fe93 	bl	8000938 <__NVIC_SetPriority>
	// init counter
	SysTick->VAL = 0;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <mySystick+0x3c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	// prescale (0 ===> %8)
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <mySystick+0x3c>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	601a      	str	r2, [r3, #0]
	// enable timer, enable interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <mySystick+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <mySystick+0x3c>)
 8000c24:	f043 0303 	orr.w	r3, r3, #3
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <__NVIC_GetPriorityGrouping>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	@ (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	@ (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	@ 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	@ 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d58:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_GPIO_SetPinMode>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b08b      	sub	sp, #44	@ 0x2c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000da2:	2320      	movs	r3, #32
 8000da4:	e003      	b.n	8000dae <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2103      	movs	r1, #3
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	61fb      	str	r3, [r7, #28]
  return result;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	e003      	b.n	8000ddc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	fab3 f383 	clz	r3, r3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	431a      	orrs	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	372c      	adds	r7, #44	@ 0x2c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_GPIO_SetPinPull>:
{
 8000df6:	b480      	push	{r7}
 8000df8:	b08b      	sub	sp, #44	@ 0x2c
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	613b      	str	r3, [r7, #16]
  return result;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	e003      	b.n	8000e28 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fab3 f383 	clz	r3, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	61fb      	str	r3, [r7, #28]
  return result;
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	e003      	b.n	8000e56 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	60da      	str	r2, [r3, #12]
}
 8000e64:	bf00      	nop
 8000e66:	372c      	adds	r7, #44	@ 0x2c
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_GPIO_IsInputPinSet>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	4013      	ands	r3, r2
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d101      	bne.n	8000e8c <LL_GPIO_IsInputPinSet+0x1c>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <LL_GPIO_IsInputPinSet+0x1e>
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_GPIO_SetOutputPin>:
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	619a      	str	r2, [r3, #24]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_GPIO_ResetOutputPin>:
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <LL_SYSCFG_SetEXTISource>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000ede:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <LL_SYSCFG_SetEXTISource+0x68>)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	ea02 0103 	and.w	r1, r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	60fb      	str	r3, [r7, #12]
  return result;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	e003      	b.n	8000f18 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	fa03 f202 	lsl.w	r2, r3, r2
 8000f20:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <LL_SYSCFG_SetEXTISource+0x68>)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	430a      	orrs	r2, r1
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40010000 	.word	0x40010000

08000f40 <GPIO_init>:
//#include "options.h"
#include "gpio.h"


void GPIO_init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
	  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]

	  /* GPIO Ports Clock Enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f7ff fef2 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff feef 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f7ff feec 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, nRF_CSN_Pin|nRF_CE_Pin);
 8000f74:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7c:	f7ff ff9b 	bl	8000eb6 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 8000f80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f84:	483c      	ldr	r0, [pc, #240]	@ (8001078 <GPIO_init+0x138>)
 8000f86:	f7ff ff96 	bl	8000eb6 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(Clock_Monitor_GPIO_Port, Clock_Monitor_Pin);
 8000f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8e:	483b      	ldr	r0, [pc, #236]	@ (800107c <GPIO_init+0x13c>)
 8000f90:	f7ff ff91 	bl	8000eb6 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = User_Button_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f98:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4835      	ldr	r0, [pc, #212]	@ (800107c <GPIO_init+0x13c>)
 8000fa8:	f001 fd19 	bl	80029de <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = nRF_CSN_Pin|nRF_CE_Pin;
 8000fac:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000fb0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f001 fd08 	bl	80029de <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = User_LED_Pin;
 8000fce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4823      	ldr	r0, [pc, #140]	@ (8001078 <GPIO_init+0x138>)
 8000fea:	f001 fcf8 	bl	80029de <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = Clock_Monitor_Pin;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(Clock_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	481c      	ldr	r0, [pc, #112]	@ (800107c <GPIO_init+0x13c>)
 800100a:	f001 fce8 	bl	80029de <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 800100e:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ff5e 	bl	8000ed4 <LL_SYSCFG_SetEXTISource>

	  /**/
	  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
	  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
	  EXTI_InitStruct.LineCommand = ENABLE;
 8001020:	2301      	movs	r3, #1
 8001022:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800102c:	2302      	movs	r3, #2
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	  LL_EXTI_Init(&EXTI_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fa92 	bl	8002560 <LL_EXTI_Init>

	  /**/
	  LL_GPIO_SetPinPull(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_PULL_UP);
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	480d      	ldr	r0, [pc, #52]	@ (8001078 <GPIO_init+0x138>)
 8001042:	f7ff fed8 	bl	8000df6 <LL_GPIO_SetPinPull>

	  /**/
	  LL_GPIO_SetPinMode(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_MODE_INPUT);
 8001046:	2200      	movs	r2, #0
 8001048:	2101      	movs	r1, #1
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <GPIO_init+0x138>)
 800104c:	f7ff fe96 	bl	8000d7c <LL_GPIO_SetPinMode>

	  /* EXTI interrupt init*/
	  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001050:	f7ff fdf2 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8001054:	4603      	mov	r3, r0
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fe42 	bl	8000ce4 <NVIC_EncodePriority>
 8001060:	4603      	mov	r3, r0
 8001062:	4619      	mov	r1, r3
 8001064:	2006      	movs	r0, #6
 8001066:	f7ff fe13 	bl	8000c90 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(EXTI0_IRQn);
 800106a:	2006      	movs	r0, #6
 800106c:	f7ff fdf2 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	@ 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800

08001080 <LED_GREEN>:


void LED_GREEN( int val )
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if	( val )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <LED_GREEN+0x1a>
		LL_GPIO_SetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 800108e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <LED_GREEN+0x2c>)
 8001094:	f7ff ff01 	bl	8000e9a <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
}
 8001098:	e004      	b.n	80010a4 <LED_GREEN+0x24>
	else	LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 800109a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109e:	4803      	ldr	r0, [pc, #12]	@ (80010ac <LED_GREEN+0x2c>)
 80010a0:	f7ff ff09 	bl	8000eb6 <LL_GPIO_ResetOutputPin>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	48000400 	.word	0x48000400

080010b0 <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	return ( !LL_GPIO_IsInputPinSet(User_Button_GPIO_Port, User_Button_Pin) );
 80010b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <BLUE_BUTTON+0x20>)
 80010ba:	f7ff fed9 	bl	8000e70 <LL_GPIO_IsInputPinSet>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	48000800 	.word	0x48000800

080010d4 <__NVIC_SetPriorityGrouping>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001126:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001128:	4907      	ldr	r1, [pc, #28]	@ (8001148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001132:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000

0800114c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001156:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001162:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3350      	adds	r3, #80	@ 0x50
 8001190:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4413      	add	r3, r2
 800119a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3350      	adds	r3, #80	@ 0x50
 80011c0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <Delay_ms>:
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f002 f98d 	bl	8003504 <LL_mDelay>
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <main>:

uint8_t channel_nb = 60; //n° du canal radio utilisé (//channel 60 --> 2460 MHz)
uint8_t adr_data_pipe_used = 1; //numéro du data pipe utilisé pour la transmission (de 0 à 5)

int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af02      	add	r7, sp, #8

	/*clock domains activation*/
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff ffa6 	bl	800114c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001200:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001204:	f7ff ff8a 	bl	800111c <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f7ff ff63 	bl	80010d4 <__NVIC_SetPriorityGrouping>

	// config GPIO
	GPIO_init();
 800120e:	f7ff fe97 	bl	8000f40 <GPIO_init>
	//config clock
	SystemClock_Config_80M();
 8001212:	f7ff fcb7 	bl	8000b84 <SystemClock_Config_80M>
	//config bus SPI1 (pour la communication avec le transceiver nRF24L01)
	SPI1_Init();
 8001216:	f000 fda9 	bl	8001d6c <SPI1_Init>
	//config USART2
	USART2_Init();
 800121a:	f000 ff43 	bl	80020a4 <USART2_Init>

	// config systick avec interrupt
	mySystick( SystemCoreClock / 100 );	// 100 Hz --> 10 ms
 800121e:	4b58      	ldr	r3, [pc, #352]	@ (8001380 <main+0x18c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a58      	ldr	r2, [pc, #352]	@ (8001384 <main+0x190>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fce4 	bl	8000bf8 <mySystick>

	//Init to RTC
	//LL_RTC_Init(RTC, &RTC_InitStruct);
	LL_RTC_BAK_SetRegister(RTC, 3, expe);
 8001230:	4b55      	ldr	r3, [pc, #340]	@ (8001388 <main+0x194>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	2103      	movs	r1, #3
 8001238:	4854      	ldr	r0, [pc, #336]	@ (800138c <main+0x198>)
 800123a:	f7ff ff9f 	bl	800117c <LL_RTC_BAK_SetRegister>
	testing = LL_RTC_BAK_GetRegister(RTC, 3);
 800123e:	2103      	movs	r1, #3
 8001240:	4852      	ldr	r0, [pc, #328]	@ (800138c <main+0x198>)
 8001242:	f7ff ffb4 	bl	80011ae <LL_RTC_BAK_GetRegister>
 8001246:	4603      	mov	r3, r0
 8001248:	4a51      	ldr	r2, [pc, #324]	@ (8001390 <main+0x19c>)
 800124a:	6013      	str	r3, [r2, #0]
	expe = LL_RTC_BAK_GetRegister(RTC, 3);
 800124c:	2103      	movs	r1, #3
 800124e:	484f      	ldr	r0, [pc, #316]	@ (800138c <main+0x198>)
 8001250:	f7ff ffad 	bl	80011ae <LL_RTC_BAK_GetRegister>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <main+0x194>)
 800125a:	601a      	str	r2, [r3, #0]
	  // config systick avec interrupt
	  mySystick( SystemCoreClock / 100 );	// 100 Hz --> 10 ms
 800125c:	4b48      	ldr	r3, [pc, #288]	@ (8001380 <main+0x18c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <main+0x190>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fcc5 	bl	8000bf8 <mySystick>
	while (expe < 7)
 800126e:	e01e      	b.n	80012ae <main+0xba>
	{
		status = BLUE_BUTTON();
 8001270:	f7ff ff1e 	bl	80010b0 <BLUE_BUTTON>
 8001274:	4603      	mov	r3, r0
 8001276:	4a47      	ldr	r2, [pc, #284]	@ (8001394 <main+0x1a0>)
 8001278:	6013      	str	r3, [r2, #0]
		if ( 1 == status)
 800127a:	4b46      	ldr	r3, [pc, #280]	@ (8001394 <main+0x1a0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d115      	bne.n	80012ae <main+0xba>
		{
			LL_mDelay(100);
 8001282:	2064      	movs	r0, #100	@ 0x64
 8001284:	f002 f93e 	bl	8003504 <LL_mDelay>
			expe++;
 8001288:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <main+0x194>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a3e      	ldr	r2, [pc, #248]	@ (8001388 <main+0x194>)
 8001290:	6013      	str	r3, [r2, #0]
			LL_RTC_BAK_SetRegister(RTC, 3, expe);
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <main+0x194>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	2103      	movs	r1, #3
 800129a:	483c      	ldr	r0, [pc, #240]	@ (800138c <main+0x198>)
 800129c:	f7ff ff6e 	bl	800117c <LL_RTC_BAK_SetRegister>
			testing = LL_RTC_BAK_GetRegister(RTC, 3);
 80012a0:	2103      	movs	r1, #3
 80012a2:	483a      	ldr	r0, [pc, #232]	@ (800138c <main+0x198>)
 80012a4:	f7ff ff83 	bl	80011ae <LL_RTC_BAK_GetRegister>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a39      	ldr	r2, [pc, #228]	@ (8001390 <main+0x19c>)
 80012ac:	6013      	str	r3, [r2, #0]
	while (expe < 7)
 80012ae:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <main+0x194>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	dddc      	ble.n	8001270 <main+0x7c>
		}
	}

	//// PTX
	//configuration du transceiver en mode PTX
	Init_Transceiver();
 80012b6:	f7ff f867 	bl	8000388 <Init_Transceiver>
	Config_RF_channel(channel_nb,nRF24_DR_250kbps,nRF24_TXPWR_18dBm);
 80012ba:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <main+0x1a4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	2120      	movs	r1, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f884 	bl	80003d0 <Config_RF_channel>
	Config_CRC(CRC_Field_On, CRC_Field_1byte);
 80012c8:	2100      	movs	r1, #0
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff f899 	bl	8000402 <Config_CRC>
	//Adresse sur 5 bits. Transmission sur le data pipe adr_data_pipe_used.
	Config_PTX_adress(5,Default_pipe_address,adr_data_pipe_used,nRF24_AA_ON);
 80012d0:	4b32      	ldr	r3, [pc, #200]	@ (800139c <main+0x1a8>)
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	2100      	movs	r1, #0
 80012d8:	2005      	movs	r0, #5
 80012da:	f7ff f92f 	bl	800053c <Config_PTX_adress>
	Config_ESB_Protocol(nRF24_ARD_1000us,10);
 80012de:	210a      	movs	r1, #10
 80012e0:	2003      	movs	r0, #3
 80012e2:	f7ff fa5d 	bl	80007a0 <Config_ESB_Protocol>
	//on sort du mode power down
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f000 faaa 	bl	8001840 <nRF24_SetPowerMode>
	Delay_ms(2); //Attente 2 ms (1.5 ms pour la sortie du mode power down).
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff ff75 	bl	80011dc <Delay_ms>

	//Entrée en mode TX
	nRF24_SetOperationalMode(nRF24_MODE_TX);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 fac3 	bl	800187e <nRF24_SetOperationalMode>
	StopListen();
 80012f8:	f7ff fa7c 	bl	80007f4 <StopListen>

	//configuration interruption Systick (attention, il n'y a quue 23 bits dans le registre load ...
	//mySystick( SystemCoreClock * 2 );	// 0.5 Hz --> 2 s
	//on va partir sur une période de 100 ms
	mySystick( SystemCoreClock /10 ); //10 Hz --> 0.1 s
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <main+0x18c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a27      	ldr	r2, [pc, #156]	@ (80013a0 <main+0x1ac>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fc75 	bl	8000bf8 <mySystick>

	int expNumber = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int packetNumber = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28

	// 1 char = 1 octet, donc chaque message a une taille max de 32 char
	char messageToSend[33];  // 32 char + caractère de fin de chaîne

	// Création du message à envoyer			    |   NOMS DU BINOME   | EXPN | NBPAQUET |
	snprintf(messageToSend, sizeof(messageToSend), "O-LOPES_TETAZ_CHALHOUB_EXP%d_%d   ", expNumber, packetNumber);
 8001316:	1d38      	adds	r0, r7, #4
 8001318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131e:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <main+0x1b0>)
 8001320:	2121      	movs	r1, #33	@ 0x21
 8001322:	f002 f927 	bl	8003574 <sniprintf>

	// Appel de la fonction Transmit_Message (exemple d'appel)
	Transmit_Message((uint8_t *)messageToSend, 32);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2120      	movs	r1, #32
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fab0 	bl	8000890 <Transmit_Message>



		//// PRX
		//configuration du transceiver en mode PRX
		Init_Transceiver();
 8001330:	f7ff f82a 	bl	8000388 <Init_Transceiver>
		Config_RF_channel(channel_nb,nRF24_DR_250kbps,nRF24_TXPWR_12dBm);
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <main+0x1a4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2202      	movs	r2, #2
 800133a:	2120      	movs	r1, #32
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f847 	bl	80003d0 <Config_RF_channel>
		Config_CRC(CRC_Field_On, CRC_Field_1byte);
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff f85c 	bl	8000402 <Config_CRC>
		Config_PRX_adress(5,nRF24_AA_ON,Default_pipe_address); //Adresse sur 5 bits
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	2005      	movs	r0, #5
 8001350:	f7ff f874 	bl	800043c <Config_PRX_adress>
		Config_ESB_Protocol(nRF24_ARD_500us,10);
 8001354:	210a      	movs	r1, #10
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fa22 	bl	80007a0 <Config_ESB_Protocol>
		//on sort du mode power down
		nRF24_SetPowerMode(nRF24_PWR_UP);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 fa6f 	bl	8001840 <nRF24_SetPowerMode>
		Delay_ms(2); //Attente 2 ms (1.5 ms pour la sortie du mode power down).
 8001362:	2002      	movs	r0, #2
 8001364:	f7ff ff3a 	bl	80011dc <Delay_ms>

		//Entrée en mode RX
		nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001368:	2001      	movs	r0, #1
 800136a:	f000 fa88 	bl	800187e <nRF24_SetOperationalMode>
		StartListen();
 800136e:	f7ff fa3b 	bl	80007e8 <StartListen>

		//Ecoute continue
		Continuous_RX_Listen(500);
 8001372:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001376:	f7ff fa43 	bl	8000800 <Continuous_RX_Listen>

	while (1)
 800137a:	bf00      	nop
 800137c:	e7fd      	b.n	800137a <main+0x186>
 800137e:	bf00      	nop
 8001380:	20000050 	.word	0x20000050
 8001384:	51eb851f 	.word	0x51eb851f
 8001388:	200000f0 	.word	0x200000f0
 800138c:	40002800 	.word	0x40002800
 8001390:	200000f4 	.word	0x200000f4
 8001394:	200000f8 	.word	0x200000f8
 8001398:	2000004c 	.word	0x2000004c
 800139c:	2000004d 	.word	0x2000004d
 80013a0:	cccccccd 	.word	0xcccccccd
 80013a4:	08003fe8 	.word	0x08003fe8

080013a8 <SysTick_Handler>:
}

// systick interrupt handler --> allumage LED toutes les 2 s pendant 50 ms.
//Scrutation de l'état du bouton bleu  (pas d'action à ce stade).
void SysTick_Handler()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	unsigned int subticks;

	//scrutation bouton bleu
	ticks += 1;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <SysTick_Handler+0x70>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a18      	ldr	r2, [pc, #96]	@ (8001418 <SysTick_Handler+0x70>)
 80013b6:	6013      	str	r3, [r2, #0]
	if	( BLUE_BUTTON() )
 80013b8:	f7ff fe7a 	bl	80010b0 <BLUE_BUTTON>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <SysTick_Handler+0x30>
	{
		if	( old_blue == 0 )
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <SysTick_Handler+0x74>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <SysTick_Handler+0x28>
			blue_mode = 1;
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <SysTick_Handler+0x78>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
		old_blue = 1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <SysTick_Handler+0x74>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e002      	b.n	80013de <SysTick_Handler+0x36>
	}
	else 	old_blue = 0;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <SysTick_Handler+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

	//gestion de l'allumage de la LED
	subticks = ticks % 200;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <SysTick_Handler+0x70>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <SysTick_Handler+0x7c>)
 80013e4:	fba2 1203 	umull	r1, r2, r2, r3
 80013e8:	0992      	lsrs	r2, r2, #6
 80013ea:	21c8      	movs	r1, #200	@ 0xc8
 80013ec:	fb01 f202 	mul.w	r2, r1, r2
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	607b      	str	r3, [r7, #4]
	if	( subticks == 0 )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <SysTick_Handler+0x5a>
		LED_GREEN(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff fe40 	bl	8001080 <LED_GREEN>
	else if	( subticks == 5 )
		LED_GREEN(0);
}
 8001400:	e005      	b.n	800140e <SysTick_Handler+0x66>
	else if	( subticks == 5 )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d102      	bne.n	800140e <SysTick_Handler+0x66>
		LED_GREEN(0);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fe39 	bl	8001080 <LED_GREEN>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000e4 	.word	0x200000e4
 800141c:	200000ec 	.word	0x200000ec
 8001420:	200000e8 	.word	0x200000e8
 8001424:	51eb851f 	.word	0x51eb851f

08001428 <LL_GPIO_SetOutputPin>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	619a      	str	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_GPIO_ResetOutputPin>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <LL_SPI_IsActiveFlag_RXNE+0x18>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d101      	bne.n	80014e4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	2b80      	cmp	r3, #128	@ 0x80
 8001504:	d101      	bne.n	800150a <LL_SPI_IsActiveFlag_BSY+0x18>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_SPI_IsActiveFlag_BSY+0x1a>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	b2db      	uxtb	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	330c      	adds	r3, #12
 8001542:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin);
 800155a:	2110      	movs	r1, #16
 800155c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001560:	f7ff ff70 	bl	8001444 <LL_GPIO_ResetOutputPin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin);
 800156c:	2110      	movs	r1, #16
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f7ff ff59 	bl	8001428 <LL_GPIO_SetOutputPin>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
    LL_SPI_SetRxFIFOThreshold(NRF_SPI,LL_SPI_RX_FIFO_TH_QUARTER);
 8001586:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800158a:	4814      	ldr	r0, [pc, #80]	@ (80015dc <nRF24_LL_RW+0x60>)
 800158c:	f7ff ff78 	bl	8001480 <LL_SPI_SetRxFIFOThreshold>
    LL_SPI_Enable(NRF_SPI);
 8001590:	4812      	ldr	r0, [pc, #72]	@ (80015dc <nRF24_LL_RW+0x60>)
 8001592:	f7ff ff65 	bl	8001460 <LL_SPI_Enable>
    while (LL_SPI_IsActiveFlag_BSY(NRF_SPI));
 8001596:	bf00      	nop
 8001598:	4810      	ldr	r0, [pc, #64]	@ (80015dc <nRF24_LL_RW+0x60>)
 800159a:	f7ff ffaa 	bl	80014f2 <LL_SPI_IsActiveFlag_BSY>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f9      	bne.n	8001598 <nRF24_LL_RW+0x1c>
    while (!LL_SPI_IsActiveFlag_TXE(NRF_SPI));
 80015a4:	bf00      	nop
 80015a6:	480d      	ldr	r0, [pc, #52]	@ (80015dc <nRF24_LL_RW+0x60>)
 80015a8:	f7ff ff90 	bl	80014cc <LL_SPI_IsActiveFlag_TXE>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f9      	beq.n	80015a6 <nRF24_LL_RW+0x2a>
    LL_SPI_TransmitData8(NRF_SPI, data);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <nRF24_LL_RW+0x60>)
 80015b8:	f7ff ffbb 	bl	8001532 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(NRF_SPI));
 80015bc:	bf00      	nop
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <nRF24_LL_RW+0x60>)
 80015c0:	f7ff ff71 	bl	80014a6 <LL_SPI_IsActiveFlag_RXNE>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f9      	beq.n	80015be <nRF24_LL_RW+0x42>
    return LL_SPI_ReceiveData8(NRF_SPI);
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <nRF24_LL_RW+0x60>)
 80015cc:	f7ff ffa4 	bl	8001518 <LL_SPI_ReceiveData8>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40013000 	.word	0x40013000

080015e0 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80015ea:	f7ff ffb4 	bl	8001556 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffc0 	bl	800157c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80015fc:	20ff      	movs	r0, #255	@ 0xff
 80015fe:	f7ff ffbd 	bl	800157c <nRF24_LL_RW>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001606:	f7ff ffaf 	bl	8001568 <nRF24_CSN_H>

	return value;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	460a      	mov	r2, r1
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	4613      	mov	r3, r2
 8001622:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001624:	f7ff ff97 	bl	8001556 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b1f      	cmp	r3, #31
 800162c:	d810      	bhi.n	8001650 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	b25b      	sxtb	r3, r3
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	b25b      	sxtb	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff9b 	bl	800157c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff97 	bl	800157c <nRF24_LL_RW>
 800164e:	e013      	b.n	8001678 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff92 	bl	800157c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2be1      	cmp	r3, #225	@ 0xe1
 800165c:	d00c      	beq.n	8001678 <nRF24_WriteReg+0x64>
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2be2      	cmp	r3, #226	@ 0xe2
 8001662:	d009      	beq.n	8001678 <nRF24_WriteReg+0x64>
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2be3      	cmp	r3, #227	@ 0xe3
 8001668:	d006      	beq.n	8001678 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2bff      	cmp	r3, #255	@ 0xff
 800166e:	d003      	beq.n	8001678 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff82 	bl	800157c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001678:	f7ff ff76 	bl	8001568 <nRF24_CSN_H>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001694:	f7ff ff5f 	bl	8001556 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff6e 	bl	800157c <nRF24_LL_RW>
	while (count--) {
 80016a0:	e007      	b.n	80016b2 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80016a2:	683c      	ldr	r4, [r7, #0]
 80016a4:	1c63      	adds	r3, r4, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	20ff      	movs	r0, #255	@ 0xff
 80016aa:	f7ff ff67 	bl	800157c <nRF24_LL_RW>
 80016ae:	4603      	mov	r3, r0
 80016b0:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	71ba      	strb	r2, [r7, #6]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f2      	bne.n	80016a2 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80016bc:	f7ff ff54 	bl	8001568 <nRF24_CSN_H>
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80016d8:	f7ff ff3d 	bl	8001556 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff4c 	bl	800157c <nRF24_LL_RW>
	while (count--) {
 80016e4:	e006      	b.n	80016f4 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	603a      	str	r2, [r7, #0]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff44 	bl	800157c <nRF24_LL_RW>
	while (count--) {
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	71ba      	strb	r2, [r7, #6]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f3      	bne.n	80016e6 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80016fe:	f7ff ff33 	bl	8001568 <nRF24_CSN_H>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <ReadReg>:

uint8_t ReadReg(uint8_t reg) {
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
	return nRF24_ReadReg(reg);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff62 	bl	80015e0 <nRF24_ReadReg>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <ReadMBReg>:

void ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	6039      	str	r1, [r7, #0]
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	4613      	mov	r3, r2
 8001734:	71bb      	strb	r3, [r7, #6]
	nRF24_ReadMBReg(reg, pBuf, count);
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ffa1 	bl	8001684 <nRF24_ReadMBReg>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800174e:	2108      	movs	r1, #8
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ff5f 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8001756:	213f      	movs	r1, #63	@ 0x3f
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff ff5b 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800175e:	2103      	movs	r1, #3
 8001760:	2002      	movs	r0, #2
 8001762:	f7ff ff57 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8001766:	2103      	movs	r1, #3
 8001768:	2003      	movs	r0, #3
 800176a:	f7ff ff53 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800176e:	2103      	movs	r1, #3
 8001770:	2004      	movs	r0, #4
 8001772:	f7ff ff4f 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001776:	2102      	movs	r1, #2
 8001778:	2005      	movs	r0, #5
 800177a:	f7ff ff4b 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800177e:	210e      	movs	r1, #14
 8001780:	2006      	movs	r0, #6
 8001782:	f7ff ff47 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001786:	2100      	movs	r1, #0
 8001788:	2007      	movs	r0, #7
 800178a:	f7ff ff43 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800178e:	2100      	movs	r1, #0
 8001790:	2011      	movs	r0, #17
 8001792:	f7ff ff3f 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8001796:	2100      	movs	r1, #0
 8001798:	2012      	movs	r0, #18
 800179a:	f7ff ff3b 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800179e:	2100      	movs	r1, #0
 80017a0:	2013      	movs	r0, #19
 80017a2:	f7ff ff37 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80017a6:	2100      	movs	r1, #0
 80017a8:	2014      	movs	r0, #20
 80017aa:	f7ff ff33 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80017ae:	2100      	movs	r1, #0
 80017b0:	2015      	movs	r0, #21
 80017b2:	f7ff ff2f 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80017b6:	2100      	movs	r1, #0
 80017b8:	2016      	movs	r0, #22
 80017ba:	f7ff ff2b 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80017be:	2100      	movs	r1, #0
 80017c0:	201c      	movs	r0, #28
 80017c2:	f7ff ff27 	bl	8001614 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80017c6:	2100      	movs	r1, #0
 80017c8:	201d      	movs	r0, #29
 80017ca:	f7ff ff23 	bl	8001614 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80017ce:	f000 f9df 	bl	8001b90 <nRF24_FlushRX>
	nRF24_FlushTX();
 80017d2:	f000 f9d5 	bl	8001b80 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80017d6:	f000 f9e3 	bl	8001ba0 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80017da:	f7ff fec5 	bl	8001568 <nRF24_CSN_H>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <nRF24_Check+0x58>)
 80017ec:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80017ee:	2205      	movs	r2, #5
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	2030      	movs	r0, #48	@ 0x30
 80017f4:	f7ff ff68 	bl	80016c8 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80017f8:	463b      	mov	r3, r7
 80017fa:	2205      	movs	r2, #5
 80017fc:	4619      	mov	r1, r3
 80017fe:	2010      	movs	r0, #16
 8001800:	f7ff ff40 	bl	8001684 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e00f      	b.n	800182a <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3310      	adds	r3, #16
 800180e:	443b      	add	r3, r7
 8001810:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c59      	adds	r1, r3, #1
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <nRF24_Check+0x40>
 8001820:	2300      	movs	r3, #0
 8001822:	e006      	b.n	8001832 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d9ec      	bls.n	800180a <nRF24_Check+0x26>
	}

	return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0800400c 	.word	0x0800400c

08001840 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fec8 	bl	80015e0 <nRF24_ReadReg>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d104      	bne.n	8001864 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e003      	b.n	800186c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	f023 0302 	bic.w	r3, r3, #2
 800186a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	4619      	mov	r1, r3
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fecf 	bl	8001614 <nRF24_WriteReg>
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fea9 	bl	80015e0 <nRF24_ReadReg>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	b25a      	sxtb	r2, r3
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	4619      	mov	r1, r3
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff feae 	bl	8001614 <nRF24_WriteReg>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fe88 	bl	80015e0 <nRF24_ReadReg>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	f023 030c 	bic.w	r3, r3, #12
 80018da:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	b25a      	sxtb	r2, r3
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4619      	mov	r1, r3
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fe8d 	bl	8001614 <nRF24_WriteReg>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4619      	mov	r1, r3
 8001910:	2005      	movs	r0, #5
 8001912:	f7ff fe7f 	bl	8001614 <nRF24_WriteReg>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	460a      	mov	r2, r1
 8001928:	71fb      	strb	r3, [r7, #7]
 800192a:	4613      	mov	r3, r2
 800192c:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	b25a      	sxtb	r2, r3
 8001934:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	b25b      	sxtb	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	2004      	movs	r0, #4
 8001948:	f7ff fe64 	bl	8001614 <nRF24_WriteReg>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	3b02      	subs	r3, #2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4619      	mov	r1, r3
 8001966:	2003      	movs	r0, #3
 8001968:	f7ff fe54 	bl	8001614 <nRF24_WriteReg>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d00a      	beq.n	800199c <nRF24_SetAddr+0x28>
 8001986:	2b06      	cmp	r3, #6
 8001988:	dc36      	bgt.n	80019f8 <nRF24_SetAddr+0x84>
 800198a:	2b01      	cmp	r3, #1
 800198c:	dc02      	bgt.n	8001994 <nRF24_SetAddr+0x20>
 800198e:	2b00      	cmp	r3, #0
 8001990:	da04      	bge.n	800199c <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001992:	e031      	b.n	80019f8 <nRF24_SetAddr+0x84>
 8001994:	3b02      	subs	r3, #2
	switch (pipe) {
 8001996:	2b03      	cmp	r3, #3
 8001998:	d82e      	bhi.n	80019f8 <nRF24_SetAddr+0x84>
 800199a:	e023      	b.n	80019e4 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800199c:	2003      	movs	r0, #3
 800199e:	f7ff fe1f 	bl	80015e0 <nRF24_ReadReg>
 80019a2:	4603      	mov	r3, r0
 80019a4:	3301      	adds	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80019b0:	f7ff fdd1 	bl	8001556 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a13      	ldr	r2, [pc, #76]	@ (8001a04 <nRF24_SetAddr+0x90>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	f043 0320 	orr.w	r3, r3, #32
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fddb 	bl	800157c <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	603a      	str	r2, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fdd4 	bl	800157c <nRF24_LL_RW>
			} while (addr_width--);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	73fa      	strb	r2, [r7, #15]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f3      	bne.n	80019c6 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 80019de:	f7ff fdc3 	bl	8001568 <nRF24_CSN_H>
			break;
 80019e2:	e00a      	b.n	80019fa <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <nRF24_SetAddr+0x90>)
 80019e8:	5cd2      	ldrb	r2, [r2, r3]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7ff fe0f 	bl	8001614 <nRF24_WriteReg>
			break;
 80019f6:	e000      	b.n	80019fa <nRF24_SetAddr+0x86>
			break;
 80019f8:	bf00      	nop
	}
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08004030 	.word	0x08004030

08001a08 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001a16:	2006      	movs	r0, #6
 8001a18:	f7ff fde2 	bl	80015e0 <nRF24_ReadReg>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	f023 0306 	bic.w	r3, r3, #6
 8001a26:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	4619      	mov	r1, r3
 8001a34:	2006      	movs	r0, #6
 8001a36:	f7ff fded 	bl	8001614 <nRF24_WriteReg>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001a4c:	2006      	movs	r0, #6
 8001a4e:	f7ff fdc7 	bl	80015e0 <nRF24_ReadReg>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001a5c:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	2006      	movs	r0, #6
 8001a6c:	f7ff fdd2 	bl	8001614 <nRF24_WriteReg>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	460b      	mov	r3, r1
 8001a84:	71bb      	strb	r3, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7ff fda8 	bl	80015e0 <nRF24_ReadReg>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	4619      	mov	r1, r3
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f7ff fdb0 	bl	8001614 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4a19      	ldr	r2, [pc, #100]	@ (8001b1c <nRF24_SetRXPipe+0xa4>)
 8001ab8:	5cd2      	ldrb	r2, [r2, r3]
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7ff fda5 	bl	8001614 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fd88 	bl	80015e0 <nRF24_ReadReg>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10a      	bne.n	8001af0 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	b25a      	sxtb	r2, r3
 8001ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e00b      	b.n	8001b08 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2201      	movs	r2, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4013      	ands	r3, r2
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff fd81 	bl	8001614 <nRF24_WriteReg>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	08004028 	.word	0x08004028

08001b20 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fd58 	bl	80015e0 <nRF24_ReadReg>
 8001b30:	4603      	mov	r3, r0
 8001b32:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2201      	movs	r2, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fd61 	bl	8001614 <nRF24_WriteReg>
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001b5e:	2007      	movs	r0, #7
 8001b60:	f7ff fd3e 	bl	80015e0 <nRF24_ReadReg>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001b6e:	2017      	movs	r0, #23
 8001b70:	f7ff fd36 	bl	80015e0 <nRF24_ReadReg>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	b2db      	uxtb	r3, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001b84:	21ff      	movs	r1, #255	@ 0xff
 8001b86:	20e1      	movs	r0, #225	@ 0xe1
 8001b88:	f7ff fd44 	bl	8001614 <nRF24_WriteReg>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001b94:	21ff      	movs	r1, #255	@ 0xff
 8001b96:	20e2      	movs	r0, #226	@ 0xe2
 8001b98:	f7ff fd3c 	bl	8001614 <nRF24_WriteReg>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f7ff fd1a 	bl	80015e0 <nRF24_ReadReg>
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001bb6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	2007      	movs	r0, #7
 8001bbe:	f7ff fd29 	bl	8001614 <nRF24_WriteReg>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	20a0      	movs	r0, #160	@ 0xa0
 8001bde:	f7ff fd73 	bl	80016c8 <nRF24_WriteMBReg>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8001bf0:	f7ff fcb1 	bl	8001556 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8001bf4:	2060      	movs	r0, #96	@ 0x60
 8001bf6:	f7ff fcc1 	bl	800157c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001bfa:	20ff      	movs	r0, #255	@ 0xff
 8001bfc:	f7ff fcbe 	bl	800157c <nRF24_LL_RW>
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8001c04:	f7ff fcb0 	bl	8001568 <nRF24_CSN_H>

	return value;
 8001c08:	79fb      	ldrb	r3, [r7, #7]

}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8001c22:	2007      	movs	r0, #7
 8001c24:	f7ff fcdc 	bl	80015e0 <nRF24_ReadReg>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	105b      	asrs	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d829      	bhi.n	8001c8e <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00f      	beq.n	8001c60 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001c40:	f7ff ffd3 	bl	8001bea <nRF24_GetRxDplPayloadWidth>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b20      	cmp	r3, #32
 8001c52:	d90f      	bls.n	8001c74 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001c5a:	f7ff ff99 	bl	8001b90 <nRF24_FlushRX>
 8001c5e:	e009      	b.n	8001c74 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca0 <nRF24_ReadPayloadGeneric+0x8c>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fcba 	bl	80015e0 <nRF24_ReadReg>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	2061      	movs	r0, #97	@ 0x61
 8001c86:	f7ff fcfd 	bl	8001684 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	e003      	b.n	8001c96 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8001c94:	23ff      	movs	r3, #255	@ 0xff
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	08004028 	.word	0x08004028

08001ca4 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffae 	bl	8001c14 <nRF24_ReadPayloadGeneric>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cd0:	4907      	ldr	r1, [pc, #28]	@ (8001cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <LL_APB2_GRP1_EnableClock>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cfe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d00:	4907      	ldr	r1, [pc, #28]	@ (8001d20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000

08001d24 <LL_SPI_SetStandard>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f023 0210 	bic.w	r2, r3, #16
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	605a      	str	r2, [r3, #4]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_SPI_DisableNSSPulseMgt>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f023 0208 	bic.w	r2, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	605a      	str	r2, [r3, #4]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SPI1_Init>:
// > mode master, full duplex
// > 8 bits
// > pin NSS généré logiciellement
// > bit rate = 5 Mbps --> avec un bus clock à 80 MHz le prescaler est réglé à 16.
void SPI1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	@ 0x40
 8001d70:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2228      	movs	r2, #40	@ 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fc2e 	bl	80035dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001d90:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d94:	f7ff ffae 	bl	8001cf4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff ff93 	bl	8001cc4 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d9e:	23e0      	movs	r3, #224	@ 0xe0
 8001da0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001da2:	2302      	movs	r3, #2
 8001da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001db2:	2305      	movs	r3, #5
 8001db4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbe:	f000 fe0e 	bl	80029de <LL_GPIO_Init>

  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001dc6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001dca:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001dcc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dd0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001dda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001de0:	2318      	movs	r3, #24
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001dec:	2307      	movs	r3, #7
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001df0:	f107 0318 	add.w	r3, r7, #24
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	@ (8001e14 <SPI1_Init+0xa8>)
 8001df8:	f001 fa49 	bl	800328e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <SPI1_Init+0xa8>)
 8001e00:	f7ff ff90 	bl	8001d24 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <SPI1_Init+0xa8>)
 8001e06:	f7ff ffa0 	bl	8001d4a <LL_SPI_DisableNSSPulseMgt>
}
 8001e0a:	bf00      	nop
 8001e0c:	3740      	adds	r7, #64	@ 0x40
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40013000 	.word	0x40013000

08001e18 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d101      	bne.n	8001e32 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40010400 	.word	0x40010400

08001e44 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001e4c:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6153      	str	r3, [r2, #20]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	bf00      	nop
 8001e78:	e7fd      	b.n	8001e76 <HardFault_Handler+0x4>

08001e7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7e:	bf00      	nop
 8001e80:	e7fd      	b.n	8001e7e <MemManage_Handler+0x4>

08001e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <BusFault_Handler+0x4>

08001e8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff ffa9 	bl	8001e18 <LL_EXTI_IsActiveFlag_0_31>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7ff ffb9 	bl	8001e44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f001 fb70 	bl	80035ec <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20018000 	.word	0x20018000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	200000fc 	.word	0x200000fc
 8001f40:	20000248 	.word	0x20000248

08001f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <SystemInit+0x64>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4e:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <SystemInit+0x64>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f58:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <SystemInit+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <SystemInit+0x68>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <SystemInit+0x68>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <SystemInit+0x68>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <SystemInit+0x68>)
 8001f70:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001f74:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001f78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <SystemInit+0x68>)
 8001f7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <SystemInit+0x68>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <SystemInit+0x68>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <SystemInit+0x68>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <SystemInit+0x64>)
 8001f96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00
 8001fac:	40021000 	.word	0x40021000

08001fb0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	601a      	str	r2, [r3, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200c:	2b80      	cmp	r3, #128	@ 0x80
 800200e:	d101      	bne.n	8002014 <LL_USART_IsActiveFlag_TXE+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_USART_IsActiveFlag_TXE+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <LL_AHB2_GRP1_EnableClock>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800204e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800205a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000

08002074 <LL_APB1_GRP1_EnableClock>:
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800207e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002080:	4907      	ldr	r1, [pc, #28]	@ (80020a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800208a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000

080020a4 <USART2_Init>:
#include "stm32l4xx_ll_gpio.h"


//Initialisation de l'USART2.
void USART2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	@ 0x38
 80020a8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80020ce:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020d2:	f7ff ffcf 	bl	8002074 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ffb4 	bl	8002044 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80020dc:	230c      	movs	r3, #12
 80020de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020e0:	2302      	movs	r3, #2
 80020e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020f0:	2307      	movs	r3, #7
 80020f2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fc:	f000 fc6f 	bl	80029de <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8002100:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002104:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002112:	230c      	movs	r3, #12
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4806      	ldr	r0, [pc, #24]	@ (8002140 <USART2_Init+0x9c>)
 8002126:	f001 f971 	bl	800340c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <USART2_Init+0x9c>)
 800212c:	f7ff ff50 	bl	8001fd0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002130:	4803      	ldr	r0, [pc, #12]	@ (8002140 <USART2_Init+0x9c>)
 8002132:	f7ff ff3d 	bl	8001fb0 <LL_USART_Enable>
}
 8002136:	bf00      	nop
 8002138:	3738      	adds	r7, #56	@ 0x38
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40004400 	.word	0x40004400

08002144 <UART_SendChar>:

void UART_SendChar(char b) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]

	while(!LL_USART_IsActiveFlag_TXE(USART2)){};
 800214e:	bf00      	nop
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <UART_SendChar+0x2c>)
 8002152:	f7ff ff53 	bl	8001ffc <LL_USART_IsActiveFlag_TXE>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f9      	beq.n	8002150 <UART_SendChar+0xc>
	LL_USART_TransmitData8(USART2, (uint8_t) b);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	4619      	mov	r1, r3
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <UART_SendChar+0x2c>)
 8002162:	f7ff ff5e 	bl	8002022 <LL_USART_TransmitData8>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40004400 	.word	0x40004400

08002174 <UART_SendStr>:

void UART_SendStr(char *string) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	for(;(*string) != 0;string++)
 800217c:	e007      	b.n	800218e <UART_SendStr+0x1a>
	{
		UART_SendChar(* string);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffde 	bl	8002144 <UART_SendChar>
	for(;(*string) != 0;string++)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f3      	bne.n	800217e <UART_SendStr+0xa>
	}
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	81fb      	strh	r3, [r7, #14]
 80021b0:	e018      	b.n	80021e4 <UART_SendBufHex+0x44>
		ch = *buf++;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <UART_SendBufHex+0x58>)
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ffbb 	bl	8002144 <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 80021ce:	7b7b      	ldrb	r3, [r7, #13]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <UART_SendBufHex+0x58>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ffb3 	bl	8002144 <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	3301      	adds	r3, #1
 80021e2:	81fb      	strh	r3, [r7, #14]
 80021e4:	89fa      	ldrh	r2, [r7, #14]
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3e2      	bcc.n	80021b2 <UART_SendBufHex+0x12>
	}
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	08004014 	.word	0x08004014

080021fc <UART_SendHex8>:

void UART_SendHex8(uint8_t num) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <UART_SendHex8+0x34>)
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff96 	bl	8002144 <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <UART_SendHex8+0x34>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff8e 	bl	8002144 <UART_SendChar>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	08004014 	.word	0x08004014

08002234 <UART_SendInt>:

void UART_SendInt(uint32_t num) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
	if (num < 0) {
		UART_SendChar('-');
		num *= -1;
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <UART_SendInt+0x74>)
 8002244:	fba3 2301 	umull	r2, r3, r3, r1
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	1aca      	subs	r2, r1, r3
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1c59      	adds	r1, r3, #1
 800225a:	6179      	str	r1, [r7, #20]
 800225c:	3230      	adds	r2, #48	@ 0x30
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	3318      	adds	r3, #24
 8002262:	443b      	add	r3, r7
 8002264:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0f      	ldr	r2, [pc, #60]	@ (80022a8 <UART_SendInt+0x74>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e2      	bne.n	8002240 <UART_SendInt+0xc>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3b01      	subs	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e00a      	b.n	8002298 <UART_SendInt+0x64>
 8002282:	f107 0208 	add.w	r2, r7, #8
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff59 	bl	8002144 <UART_SendChar>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3b01      	subs	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	daf1      	bge.n	8002282 <UART_SendInt+0x4e>
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	cccccccd 	.word	0xcccccccd

080022ac <Reset_Handler>:
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e4 <LoopForever+0x2>
 80022b0:	f7ff fe48 	bl	8001f44 <SystemInit>
 80022b4:	2100      	movs	r1, #0
 80022b6:	e003      	b.n	80022c0 <LoopCopyDataInit>

080022b8 <CopyDataInit>:
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <LoopForever+0x6>)
 80022ba:	585b      	ldr	r3, [r3, r1]
 80022bc:	5043      	str	r3, [r0, r1]
 80022be:	3104      	adds	r1, #4

080022c0 <LoopCopyDataInit>:
 80022c0:	480a      	ldr	r0, [pc, #40]	@ (80022ec <LoopForever+0xa>)
 80022c2:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <LoopForever+0xe>)
 80022c4:	1842      	adds	r2, r0, r1
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3f6      	bcc.n	80022b8 <CopyDataInit>
 80022ca:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <LoopForever+0x12>)
 80022cc:	e002      	b.n	80022d4 <LoopFillZerobss>

080022ce <FillZerobss>:
 80022ce:	2300      	movs	r3, #0
 80022d0:	f842 3b04 	str.w	r3, [r2], #4

080022d4 <LoopFillZerobss>:
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <LoopForever+0x16>)
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3f9      	bcc.n	80022ce <FillZerobss>
 80022da:	f001 f98d 	bl	80035f8 <__libc_init_array>
 80022de:	f7fe ff89 	bl	80011f4 <main>

080022e2 <LoopForever>:
 80022e2:	e7fe      	b.n	80022e2 <LoopForever>
 80022e4:	20018000 	.word	0x20018000
 80022e8:	080040c4 	.word	0x080040c4
 80022ec:	20000000 	.word	0x20000000
 80022f0:	200000a4 	.word	0x200000a4
 80022f4:	200000a4 	.word	0x200000a4
 80022f8:	20000248 	.word	0x20000248

080022fc <ADC1_2_IRQHandler>:
 80022fc:	e7fe      	b.n	80022fc <ADC1_2_IRQHandler>
	...

08002300 <LL_EXTI_EnableIT_0_31>:
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <LL_EXTI_EnableIT_0_31+0x20>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4904      	ldr	r1, [pc, #16]	@ (8002320 <LL_EXTI_EnableIT_0_31+0x20>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <LL_EXTI_EnableIT_32_63>:
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <LL_EXTI_EnableIT_32_63+0x20>)
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	4904      	ldr	r1, [pc, #16]	@ (8002344 <LL_EXTI_EnableIT_32_63+0x20>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	620b      	str	r3, [r1, #32]
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40010400 	.word	0x40010400

08002348 <LL_EXTI_DisableIT_0_31>:
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <LL_EXTI_DisableIT_0_31+0x24>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	43db      	mvns	r3, r3
 8002358:	4904      	ldr	r1, [pc, #16]	@ (800236c <LL_EXTI_DisableIT_0_31+0x24>)
 800235a:	4013      	ands	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40010400 	.word	0x40010400

08002370 <LL_EXTI_DisableIT_32_63>:
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <LL_EXTI_DisableIT_32_63+0x24>)
 800237a:	6a1a      	ldr	r2, [r3, #32]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	43db      	mvns	r3, r3
 8002380:	4904      	ldr	r1, [pc, #16]	@ (8002394 <LL_EXTI_DisableIT_32_63+0x24>)
 8002382:	4013      	ands	r3, r2
 8002384:	620b      	str	r3, [r1, #32]
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40010400 	.word	0x40010400

08002398 <LL_EXTI_EnableEvent_0_31>:
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4904      	ldr	r1, [pc, #16]	@ (80023b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40010400 	.word	0x40010400

080023bc <LL_EXTI_EnableEvent_32_63>:
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <LL_EXTI_EnableEvent_32_63+0x20>)
 80023c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c8:	4904      	ldr	r1, [pc, #16]	@ (80023dc <LL_EXTI_EnableEvent_32_63+0x20>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	624b      	str	r3, [r1, #36]	@ 0x24
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40010400 	.word	0x40010400

080023e0 <LL_EXTI_DisableEvent_0_31>:
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <LL_EXTI_DisableEvent_0_31+0x24>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	4904      	ldr	r1, [pc, #16]	@ (8002404 <LL_EXTI_DisableEvent_0_31+0x24>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010400 	.word	0x40010400

08002408 <LL_EXTI_DisableEvent_32_63>:
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	43db      	mvns	r3, r3
 8002418:	4904      	ldr	r1, [pc, #16]	@ (800242c <LL_EXTI_DisableEvent_32_63+0x24>)
 800241a:	4013      	ands	r3, r2
 800241c:	624b      	str	r3, [r1, #36]	@ 0x24
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010400 	.word	0x40010400

08002430 <LL_EXTI_EnableRisingTrig_0_31>:
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4904      	ldr	r1, [pc, #16]	@ (8002450 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40010400 	.word	0x40010400

08002454 <LL_EXTI_EnableRisingTrig_32_63>:
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800245e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002460:	4904      	ldr	r1, [pc, #16]	@ (8002474 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4313      	orrs	r3, r2
 8002466:	628b      	str	r3, [r1, #40]	@ 0x28
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40010400 	.word	0x40010400

08002478 <LL_EXTI_DisableRisingTrig_0_31>:
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	43db      	mvns	r3, r3
 8002488:	4904      	ldr	r1, [pc, #16]	@ (800249c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800248a:	4013      	ands	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40010400 	.word	0x40010400

080024a0 <LL_EXTI_DisableRisingTrig_32_63>:
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80024aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4904      	ldr	r1, [pc, #16]	@ (80024c4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	628b      	str	r3, [r1, #40]	@ 0x28
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010400 	.word	0x40010400

080024c8 <LL_EXTI_EnableFallingTrig_0_31>:
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40010400 	.word	0x40010400

080024ec <LL_EXTI_EnableFallingTrig_32_63>:
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80024f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f8:	4904      	ldr	r1, [pc, #16]	@ (800250c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40010400 	.word	0x40010400

08002510 <LL_EXTI_DisableFallingTrig_0_31>:
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	43db      	mvns	r3, r3
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002522:	4013      	ands	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40010400 	.word	0x40010400

08002538 <LL_EXTI_DisableFallingTrig_32_63>:
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	43db      	mvns	r3, r3
 8002548:	4904      	ldr	r1, [pc, #16]	@ (800255c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800254a:	4013      	ands	r3, r2
 800254c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010400 	.word	0x40010400

08002560 <LL_EXTI_Init>:
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7a1b      	ldrb	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80d0 	beq.w	8002716 <LL_EXTI_Init+0x1b6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <LL_EXTI_Init+0xe6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7a5b      	ldrb	r3, [r3, #9]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d01c      	beq.n	80025c0 <LL_EXTI_Init+0x60>
 8002586:	2b02      	cmp	r3, #2
 8002588:	dc25      	bgt.n	80025d6 <LL_EXTI_Init+0x76>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <LL_EXTI_Init+0x34>
 800258e:	2b01      	cmp	r3, #1
 8002590:	d00b      	beq.n	80025aa <LL_EXTI_Init+0x4a>
 8002592:	e020      	b.n	80025d6 <LL_EXTI_Init+0x76>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff21 	bl	80023e0 <LL_EXTI_DisableEvent_0_31>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff feac 	bl	8002300 <LL_EXTI_EnableIT_0_31>
 80025a8:	e018      	b.n	80025dc <LL_EXTI_Init+0x7c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff feca 	bl	8002348 <LL_EXTI_DisableIT_0_31>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff feed 	bl	8002398 <LL_EXTI_EnableEvent_0_31>
 80025be:	e00d      	b.n	80025dc <LL_EXTI_Init+0x7c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fe9b 	bl	8002300 <LL_EXTI_EnableIT_0_31>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fee2 	bl	8002398 <LL_EXTI_EnableEvent_0_31>
 80025d4:	e002      	b.n	80025dc <LL_EXTI_Init+0x7c>
 80025d6:	2301      	movs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	bf00      	nop
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7a9b      	ldrb	r3, [r3, #10]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d030      	beq.n	8002646 <LL_EXTI_Init+0xe6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7a9b      	ldrb	r3, [r3, #10]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d01c      	beq.n	8002626 <LL_EXTI_Init+0xc6>
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	dc25      	bgt.n	800263c <LL_EXTI_Init+0xdc>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d002      	beq.n	80025fa <LL_EXTI_Init+0x9a>
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d00b      	beq.n	8002610 <LL_EXTI_Init+0xb0>
 80025f8:	e020      	b.n	800263c <LL_EXTI_Init+0xdc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff86 	bl	8002510 <LL_EXTI_DisableFallingTrig_0_31>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff11 	bl	8002430 <LL_EXTI_EnableRisingTrig_0_31>
 800260e:	e01a      	b.n	8002646 <LL_EXTI_Init+0xe6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff2f 	bl	8002478 <LL_EXTI_DisableRisingTrig_0_31>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff52 	bl	80024c8 <LL_EXTI_EnableFallingTrig_0_31>
 8002624:	e00f      	b.n	8002646 <LL_EXTI_Init+0xe6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff00 	bl	8002430 <LL_EXTI_EnableRisingTrig_0_31>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff47 	bl	80024c8 <LL_EXTI_EnableFallingTrig_0_31>
 800263a:	e004      	b.n	8002646 <LL_EXTI_Init+0xe6>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	bf00      	nop
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d077      	beq.n	800273e <LL_EXTI_Init+0x1de>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7a5b      	ldrb	r3, [r3, #9]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d01c      	beq.n	8002690 <LL_EXTI_Init+0x130>
 8002656:	2b02      	cmp	r3, #2
 8002658:	dc25      	bgt.n	80026a6 <LL_EXTI_Init+0x146>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <LL_EXTI_Init+0x104>
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00b      	beq.n	800267a <LL_EXTI_Init+0x11a>
 8002662:	e020      	b.n	80026a6 <LL_EXTI_Init+0x146>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fecd 	bl	8002408 <LL_EXTI_DisableEvent_32_63>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe56 	bl	8002324 <LL_EXTI_EnableIT_32_63>
 8002678:	e01a      	b.n	80026b0 <LL_EXTI_Init+0x150>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe76 	bl	8002370 <LL_EXTI_DisableIT_32_63>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fe97 	bl	80023bc <LL_EXTI_EnableEvent_32_63>
 800268e:	e00f      	b.n	80026b0 <LL_EXTI_Init+0x150>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe45 	bl	8002324 <LL_EXTI_EnableIT_32_63>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fe8c 	bl	80023bc <LL_EXTI_EnableEvent_32_63>
 80026a4:	e004      	b.n	80026b0 <LL_EXTI_Init+0x150>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	bf00      	nop
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7a9b      	ldrb	r3, [r3, #10]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d042      	beq.n	800273e <LL_EXTI_Init+0x1de>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7a9b      	ldrb	r3, [r3, #10]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d01c      	beq.n	80026fa <LL_EXTI_Init+0x19a>
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	dc25      	bgt.n	8002710 <LL_EXTI_Init+0x1b0>
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d002      	beq.n	80026ce <LL_EXTI_Init+0x16e>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d00b      	beq.n	80026e4 <LL_EXTI_Init+0x184>
 80026cc:	e020      	b.n	8002710 <LL_EXTI_Init+0x1b0>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff30 	bl	8002538 <LL_EXTI_DisableFallingTrig_32_63>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff feb9 	bl	8002454 <LL_EXTI_EnableRisingTrig_32_63>
 80026e2:	e02c      	b.n	800273e <LL_EXTI_Init+0x1de>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fed9 	bl	80024a0 <LL_EXTI_DisableRisingTrig_32_63>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fefa 	bl	80024ec <LL_EXTI_EnableFallingTrig_32_63>
 80026f8:	e021      	b.n	800273e <LL_EXTI_Init+0x1de>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fea8 	bl	8002454 <LL_EXTI_EnableRisingTrig_32_63>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff feef 	bl	80024ec <LL_EXTI_EnableFallingTrig_32_63>
 800270e:	e016      	b.n	800273e <LL_EXTI_Init+0x1de>
 8002710:	2301      	movs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e013      	b.n	800273e <LL_EXTI_Init+0x1de>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe14 	bl	8002348 <LL_EXTI_DisableIT_0_31>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fe5b 	bl	80023e0 <LL_EXTI_DisableEvent_0_31>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fe1e 	bl	8002370 <LL_EXTI_DisableIT_32_63>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe65 	bl	8002408 <LL_EXTI_DisableEvent_32_63>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <LL_GPIO_SetPinMode>:
 8002748:	b480      	push	{r7}
 800274a:	b08b      	sub	sp, #44	@ 0x2c
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <LL_GPIO_SetPinMode+0x2a>
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <LL_GPIO_SetPinMode+0x32>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2103      	movs	r1, #3
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	401a      	ands	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <LL_GPIO_SetPinMode+0x58>
 800279c:	2320      	movs	r3, #32
 800279e:	e003      	b.n	80027a8 <LL_GPIO_SetPinMode+0x60>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	bf00      	nop
 80027b8:	372c      	adds	r7, #44	@ 0x2c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_GPIO_SetPinOutputType>:
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_GPIO_SetPinSpeed>:
 80027f2:	b480      	push	{r7}
 80027f4:	b08b      	sub	sp, #44	@ 0x2c
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <LL_GPIO_SetPinSpeed+0x2a>
 8002818:	2320      	movs	r3, #32
 800281a:	e003      	b.n	8002824 <LL_GPIO_SetPinSpeed+0x32>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2103      	movs	r1, #3
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <LL_GPIO_SetPinSpeed+0x58>
 8002846:	2320      	movs	r3, #32
 8002848:	e003      	b.n	8002852 <LL_GPIO_SetPinSpeed+0x60>
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	431a      	orrs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	bf00      	nop
 8002862:	372c      	adds	r7, #44	@ 0x2c
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_GPIO_SetPinPull>:
 800286c:	b480      	push	{r7}
 800286e:	b08b      	sub	sp, #44	@ 0x2c
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <LL_GPIO_SetPinPull+0x2a>
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <LL_GPIO_SetPinPull+0x32>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2103      	movs	r1, #3
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <LL_GPIO_SetPinPull+0x58>
 80028c0:	2320      	movs	r3, #32
 80028c2:	e003      	b.n	80028cc <LL_GPIO_SetPinPull+0x60>
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	bf00      	nop
 80028dc:	372c      	adds	r7, #44	@ 0x2c
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_GPIO_SetAFPin_0_7>:
 80028e6:	b480      	push	{r7}
 80028e8:	b08b      	sub	sp, #44	@ 0x2c
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <LL_GPIO_SetAFPin_0_7+0x2a>
 800290c:	2320      	movs	r3, #32
 800290e:	e003      	b.n	8002918 <LL_GPIO_SetAFPin_0_7+0x32>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	210f      	movs	r1, #15
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	401a      	ands	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <LL_GPIO_SetAFPin_0_7+0x58>
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <LL_GPIO_SetAFPin_0_7+0x60>
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	431a      	orrs	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	bf00      	nop
 8002956:	372c      	adds	r7, #44	@ 0x2c
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_GPIO_SetAFPin_8_15>:
 8002960:	b480      	push	{r7}
 8002962:	b08b      	sub	sp, #44	@ 0x2c
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <LL_GPIO_SetAFPin_8_15+0x2c>
 8002988:	2320      	movs	r3, #32
 800298a:	e003      	b.n	8002994 <LL_GPIO_SetAFPin_8_15+0x34>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	210f      	movs	r1, #15
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <LL_GPIO_SetAFPin_8_15+0x5c>
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <LL_GPIO_SetAFPin_8_15+0x64>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80029d2:	bf00      	nop
 80029d4:	372c      	adds	r7, #44	@ 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_GPIO_Init>:
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <LL_GPIO_Init+0x26>
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <LL_GPIO_Init+0x2e>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e040      	b.n	8002a92 <LL_GPIO_Init+0xb4>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d032      	beq.n	8002a8c <LL_GPIO_Init+0xae>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	69b9      	ldr	r1, [r7, #24]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fe8a 	bl	8002748 <LL_GPIO_SetPinMode>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d003      	beq.n	8002a44 <LL_GPIO_Init+0x66>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d106      	bne.n	8002a52 <LL_GPIO_Init+0x74>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fed0 	bl	80027f2 <LL_GPIO_SetPinSpeed>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	461a      	mov	r2, r3
 8002a58:	69b9      	ldr	r1, [r7, #24]
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff06 	bl	800286c <LL_GPIO_SetPinPull>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d111      	bne.n	8002a8c <LL_GPIO_Init+0xae>
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2bff      	cmp	r3, #255	@ 0xff
 8002a6c:	d807      	bhi.n	8002a7e <LL_GPIO_Init+0xa0>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	461a      	mov	r2, r3
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff35 	bl	80028e6 <LL_GPIO_SetAFPin_0_7>
 8002a7c:	e006      	b.n	8002a8c <LL_GPIO_Init+0xae>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	461a      	mov	r2, r3
 8002a84:	69b9      	ldr	r1, [r7, #24]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ff6a 	bl	8002960 <LL_GPIO_SetAFPin_8_15>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1b7      	bne.n	8002a10 <LL_GPIO_Init+0x32>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d003      	beq.n	8002ab0 <LL_GPIO_Init+0xd2>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d107      	bne.n	8002ac0 <LL_GPIO_Init+0xe2>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fe81 	bl	80027c2 <LL_GPIO_SetPinOutputType>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <LL_RCC_HSI_IsReady>:
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <LL_RCC_HSI_IsReady+0x24>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002adc:	d101      	bne.n	8002ae2 <LL_RCC_HSI_IsReady+0x16>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_RCC_HSI_IsReady+0x18>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <LL_RCC_LSE_IsReady>:
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <LL_RCC_LSE_IsReady+0x24>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d101      	bne.n	8002b0a <LL_RCC_LSE_IsReady+0x16>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_RCC_LSE_IsReady+0x18>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <LL_RCC_MSI_IsEnabledRangeSelect>:
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d101      	bne.n	8002b30 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002b30:	2300      	movs	r3, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40021000 	.word	0x40021000

08002b40 <LL_RCC_MSI_GetRange>:
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <LL_RCC_MSI_GetRange+0x18>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <LL_RCC_MSI_GetRangeAfterStandby>:
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b66:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000

08002b78 <LL_RCC_GetSysClkSource>:
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <LL_RCC_GetSysClkSource+0x18>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000

08002b94 <LL_RCC_GetAHBPrescaler>:
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <LL_RCC_GetAHBPrescaler+0x18>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000

08002bb0 <LL_RCC_GetAPB1Prescaler>:
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4b04      	ldr	r3, [pc, #16]	@ (8002bc8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <LL_RCC_GetAPB2Prescaler>:
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000

08002be8 <LL_RCC_GetUSARTClockSource>:
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <LL_RCC_GetUSARTClockSource+0x24>)
 8002bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40021000 	.word	0x40021000

08002c10 <LL_RCC_GetUARTClockSource>:
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <LL_RCC_GetUARTClockSource+0x24>)
 8002c1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	401a      	ands	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	4313      	orrs	r3, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000

08002c38 <LL_RCC_PLL_GetMainSource>:
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <LL_RCC_PLL_GetMainSource+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000

08002c54 <LL_RCC_PLL_GetN>:
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <LL_RCC_PLL_GetN+0x18>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40021000 	.word	0x40021000

08002c70 <LL_RCC_PLL_GetR>:
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <LL_RCC_PLL_GetR+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000

08002c8c <LL_RCC_PLL_GetDivider>:
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <LL_RCC_PLL_GetDivider+0x18>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <LL_RCC_GetUSARTClockFreq>:
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d137      	bne.n	8002d2a <LL_RCC_GetUSARTClockFreq+0x82>
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff94 	bl	8002be8 <LL_RCC_GetUSARTClockSource>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	f200 80b3 	bhi.w	8002e32 <LL_RCC_GetUSARTClockFreq+0x18a>
 8002ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002d13 	.word	0x08002d13
 8002cd8:	08002ce5 	.word	0x08002ce5
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cff 	.word	0x08002cff
 8002ce4:	f000 f956 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	e0b3      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002cec:	f7ff feee 	bl	8002acc <LL_RCC_HSI_IsReady>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 809f 	beq.w	8002e36 <LL_RCC_GetUSARTClockFreq+0x18e>
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e09b      	b.n	8002e36 <LL_RCC_GetUSARTClockFreq+0x18e>
 8002cfe:	f7ff fef9 	bl	8002af4 <LL_RCC_LSE_IsReady>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8098 	beq.w	8002e3a <LL_RCC_GetUSARTClockFreq+0x192>
 8002d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e093      	b.n	8002e3a <LL_RCC_GetUSARTClockFreq+0x192>
 8002d12:	f000 f93f 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f9cb 	bl	80030b4 <RCC_GetHCLKClockFreq>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f9f1 	bl	8003108 <RCC_GetPCLK2ClockFreq>
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	e094      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d146      	bne.n	8002dbe <LL_RCC_GetUSARTClockFreq+0x116>
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff59 	bl	8002be8 <LL_RCC_GetUSARTClockSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d87e      	bhi.n	8002e3e <LL_RCC_GetUSARTClockFreq+0x196>
 8002d40:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002da7 	.word	0x08002da7
 8002d4c:	08002e3f 	.word	0x08002e3f
 8002d50:	08002e3f 	.word	0x08002e3f
 8002d54:	08002e3f 	.word	0x08002e3f
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002e3f 	.word	0x08002e3f
 8002d60:	08002e3f 	.word	0x08002e3f
 8002d64:	08002e3f 	.word	0x08002e3f
 8002d68:	08002d85 	.word	0x08002d85
 8002d6c:	08002e3f 	.word	0x08002e3f
 8002d70:	08002e3f 	.word	0x08002e3f
 8002d74:	08002e3f 	.word	0x08002e3f
 8002d78:	08002d95 	.word	0x08002d95
 8002d7c:	f000 f90a 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	e067      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002d84:	f7ff fea2 	bl	8002acc <LL_RCC_HSI_IsReady>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d059      	beq.n	8002e42 <LL_RCC_GetUSARTClockFreq+0x19a>
 8002d8e:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e056      	b.n	8002e42 <LL_RCC_GetUSARTClockFreq+0x19a>
 8002d94:	f7ff feae 	bl	8002af4 <LL_RCC_LSE_IsReady>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d053      	beq.n	8002e46 <LL_RCC_GetUSARTClockFreq+0x19e>
 8002d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e04f      	b.n	8002e46 <LL_RCC_GetUSARTClockFreq+0x19e>
 8002da6:	f000 f8f5 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f981 	bl	80030b4 <RCC_GetHCLKClockFreq>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f993 	bl	80030e0 <RCC_GetPCLK1ClockFreq>
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	e04a      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b30      	cmp	r3, #48	@ 0x30
 8002dc2:	d147      	bne.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff0f 	bl	8002be8 <LL_RCC_GetUSARTClockSource>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002dd0:	d01a      	beq.n	8002e08 <LL_RCC_GetUSARTClockFreq+0x160>
 8002dd2:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002dd6:	d838      	bhi.n	8002e4a <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002dd8:	4a22      	ldr	r2, [pc, #136]	@ (8002e64 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00c      	beq.n	8002df8 <LL_RCC_GetUSARTClockFreq+0x150>
 8002dde:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d832      	bhi.n	8002e4a <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002de4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002de8:	d017      	beq.n	8002e1a <LL_RCC_GetUSARTClockFreq+0x172>
 8002dea:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d12c      	bne.n	8002e4a <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002df0:	f000 f8d0 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	e02d      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002df8:	f7ff fe68 	bl	8002acc <LL_RCC_HSI_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d025      	beq.n	8002e4e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e022      	b.n	8002e4e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8002e08:	f7ff fe74 	bl	8002af4 <LL_RCC_LSE_IsReady>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01f      	beq.n	8002e52 <LL_RCC_GetUSARTClockFreq+0x1aa>
 8002e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e01b      	b.n	8002e52 <LL_RCC_GetUSARTClockFreq+0x1aa>
 8002e1a:	f000 f8bb 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f947 	bl	80030b4 <RCC_GetHCLKClockFreq>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f959 	bl	80030e0 <RCC_GetPCLK1ClockFreq>
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	e010      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e32:	bf00      	nop
 8002e34:	e00e      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e36:	bf00      	nop
 8002e38:	e00c      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e3a:	bf00      	nop
 8002e3c:	e00a      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e3e:	bf00      	nop
 8002e40:	e008      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e42:	bf00      	nop
 8002e44:	e006      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <LL_RCC_GetUSARTClockFreq+0x1ac>
 8002e52:	bf00      	nop
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	00300020 	.word	0x00300020
 8002e68:	00300010 	.word	0x00300010

08002e6c <LL_RCC_GetUARTClockFreq>:
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e7c:	d13b      	bne.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x8a>
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fec6 	bl	8002c10 <LL_RCC_GetUARTClockSource>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002e8a:	d01a      	beq.n	8002ec2 <LL_RCC_GetUARTClockFreq+0x56>
 8002e8c:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002e90:	d82c      	bhi.n	8002eec <LL_RCC_GetUARTClockFreq+0x80>
 8002e92:	4a3b      	ldr	r2, [pc, #236]	@ (8002f80 <LL_RCC_GetUARTClockFreq+0x114>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00c      	beq.n	8002eb2 <LL_RCC_GetUARTClockFreq+0x46>
 8002e98:	4a39      	ldr	r2, [pc, #228]	@ (8002f80 <LL_RCC_GetUARTClockFreq+0x114>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d826      	bhi.n	8002eec <LL_RCC_GetUARTClockFreq+0x80>
 8002e9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ea2:	d017      	beq.n	8002ed4 <LL_RCC_GetUARTClockFreq+0x68>
 8002ea4:	4a37      	ldr	r2, [pc, #220]	@ (8002f84 <LL_RCC_GetUARTClockFreq+0x118>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d120      	bne.n	8002eec <LL_RCC_GetUARTClockFreq+0x80>
 8002eaa:	f000 f873 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	e021      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x8a>
 8002eb2:	f7ff fe0b 	bl	8002acc <LL_RCC_HSI_IsReady>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d019      	beq.n	8002ef0 <LL_RCC_GetUARTClockFreq+0x84>
 8002ebc:	4b32      	ldr	r3, [pc, #200]	@ (8002f88 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e016      	b.n	8002ef0 <LL_RCC_GetUARTClockFreq+0x84>
 8002ec2:	f7ff fe17 	bl	8002af4 <LL_RCC_LSE_IsReady>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <LL_RCC_GetUARTClockFreq+0x88>
 8002ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e00f      	b.n	8002ef4 <LL_RCC_GetUARTClockFreq+0x88>
 8002ed4:	f000 f85e 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f8ea 	bl	80030b4 <RCC_GetHCLKClockFreq>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f8fc 	bl	80030e0 <RCC_GetPCLK1ClockFreq>
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	e004      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x8a>
 8002eec:	bf00      	nop
 8002eee:	e002      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x8a>
 8002ef0:	bf00      	nop
 8002ef2:	e000      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x8a>
 8002ef4:	bf00      	nop
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002efc:	d13b      	bne.n	8002f76 <LL_RCC_GetUARTClockFreq+0x10a>
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fe86 	bl	8002c10 <LL_RCC_GetUARTClockSource>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8002f0a:	d01a      	beq.n	8002f42 <LL_RCC_GetUARTClockFreq+0xd6>
 8002f0c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8002f10:	d82c      	bhi.n	8002f6c <LL_RCC_GetUARTClockFreq+0x100>
 8002f12:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <LL_RCC_GetUARTClockFreq+0x120>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00c      	beq.n	8002f32 <LL_RCC_GetUARTClockFreq+0xc6>
 8002f18:	4a1c      	ldr	r2, [pc, #112]	@ (8002f8c <LL_RCC_GetUARTClockFreq+0x120>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d826      	bhi.n	8002f6c <LL_RCC_GetUARTClockFreq+0x100>
 8002f1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f22:	d017      	beq.n	8002f54 <LL_RCC_GetUARTClockFreq+0xe8>
 8002f24:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <LL_RCC_GetUARTClockFreq+0x124>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d120      	bne.n	8002f6c <LL_RCC_GetUARTClockFreq+0x100>
 8002f2a:	f000 f833 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	e021      	b.n	8002f76 <LL_RCC_GetUARTClockFreq+0x10a>
 8002f32:	f7ff fdcb 	bl	8002acc <LL_RCC_HSI_IsReady>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d019      	beq.n	8002f70 <LL_RCC_GetUARTClockFreq+0x104>
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e016      	b.n	8002f70 <LL_RCC_GetUARTClockFreq+0x104>
 8002f42:	f7ff fdd7 	bl	8002af4 <LL_RCC_LSE_IsReady>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <LL_RCC_GetUARTClockFreq+0x108>
 8002f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e00f      	b.n	8002f74 <LL_RCC_GetUARTClockFreq+0x108>
 8002f54:	f000 f81e 	bl	8002f94 <RCC_GetSystemClockFreq>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f8aa 	bl	80030b4 <RCC_GetHCLKClockFreq>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f8bc 	bl	80030e0 <RCC_GetPCLK1ClockFreq>
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	e004      	b.n	8002f76 <LL_RCC_GetUARTClockFreq+0x10a>
 8002f6c:	bf00      	nop
 8002f6e:	e002      	b.n	8002f76 <LL_RCC_GetUARTClockFreq+0x10a>
 8002f70:	bf00      	nop
 8002f72:	e000      	b.n	8002f76 <LL_RCC_GetUARTClockFreq+0x10a>
 8002f74:	bf00      	nop
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	00c00080 	.word	0x00c00080
 8002f84:	00c00040 	.word	0x00c00040
 8002f88:	00f42400 	.word	0x00f42400
 8002f8c:	03000200 	.word	0x03000200
 8002f90:	03000100 	.word	0x03000100

08002f94 <RCC_GetSystemClockFreq>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	f7ff fded 	bl	8002b78 <LL_RCC_GetSysClkSource>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d851      	bhi.n	8003048 <RCC_GetSystemClockFreq+0xb4>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <RCC_GetSystemClockFreq+0x18>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fe1 	.word	0x08002fe1
 8002fb0:	08003049 	.word	0x08003049
 8002fb4:	08003049 	.word	0x08003049
 8002fb8:	08003049 	.word	0x08003049
 8002fbc:	08003035 	.word	0x08003035
 8002fc0:	08003049 	.word	0x08003049
 8002fc4:	08003049 	.word	0x08003049
 8002fc8:	08003049 	.word	0x08003049
 8002fcc:	0800303b 	.word	0x0800303b
 8002fd0:	08003049 	.word	0x08003049
 8002fd4:	08003049 	.word	0x08003049
 8002fd8:	08003049 	.word	0x08003049
 8002fdc:	08003041 	.word	0x08003041
 8002fe0:	f7ff fd9c 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d111      	bne.n	800300e <RCC_GetSystemClockFreq+0x7a>
 8002fea:	f7ff fd97 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <RCC_GetSystemClockFreq+0x6a>
 8002ff4:	f7ff fda4 	bl	8002b40 <LL_RCC_MSI_GetRange>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	e003      	b.n	8003006 <RCC_GetSystemClockFreq+0x72>
 8002ffe:	f7ff fdad 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 8003002:	4603      	mov	r3, r0
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	4a28      	ldr	r2, [pc, #160]	@ (80030a8 <RCC_GetSystemClockFreq+0x114>)
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	e010      	b.n	8003030 <RCC_GetSystemClockFreq+0x9c>
 800300e:	f7ff fd85 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <RCC_GetSystemClockFreq+0x8e>
 8003018:	f7ff fd92 	bl	8002b40 <LL_RCC_MSI_GetRange>
 800301c:	4603      	mov	r3, r0
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	e003      	b.n	800302a <RCC_GetSystemClockFreq+0x96>
 8003022:	f7ff fd9b 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 8003026:	4603      	mov	r3, r0
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	4a1f      	ldr	r2, [pc, #124]	@ (80030a8 <RCC_GetSystemClockFreq+0x114>)
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e033      	b.n	800309c <RCC_GetSystemClockFreq+0x108>
 8003034:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <RCC_GetSystemClockFreq+0x118>)
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	e030      	b.n	800309c <RCC_GetSystemClockFreq+0x108>
 800303a:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <RCC_GetSystemClockFreq+0x11c>)
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	e02d      	b.n	800309c <RCC_GetSystemClockFreq+0x108>
 8003040:	f000 f876 	bl	8003130 <RCC_PLL_GetFreqDomain_SYS>
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	e029      	b.n	800309c <RCC_GetSystemClockFreq+0x108>
 8003048:	f7ff fd68 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d111      	bne.n	8003076 <RCC_GetSystemClockFreq+0xe2>
 8003052:	f7ff fd63 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <RCC_GetSystemClockFreq+0xd2>
 800305c:	f7ff fd70 	bl	8002b40 <LL_RCC_MSI_GetRange>
 8003060:	4603      	mov	r3, r0
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	e003      	b.n	800306e <RCC_GetSystemClockFreq+0xda>
 8003066:	f7ff fd79 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 800306a:	4603      	mov	r3, r0
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <RCC_GetSystemClockFreq+0x114>)
 8003070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003074:	e010      	b.n	8003098 <RCC_GetSystemClockFreq+0x104>
 8003076:	f7ff fd51 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <RCC_GetSystemClockFreq+0xf6>
 8003080:	f7ff fd5e 	bl	8002b40 <LL_RCC_MSI_GetRange>
 8003084:	4603      	mov	r3, r0
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	e003      	b.n	8003092 <RCC_GetSystemClockFreq+0xfe>
 800308a:	f7ff fd67 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 800308e:	4603      	mov	r3, r0
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <RCC_GetSystemClockFreq+0x114>)
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	bf00      	nop
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	08004050 	.word	0x08004050
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	007a1200 	.word	0x007a1200

080030b4 <RCC_GetHCLKClockFreq>:
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	f7ff fd6a 	bl	8002b94 <LL_RCC_GetAHBPrescaler>
 80030c0:	4603      	mov	r3, r0
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <RCC_GetHCLKClockFreq+0x28>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	461a      	mov	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	40d3      	lsrs	r3, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	08004038 	.word	0x08004038

080030e0 <RCC_GetPCLK1ClockFreq>:
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	f7ff fd62 	bl	8002bb0 <LL_RCC_GetAPB1Prescaler>
 80030ec:	4603      	mov	r3, r0
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <RCC_GetPCLK1ClockFreq+0x24>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	40d3      	lsrs	r3, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	08004048 	.word	0x08004048

08003108 <RCC_GetPCLK2ClockFreq>:
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	f7ff fd5c 	bl	8002bcc <LL_RCC_GetAPB2Prescaler>
 8003114:	4603      	mov	r3, r0
 8003116:	0adb      	lsrs	r3, r3, #11
 8003118:	4a04      	ldr	r2, [pc, #16]	@ (800312c <RCC_GetPCLK2ClockFreq+0x24>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	40d3      	lsrs	r3, r2
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	08004048 	.word	0x08004048

08003130 <RCC_PLL_GetFreqDomain_SYS>:
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	f7ff fd7f 	bl	8002c38 <LL_RCC_PLL_GetMainSource>
 800313a:	6038      	str	r0, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d036      	beq.n	80031b0 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d836      	bhi.n	80031b6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d003      	beq.n	8003156 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d02a      	beq.n	80031aa <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8003154:	e02f      	b.n	80031b6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003156:	f7ff fce1 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003160:	f7ff fcdc 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800316a:	f7ff fce9 	bl	8002b40 <LL_RCC_MSI_GetRange>
 800316e:	4603      	mov	r3, r0
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	e003      	b.n	800317c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003174:	f7ff fcf2 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 8003178:	4603      	mov	r3, r0
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	4a2f      	ldr	r2, [pc, #188]	@ (800323c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	e010      	b.n	80031a6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003184:	f7ff fcca 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d004      	beq.n	8003198 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800318e:	f7ff fcd7 	bl	8002b40 <LL_RCC_MSI_GetRange>
 8003192:	4603      	mov	r3, r0
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	e003      	b.n	80031a0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003198:	f7ff fce0 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 800319c:	4603      	mov	r3, r0
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	4a26      	ldr	r2, [pc, #152]	@ (800323c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80031a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	e02f      	b.n	800320a <RCC_PLL_GetFreqDomain_SYS+0xda>
 80031aa:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	e02c      	b.n	800320a <RCC_PLL_GetFreqDomain_SYS+0xda>
 80031b0:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	e029      	b.n	800320a <RCC_PLL_GetFreqDomain_SYS+0xda>
 80031b6:	f7ff fcb1 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80031c0:	f7ff fcac 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80031ca:	f7ff fcb9 	bl	8002b40 <LL_RCC_MSI_GetRange>
 80031ce:	4603      	mov	r3, r0
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	e003      	b.n	80031dc <RCC_PLL_GetFreqDomain_SYS+0xac>
 80031d4:	f7ff fcc2 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 80031d8:	4603      	mov	r3, r0
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	4a17      	ldr	r2, [pc, #92]	@ (800323c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80031de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e2:	e010      	b.n	8003206 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80031e4:	f7ff fc9a 	bl	8002b1c <LL_RCC_MSI_IsEnabledRangeSelect>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80031ee:	f7ff fca7 	bl	8002b40 <LL_RCC_MSI_GetRange>
 80031f2:	4603      	mov	r3, r0
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	e003      	b.n	8003200 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80031f8:	f7ff fcb0 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 80031fc:	4603      	mov	r3, r0
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	4a0e      	ldr	r2, [pc, #56]	@ (800323c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	bf00      	nop
 800320a:	f7ff fd3f 	bl	8002c8c <LL_RCC_PLL_GetDivider>
 800320e:	4603      	mov	r3, r0
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	3301      	adds	r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	fbb2 f4f3 	udiv	r4, r2, r3
 800321a:	f7ff fd1b 	bl	8002c54 <LL_RCC_PLL_GetN>
 800321e:	4603      	mov	r3, r0
 8003220:	fb03 f404 	mul.w	r4, r3, r4
 8003224:	f7ff fd24 	bl	8002c70 <LL_RCC_PLL_GetR>
 8003228:	4603      	mov	r3, r0
 800322a:	0e5b      	lsrs	r3, r3, #25
 800322c:	3301      	adds	r3, #1
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fbb4 f3f3 	udiv	r3, r4, r3
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	08004050 	.word	0x08004050
 8003240:	00f42400 	.word	0x00f42400
 8003244:	007a1200 	.word	0x007a1200

08003248 <LL_SPI_IsEnabled>:
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d101      	bne.n	8003260 <LL_SPI_IsEnabled+0x18>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_SPI_IsEnabled+0x1a>
 8003260:	2300      	movs	r3, #0
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_SPI_SetCRCPolynomial>:
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_SPI_Init>:
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ffd3 	bl	8003248 <LL_SPI_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d13b      	bne.n	8003320 <LL_SPI_Init+0x92>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032b0:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	6811      	ldr	r1, [r2, #0]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6852      	ldr	r2, [r2, #4]
 80032bc:	4311      	orrs	r1, r2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	4311      	orrs	r1, r2
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	6912      	ldr	r2, [r2, #16]
 80032c8:	4311      	orrs	r1, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	6952      	ldr	r2, [r2, #20]
 80032ce:	4311      	orrs	r1, r2
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	6992      	ldr	r2, [r2, #24]
 80032d4:	4311      	orrs	r1, r2
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	69d2      	ldr	r2, [r2, #28]
 80032da:	4311      	orrs	r1, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	6a12      	ldr	r2, [r2, #32]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	6891      	ldr	r1, [r2, #8]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6952      	ldr	r2, [r2, #20]
 80032fc:	0c12      	lsrs	r2, r2, #16
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	d105      	bne.n	800331c <LL_SPI_Init+0x8e>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa9 	bl	800326e <LL_SPI_SetCRCPolynomial>
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <LL_USART_IsEnabled>:
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <LL_USART_IsEnabled+0x18>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_USART_IsEnabled+0x1a>
 8003342:	2300      	movs	r3, #0
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_USART_SetStopBitsLength>:
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_USART_SetHWFlowCtrl>:
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_USART_SetBaudRate>:
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b0:	d11a      	bne.n	80033e8 <LL_USART_SetBaudRate+0x4c>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	005a      	lsls	r2, r3, #1
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	441a      	add	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	e00a      	b.n	80033fe <LL_USART_SetBaudRate+0x62>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	085a      	lsrs	r2, r3, #1
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	441a      	add	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <LL_USART_Init>:
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff83 	bl	800332a <LL_USART_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d15b      	bne.n	80034e2 <LL_USART_Init+0xd6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b2f      	ldr	r3, [pc, #188]	@ (80034ec <LL_USART_Init+0xe0>)
 8003430:	4013      	ands	r3, r2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	6851      	ldr	r1, [r2, #4]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	4311      	orrs	r1, r2
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	6912      	ldr	r2, [r2, #16]
 8003440:	4311      	orrs	r1, r2
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	6992      	ldr	r2, [r2, #24]
 8003446:	430a      	orrs	r2, r1
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff7b 	bl	8003350 <LL_USART_SetStopBitsLength>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff88 	bl	8003376 <LL_USART_SetHWFlowCtrl>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <LL_USART_Init+0xe4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d104      	bne.n	8003478 <LL_USART_Init+0x6c>
 800346e:	2003      	movs	r0, #3
 8003470:	f7ff fc1a 	bl	8002ca8 <LL_RCC_GetUSARTClockFreq>
 8003474:	60b8      	str	r0, [r7, #8]
 8003476:	e023      	b.n	80034c0 <LL_USART_Init+0xb4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <LL_USART_Init+0xe8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d104      	bne.n	800348a <LL_USART_Init+0x7e>
 8003480:	200c      	movs	r0, #12
 8003482:	f7ff fc11 	bl	8002ca8 <LL_RCC_GetUSARTClockFreq>
 8003486:	60b8      	str	r0, [r7, #8]
 8003488:	e01a      	b.n	80034c0 <LL_USART_Init+0xb4>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1a      	ldr	r2, [pc, #104]	@ (80034f8 <LL_USART_Init+0xec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d104      	bne.n	800349c <LL_USART_Init+0x90>
 8003492:	2030      	movs	r0, #48	@ 0x30
 8003494:	f7ff fc08 	bl	8002ca8 <LL_RCC_GetUSARTClockFreq>
 8003498:	60b8      	str	r0, [r7, #8]
 800349a:	e011      	b.n	80034c0 <LL_USART_Init+0xb4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a17      	ldr	r2, [pc, #92]	@ (80034fc <LL_USART_Init+0xf0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d104      	bne.n	80034ae <LL_USART_Init+0xa2>
 80034a4:	20c0      	movs	r0, #192	@ 0xc0
 80034a6:	f7ff fce1 	bl	8002e6c <LL_RCC_GetUARTClockFreq>
 80034aa:	60b8      	str	r0, [r7, #8]
 80034ac:	e008      	b.n	80034c0 <LL_USART_Init+0xb4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a13      	ldr	r2, [pc, #76]	@ (8003500 <LL_USART_Init+0xf4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d104      	bne.n	80034c0 <LL_USART_Init+0xb4>
 80034b6:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80034ba:	f7ff fcd7 	bl	8002e6c <LL_RCC_GetUARTClockFreq>
 80034be:	60b8      	str	r0, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <LL_USART_Init+0xd6>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <LL_USART_Init+0xd6>
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff5d 	bl	800339c <LL_USART_SetBaudRate>
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	efff69f3 	.word	0xefff69f3
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40004400 	.word	0x40004400
 80034f8:	40004800 	.word	0x40004800
 80034fc:	40004c00 	.word	0x40004c00
 8003500:	40005000 	.word	0x40005000

08003504 <LL_mDelay>:
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <LL_mDelay+0x4c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d00c      	beq.n	800353a <LL_mDelay+0x36>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e008      	b.n	800353a <LL_mDelay+0x36>
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <LL_mDelay+0x4c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <LL_mDelay+0x36>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3b01      	subs	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f3      	bne.n	8003528 <LL_mDelay+0x24>
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <LL_SetSystemCoreClock>:
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4a04      	ldr	r2, [pc, #16]	@ (8003570 <LL_SetSystemCoreClock+0x1c>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000050 	.word	0x20000050

08003574 <sniprintf>:
 8003574:	b40c      	push	{r2, r3}
 8003576:	b530      	push	{r4, r5, lr}
 8003578:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <sniprintf+0x64>)
 800357a:	1e0c      	subs	r4, r1, #0
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	b09d      	sub	sp, #116	@ 0x74
 8003580:	da08      	bge.n	8003594 <sniprintf+0x20>
 8003582:	238b      	movs	r3, #139	@ 0x8b
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	f04f 30ff 	mov.w	r0, #4294967295
 800358a:	b01d      	add	sp, #116	@ 0x74
 800358c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003590:	b002      	add	sp, #8
 8003592:	4770      	bx	lr
 8003594:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800359c:	bf14      	ite	ne
 800359e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80035a2:	4623      	moveq	r3, r4
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	9307      	str	r3, [sp, #28]
 80035a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ac:	9002      	str	r0, [sp, #8]
 80035ae:	9006      	str	r0, [sp, #24]
 80035b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80035b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80035b6:	ab21      	add	r3, sp, #132	@ 0x84
 80035b8:	a902      	add	r1, sp, #8
 80035ba:	4628      	mov	r0, r5
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	f000 f995 	bl	80038ec <_svfiprintf_r>
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	bfbc      	itt	lt
 80035c6:	238b      	movlt	r3, #139	@ 0x8b
 80035c8:	602b      	strlt	r3, [r5, #0]
 80035ca:	2c00      	cmp	r4, #0
 80035cc:	d0dd      	beq.n	800358a <sniprintf+0x16>
 80035ce:	9b02      	ldr	r3, [sp, #8]
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e7d9      	b.n	800358a <sniprintf+0x16>
 80035d6:	bf00      	nop
 80035d8:	20000054 	.word	0x20000054

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <__errno>:
 80035ec:	4b01      	ldr	r3, [pc, #4]	@ (80035f4 <__errno+0x8>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000054 	.word	0x20000054

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003634 <__libc_init_array+0x3c>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2600      	movs	r6, #0
 8003604:	42a6      	cmp	r6, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4d0b      	ldr	r5, [pc, #44]	@ (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	@ (800363c <__libc_init_array+0x44>)
 800360c:	f000 fc66 	bl	8003edc <_init>
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2600      	movs	r6, #0
 8003616:	42a6      	cmp	r6, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003620:	4798      	blx	r3
 8003622:	3601      	adds	r6, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f855 3b04 	ldr.w	r3, [r5], #4
 800362a:	4798      	blx	r3
 800362c:	3601      	adds	r6, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	080040bc 	.word	0x080040bc
 8003634:	080040bc 	.word	0x080040bc
 8003638:	080040bc 	.word	0x080040bc
 800363c:	080040c0 	.word	0x080040c0

08003640 <__retarget_lock_acquire_recursive>:
 8003640:	4770      	bx	lr

08003642 <__retarget_lock_release_recursive>:
 8003642:	4770      	bx	lr

08003644 <_free_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4605      	mov	r5, r0
 8003648:	2900      	cmp	r1, #0
 800364a:	d041      	beq.n	80036d0 <_free_r+0x8c>
 800364c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003650:	1f0c      	subs	r4, r1, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bfb8      	it	lt
 8003656:	18e4      	addlt	r4, r4, r3
 8003658:	f000 f8e0 	bl	800381c <__malloc_lock>
 800365c:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <_free_r+0x90>)
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	b933      	cbnz	r3, 8003670 <_free_r+0x2c>
 8003662:	6063      	str	r3, [r4, #4]
 8003664:	6014      	str	r4, [r2, #0]
 8003666:	4628      	mov	r0, r5
 8003668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800366c:	f000 b8dc 	b.w	8003828 <__malloc_unlock>
 8003670:	42a3      	cmp	r3, r4
 8003672:	d908      	bls.n	8003686 <_free_r+0x42>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	1821      	adds	r1, r4, r0
 8003678:	428b      	cmp	r3, r1
 800367a:	bf01      	itttt	eq
 800367c:	6819      	ldreq	r1, [r3, #0]
 800367e:	685b      	ldreq	r3, [r3, #4]
 8003680:	1809      	addeq	r1, r1, r0
 8003682:	6021      	streq	r1, [r4, #0]
 8003684:	e7ed      	b.n	8003662 <_free_r+0x1e>
 8003686:	461a      	mov	r2, r3
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	b10b      	cbz	r3, 8003690 <_free_r+0x4c>
 800368c:	42a3      	cmp	r3, r4
 800368e:	d9fa      	bls.n	8003686 <_free_r+0x42>
 8003690:	6811      	ldr	r1, [r2, #0]
 8003692:	1850      	adds	r0, r2, r1
 8003694:	42a0      	cmp	r0, r4
 8003696:	d10b      	bne.n	80036b0 <_free_r+0x6c>
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	4401      	add	r1, r0
 800369c:	1850      	adds	r0, r2, r1
 800369e:	4283      	cmp	r3, r0
 80036a0:	6011      	str	r1, [r2, #0]
 80036a2:	d1e0      	bne.n	8003666 <_free_r+0x22>
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	6053      	str	r3, [r2, #4]
 80036aa:	4408      	add	r0, r1
 80036ac:	6010      	str	r0, [r2, #0]
 80036ae:	e7da      	b.n	8003666 <_free_r+0x22>
 80036b0:	d902      	bls.n	80036b8 <_free_r+0x74>
 80036b2:	230c      	movs	r3, #12
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	e7d6      	b.n	8003666 <_free_r+0x22>
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	1821      	adds	r1, r4, r0
 80036bc:	428b      	cmp	r3, r1
 80036be:	bf04      	itt	eq
 80036c0:	6819      	ldreq	r1, [r3, #0]
 80036c2:	685b      	ldreq	r3, [r3, #4]
 80036c4:	6063      	str	r3, [r4, #4]
 80036c6:	bf04      	itt	eq
 80036c8:	1809      	addeq	r1, r1, r0
 80036ca:	6021      	streq	r1, [r4, #0]
 80036cc:	6054      	str	r4, [r2, #4]
 80036ce:	e7ca      	b.n	8003666 <_free_r+0x22>
 80036d0:	bd38      	pop	{r3, r4, r5, pc}
 80036d2:	bf00      	nop
 80036d4:	20000244 	.word	0x20000244

080036d8 <sbrk_aligned>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4e0f      	ldr	r6, [pc, #60]	@ (8003718 <sbrk_aligned+0x40>)
 80036dc:	460c      	mov	r4, r1
 80036de:	6831      	ldr	r1, [r6, #0]
 80036e0:	4605      	mov	r5, r0
 80036e2:	b911      	cbnz	r1, 80036ea <sbrk_aligned+0x12>
 80036e4:	f000 fba6 	bl	8003e34 <_sbrk_r>
 80036e8:	6030      	str	r0, [r6, #0]
 80036ea:	4621      	mov	r1, r4
 80036ec:	4628      	mov	r0, r5
 80036ee:	f000 fba1 	bl	8003e34 <_sbrk_r>
 80036f2:	1c43      	adds	r3, r0, #1
 80036f4:	d103      	bne.n	80036fe <sbrk_aligned+0x26>
 80036f6:	f04f 34ff 	mov.w	r4, #4294967295
 80036fa:	4620      	mov	r0, r4
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	1cc4      	adds	r4, r0, #3
 8003700:	f024 0403 	bic.w	r4, r4, #3
 8003704:	42a0      	cmp	r0, r4
 8003706:	d0f8      	beq.n	80036fa <sbrk_aligned+0x22>
 8003708:	1a21      	subs	r1, r4, r0
 800370a:	4628      	mov	r0, r5
 800370c:	f000 fb92 	bl	8003e34 <_sbrk_r>
 8003710:	3001      	adds	r0, #1
 8003712:	d1f2      	bne.n	80036fa <sbrk_aligned+0x22>
 8003714:	e7ef      	b.n	80036f6 <sbrk_aligned+0x1e>
 8003716:	bf00      	nop
 8003718:	20000240 	.word	0x20000240

0800371c <_malloc_r>:
 800371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003720:	1ccd      	adds	r5, r1, #3
 8003722:	f025 0503 	bic.w	r5, r5, #3
 8003726:	3508      	adds	r5, #8
 8003728:	2d0c      	cmp	r5, #12
 800372a:	bf38      	it	cc
 800372c:	250c      	movcc	r5, #12
 800372e:	2d00      	cmp	r5, #0
 8003730:	4606      	mov	r6, r0
 8003732:	db01      	blt.n	8003738 <_malloc_r+0x1c>
 8003734:	42a9      	cmp	r1, r5
 8003736:	d904      	bls.n	8003742 <_malloc_r+0x26>
 8003738:	230c      	movs	r3, #12
 800373a:	6033      	str	r3, [r6, #0]
 800373c:	2000      	movs	r0, #0
 800373e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003818 <_malloc_r+0xfc>
 8003746:	f000 f869 	bl	800381c <__malloc_lock>
 800374a:	f8d8 3000 	ldr.w	r3, [r8]
 800374e:	461c      	mov	r4, r3
 8003750:	bb44      	cbnz	r4, 80037a4 <_malloc_r+0x88>
 8003752:	4629      	mov	r1, r5
 8003754:	4630      	mov	r0, r6
 8003756:	f7ff ffbf 	bl	80036d8 <sbrk_aligned>
 800375a:	1c43      	adds	r3, r0, #1
 800375c:	4604      	mov	r4, r0
 800375e:	d158      	bne.n	8003812 <_malloc_r+0xf6>
 8003760:	f8d8 4000 	ldr.w	r4, [r8]
 8003764:	4627      	mov	r7, r4
 8003766:	2f00      	cmp	r7, #0
 8003768:	d143      	bne.n	80037f2 <_malloc_r+0xd6>
 800376a:	2c00      	cmp	r4, #0
 800376c:	d04b      	beq.n	8003806 <_malloc_r+0xea>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	4639      	mov	r1, r7
 8003772:	4630      	mov	r0, r6
 8003774:	eb04 0903 	add.w	r9, r4, r3
 8003778:	f000 fb5c 	bl	8003e34 <_sbrk_r>
 800377c:	4581      	cmp	r9, r0
 800377e:	d142      	bne.n	8003806 <_malloc_r+0xea>
 8003780:	6821      	ldr	r1, [r4, #0]
 8003782:	1a6d      	subs	r5, r5, r1
 8003784:	4629      	mov	r1, r5
 8003786:	4630      	mov	r0, r6
 8003788:	f7ff ffa6 	bl	80036d8 <sbrk_aligned>
 800378c:	3001      	adds	r0, #1
 800378e:	d03a      	beq.n	8003806 <_malloc_r+0xea>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	442b      	add	r3, r5
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	f8d8 3000 	ldr.w	r3, [r8]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	bb62      	cbnz	r2, 80037f8 <_malloc_r+0xdc>
 800379e:	f8c8 7000 	str.w	r7, [r8]
 80037a2:	e00f      	b.n	80037c4 <_malloc_r+0xa8>
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	1b52      	subs	r2, r2, r5
 80037a8:	d420      	bmi.n	80037ec <_malloc_r+0xd0>
 80037aa:	2a0b      	cmp	r2, #11
 80037ac:	d917      	bls.n	80037de <_malloc_r+0xc2>
 80037ae:	1961      	adds	r1, r4, r5
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	6025      	str	r5, [r4, #0]
 80037b4:	bf18      	it	ne
 80037b6:	6059      	strne	r1, [r3, #4]
 80037b8:	6863      	ldr	r3, [r4, #4]
 80037ba:	bf08      	it	eq
 80037bc:	f8c8 1000 	streq.w	r1, [r8]
 80037c0:	5162      	str	r2, [r4, r5]
 80037c2:	604b      	str	r3, [r1, #4]
 80037c4:	4630      	mov	r0, r6
 80037c6:	f000 f82f 	bl	8003828 <__malloc_unlock>
 80037ca:	f104 000b 	add.w	r0, r4, #11
 80037ce:	1d23      	adds	r3, r4, #4
 80037d0:	f020 0007 	bic.w	r0, r0, #7
 80037d4:	1ac2      	subs	r2, r0, r3
 80037d6:	bf1c      	itt	ne
 80037d8:	1a1b      	subne	r3, r3, r0
 80037da:	50a3      	strne	r3, [r4, r2]
 80037dc:	e7af      	b.n	800373e <_malloc_r+0x22>
 80037de:	6862      	ldr	r2, [r4, #4]
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	bf0c      	ite	eq
 80037e4:	f8c8 2000 	streq.w	r2, [r8]
 80037e8:	605a      	strne	r2, [r3, #4]
 80037ea:	e7eb      	b.n	80037c4 <_malloc_r+0xa8>
 80037ec:	4623      	mov	r3, r4
 80037ee:	6864      	ldr	r4, [r4, #4]
 80037f0:	e7ae      	b.n	8003750 <_malloc_r+0x34>
 80037f2:	463c      	mov	r4, r7
 80037f4:	687f      	ldr	r7, [r7, #4]
 80037f6:	e7b6      	b.n	8003766 <_malloc_r+0x4a>
 80037f8:	461a      	mov	r2, r3
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	42a3      	cmp	r3, r4
 80037fe:	d1fb      	bne.n	80037f8 <_malloc_r+0xdc>
 8003800:	2300      	movs	r3, #0
 8003802:	6053      	str	r3, [r2, #4]
 8003804:	e7de      	b.n	80037c4 <_malloc_r+0xa8>
 8003806:	230c      	movs	r3, #12
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	4630      	mov	r0, r6
 800380c:	f000 f80c 	bl	8003828 <__malloc_unlock>
 8003810:	e794      	b.n	800373c <_malloc_r+0x20>
 8003812:	6005      	str	r5, [r0, #0]
 8003814:	e7d6      	b.n	80037c4 <_malloc_r+0xa8>
 8003816:	bf00      	nop
 8003818:	20000244 	.word	0x20000244

0800381c <__malloc_lock>:
 800381c:	4801      	ldr	r0, [pc, #4]	@ (8003824 <__malloc_lock+0x8>)
 800381e:	f7ff bf0f 	b.w	8003640 <__retarget_lock_acquire_recursive>
 8003822:	bf00      	nop
 8003824:	2000023c 	.word	0x2000023c

08003828 <__malloc_unlock>:
 8003828:	4801      	ldr	r0, [pc, #4]	@ (8003830 <__malloc_unlock+0x8>)
 800382a:	f7ff bf0a 	b.w	8003642 <__retarget_lock_release_recursive>
 800382e:	bf00      	nop
 8003830:	2000023c 	.word	0x2000023c

08003834 <__ssputs_r>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	688e      	ldr	r6, [r1, #8]
 800383a:	461f      	mov	r7, r3
 800383c:	42be      	cmp	r6, r7
 800383e:	680b      	ldr	r3, [r1, #0]
 8003840:	4682      	mov	sl, r0
 8003842:	460c      	mov	r4, r1
 8003844:	4690      	mov	r8, r2
 8003846:	d82d      	bhi.n	80038a4 <__ssputs_r+0x70>
 8003848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800384c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003850:	d026      	beq.n	80038a0 <__ssputs_r+0x6c>
 8003852:	6965      	ldr	r5, [r4, #20]
 8003854:	6909      	ldr	r1, [r1, #16]
 8003856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800385a:	eba3 0901 	sub.w	r9, r3, r1
 800385e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003862:	1c7b      	adds	r3, r7, #1
 8003864:	444b      	add	r3, r9
 8003866:	106d      	asrs	r5, r5, #1
 8003868:	429d      	cmp	r5, r3
 800386a:	bf38      	it	cc
 800386c:	461d      	movcc	r5, r3
 800386e:	0553      	lsls	r3, r2, #21
 8003870:	d527      	bpl.n	80038c2 <__ssputs_r+0x8e>
 8003872:	4629      	mov	r1, r5
 8003874:	f7ff ff52 	bl	800371c <_malloc_r>
 8003878:	4606      	mov	r6, r0
 800387a:	b360      	cbz	r0, 80038d6 <__ssputs_r+0xa2>
 800387c:	6921      	ldr	r1, [r4, #16]
 800387e:	464a      	mov	r2, r9
 8003880:	f000 fae8 	bl	8003e54 <memcpy>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800388a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	6126      	str	r6, [r4, #16]
 8003892:	6165      	str	r5, [r4, #20]
 8003894:	444e      	add	r6, r9
 8003896:	eba5 0509 	sub.w	r5, r5, r9
 800389a:	6026      	str	r6, [r4, #0]
 800389c:	60a5      	str	r5, [r4, #8]
 800389e:	463e      	mov	r6, r7
 80038a0:	42be      	cmp	r6, r7
 80038a2:	d900      	bls.n	80038a6 <__ssputs_r+0x72>
 80038a4:	463e      	mov	r6, r7
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	4632      	mov	r2, r6
 80038aa:	4641      	mov	r1, r8
 80038ac:	f000 faa8 	bl	8003e00 <memmove>
 80038b0:	68a3      	ldr	r3, [r4, #8]
 80038b2:	1b9b      	subs	r3, r3, r6
 80038b4:	60a3      	str	r3, [r4, #8]
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	4433      	add	r3, r6
 80038ba:	6023      	str	r3, [r4, #0]
 80038bc:	2000      	movs	r0, #0
 80038be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c2:	462a      	mov	r2, r5
 80038c4:	f000 fad4 	bl	8003e70 <_realloc_r>
 80038c8:	4606      	mov	r6, r0
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d1e0      	bne.n	8003890 <__ssputs_r+0x5c>
 80038ce:	6921      	ldr	r1, [r4, #16]
 80038d0:	4650      	mov	r0, sl
 80038d2:	f7ff feb7 	bl	8003644 <_free_r>
 80038d6:	230c      	movs	r3, #12
 80038d8:	f8ca 3000 	str.w	r3, [sl]
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e7e9      	b.n	80038be <__ssputs_r+0x8a>
	...

080038ec <_svfiprintf_r>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	4698      	mov	r8, r3
 80038f2:	898b      	ldrh	r3, [r1, #12]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	b09d      	sub	sp, #116	@ 0x74
 80038f8:	4607      	mov	r7, r0
 80038fa:	460d      	mov	r5, r1
 80038fc:	4614      	mov	r4, r2
 80038fe:	d510      	bpl.n	8003922 <_svfiprintf_r+0x36>
 8003900:	690b      	ldr	r3, [r1, #16]
 8003902:	b973      	cbnz	r3, 8003922 <_svfiprintf_r+0x36>
 8003904:	2140      	movs	r1, #64	@ 0x40
 8003906:	f7ff ff09 	bl	800371c <_malloc_r>
 800390a:	6028      	str	r0, [r5, #0]
 800390c:	6128      	str	r0, [r5, #16]
 800390e:	b930      	cbnz	r0, 800391e <_svfiprintf_r+0x32>
 8003910:	230c      	movs	r3, #12
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	b01d      	add	sp, #116	@ 0x74
 800391a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391e:	2340      	movs	r3, #64	@ 0x40
 8003920:	616b      	str	r3, [r5, #20]
 8003922:	2300      	movs	r3, #0
 8003924:	9309      	str	r3, [sp, #36]	@ 0x24
 8003926:	2320      	movs	r3, #32
 8003928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800392c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003930:	2330      	movs	r3, #48	@ 0x30
 8003932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ad0 <_svfiprintf_r+0x1e4>
 8003936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800393a:	f04f 0901 	mov.w	r9, #1
 800393e:	4623      	mov	r3, r4
 8003940:	469a      	mov	sl, r3
 8003942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003946:	b10a      	cbz	r2, 800394c <_svfiprintf_r+0x60>
 8003948:	2a25      	cmp	r2, #37	@ 0x25
 800394a:	d1f9      	bne.n	8003940 <_svfiprintf_r+0x54>
 800394c:	ebba 0b04 	subs.w	fp, sl, r4
 8003950:	d00b      	beq.n	800396a <_svfiprintf_r+0x7e>
 8003952:	465b      	mov	r3, fp
 8003954:	4622      	mov	r2, r4
 8003956:	4629      	mov	r1, r5
 8003958:	4638      	mov	r0, r7
 800395a:	f7ff ff6b 	bl	8003834 <__ssputs_r>
 800395e:	3001      	adds	r0, #1
 8003960:	f000 80a7 	beq.w	8003ab2 <_svfiprintf_r+0x1c6>
 8003964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003966:	445a      	add	r2, fp
 8003968:	9209      	str	r2, [sp, #36]	@ 0x24
 800396a:	f89a 3000 	ldrb.w	r3, [sl]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 809f 	beq.w	8003ab2 <_svfiprintf_r+0x1c6>
 8003974:	2300      	movs	r3, #0
 8003976:	f04f 32ff 	mov.w	r2, #4294967295
 800397a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800397e:	f10a 0a01 	add.w	sl, sl, #1
 8003982:	9304      	str	r3, [sp, #16]
 8003984:	9307      	str	r3, [sp, #28]
 8003986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800398a:	931a      	str	r3, [sp, #104]	@ 0x68
 800398c:	4654      	mov	r4, sl
 800398e:	2205      	movs	r2, #5
 8003990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003994:	484e      	ldr	r0, [pc, #312]	@ (8003ad0 <_svfiprintf_r+0x1e4>)
 8003996:	f7fc fc1b 	bl	80001d0 <memchr>
 800399a:	9a04      	ldr	r2, [sp, #16]
 800399c:	b9d8      	cbnz	r0, 80039d6 <_svfiprintf_r+0xea>
 800399e:	06d0      	lsls	r0, r2, #27
 80039a0:	bf44      	itt	mi
 80039a2:	2320      	movmi	r3, #32
 80039a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039a8:	0711      	lsls	r1, r2, #28
 80039aa:	bf44      	itt	mi
 80039ac:	232b      	movmi	r3, #43	@ 0x2b
 80039ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039b2:	f89a 3000 	ldrb.w	r3, [sl]
 80039b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80039b8:	d015      	beq.n	80039e6 <_svfiprintf_r+0xfa>
 80039ba:	9a07      	ldr	r2, [sp, #28]
 80039bc:	4654      	mov	r4, sl
 80039be:	2000      	movs	r0, #0
 80039c0:	f04f 0c0a 	mov.w	ip, #10
 80039c4:	4621      	mov	r1, r4
 80039c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ca:	3b30      	subs	r3, #48	@ 0x30
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d94b      	bls.n	8003a68 <_svfiprintf_r+0x17c>
 80039d0:	b1b0      	cbz	r0, 8003a00 <_svfiprintf_r+0x114>
 80039d2:	9207      	str	r2, [sp, #28]
 80039d4:	e014      	b.n	8003a00 <_svfiprintf_r+0x114>
 80039d6:	eba0 0308 	sub.w	r3, r0, r8
 80039da:	fa09 f303 	lsl.w	r3, r9, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	46a2      	mov	sl, r4
 80039e4:	e7d2      	b.n	800398c <_svfiprintf_r+0xa0>
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	1d19      	adds	r1, r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	9103      	str	r1, [sp, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bfbb      	ittet	lt
 80039f2:	425b      	neglt	r3, r3
 80039f4:	f042 0202 	orrlt.w	r2, r2, #2
 80039f8:	9307      	strge	r3, [sp, #28]
 80039fa:	9307      	strlt	r3, [sp, #28]
 80039fc:	bfb8      	it	lt
 80039fe:	9204      	strlt	r2, [sp, #16]
 8003a00:	7823      	ldrb	r3, [r4, #0]
 8003a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a04:	d10a      	bne.n	8003a1c <_svfiprintf_r+0x130>
 8003a06:	7863      	ldrb	r3, [r4, #1]
 8003a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a0a:	d132      	bne.n	8003a72 <_svfiprintf_r+0x186>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	9203      	str	r2, [sp, #12]
 8003a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a18:	3402      	adds	r4, #2
 8003a1a:	9305      	str	r3, [sp, #20]
 8003a1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ae0 <_svfiprintf_r+0x1f4>
 8003a20:	7821      	ldrb	r1, [r4, #0]
 8003a22:	2203      	movs	r2, #3
 8003a24:	4650      	mov	r0, sl
 8003a26:	f7fc fbd3 	bl	80001d0 <memchr>
 8003a2a:	b138      	cbz	r0, 8003a3c <_svfiprintf_r+0x150>
 8003a2c:	9b04      	ldr	r3, [sp, #16]
 8003a2e:	eba0 000a 	sub.w	r0, r0, sl
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	4082      	lsls	r2, r0
 8003a36:	4313      	orrs	r3, r2
 8003a38:	3401      	adds	r4, #1
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a40:	4824      	ldr	r0, [pc, #144]	@ (8003ad4 <_svfiprintf_r+0x1e8>)
 8003a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a46:	2206      	movs	r2, #6
 8003a48:	f7fc fbc2 	bl	80001d0 <memchr>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d036      	beq.n	8003abe <_svfiprintf_r+0x1d2>
 8003a50:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <_svfiprintf_r+0x1ec>)
 8003a52:	bb1b      	cbnz	r3, 8003a9c <_svfiprintf_r+0x1b0>
 8003a54:	9b03      	ldr	r3, [sp, #12]
 8003a56:	3307      	adds	r3, #7
 8003a58:	f023 0307 	bic.w	r3, r3, #7
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	9303      	str	r3, [sp, #12]
 8003a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a62:	4433      	add	r3, r6
 8003a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a66:	e76a      	b.n	800393e <_svfiprintf_r+0x52>
 8003a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	2001      	movs	r0, #1
 8003a70:	e7a8      	b.n	80039c4 <_svfiprintf_r+0xd8>
 8003a72:	2300      	movs	r3, #0
 8003a74:	3401      	adds	r4, #1
 8003a76:	9305      	str	r3, [sp, #20]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f04f 0c0a 	mov.w	ip, #10
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a84:	3a30      	subs	r2, #48	@ 0x30
 8003a86:	2a09      	cmp	r2, #9
 8003a88:	d903      	bls.n	8003a92 <_svfiprintf_r+0x1a6>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0c6      	beq.n	8003a1c <_svfiprintf_r+0x130>
 8003a8e:	9105      	str	r1, [sp, #20]
 8003a90:	e7c4      	b.n	8003a1c <_svfiprintf_r+0x130>
 8003a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a96:	4604      	mov	r4, r0
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e7f0      	b.n	8003a7e <_svfiprintf_r+0x192>
 8003a9c:	ab03      	add	r3, sp, #12
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <_svfiprintf_r+0x1f0>)
 8003aa4:	a904      	add	r1, sp, #16
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f3af 8000 	nop.w
 8003aac:	1c42      	adds	r2, r0, #1
 8003aae:	4606      	mov	r6, r0
 8003ab0:	d1d6      	bne.n	8003a60 <_svfiprintf_r+0x174>
 8003ab2:	89ab      	ldrh	r3, [r5, #12]
 8003ab4:	065b      	lsls	r3, r3, #25
 8003ab6:	f53f af2d 	bmi.w	8003914 <_svfiprintf_r+0x28>
 8003aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003abc:	e72c      	b.n	8003918 <_svfiprintf_r+0x2c>
 8003abe:	ab03      	add	r3, sp, #12
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <_svfiprintf_r+0x1f0>)
 8003ac6:	a904      	add	r1, sp, #16
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f000 f879 	bl	8003bc0 <_printf_i>
 8003ace:	e7ed      	b.n	8003aac <_svfiprintf_r+0x1c0>
 8003ad0:	08004080 	.word	0x08004080
 8003ad4:	0800408a 	.word	0x0800408a
 8003ad8:	00000000 	.word	0x00000000
 8003adc:	08003835 	.word	0x08003835
 8003ae0:	08004086 	.word	0x08004086

08003ae4 <_printf_common>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4616      	mov	r6, r2
 8003aea:	4698      	mov	r8, r3
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bfb8      	it	lt
 8003af8:	4613      	movlt	r3, r2
 8003afa:	6033      	str	r3, [r6, #0]
 8003afc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b00:	4607      	mov	r7, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	b10a      	cbz	r2, 8003b0a <_printf_common+0x26>
 8003b06:	3301      	adds	r3, #1
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	0699      	lsls	r1, r3, #26
 8003b0e:	bf42      	ittt	mi
 8003b10:	6833      	ldrmi	r3, [r6, #0]
 8003b12:	3302      	addmi	r3, #2
 8003b14:	6033      	strmi	r3, [r6, #0]
 8003b16:	6825      	ldr	r5, [r4, #0]
 8003b18:	f015 0506 	ands.w	r5, r5, #6
 8003b1c:	d106      	bne.n	8003b2c <_printf_common+0x48>
 8003b1e:	f104 0a19 	add.w	sl, r4, #25
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	6832      	ldr	r2, [r6, #0]
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	42ab      	cmp	r3, r5
 8003b2a:	dc26      	bgt.n	8003b7a <_printf_common+0x96>
 8003b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	3b00      	subs	r3, #0
 8003b34:	bf18      	it	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	0692      	lsls	r2, r2, #26
 8003b3a:	d42b      	bmi.n	8003b94 <_printf_common+0xb0>
 8003b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b40:	4641      	mov	r1, r8
 8003b42:	4638      	mov	r0, r7
 8003b44:	47c8      	blx	r9
 8003b46:	3001      	adds	r0, #1
 8003b48:	d01e      	beq.n	8003b88 <_printf_common+0xa4>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf02      	ittt	eq
 8003b56:	68e5      	ldreq	r5, [r4, #12]
 8003b58:	6833      	ldreq	r3, [r6, #0]
 8003b5a:	1aed      	subeq	r5, r5, r3
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	bf0c      	ite	eq
 8003b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b64:	2500      	movne	r5, #0
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bfc4      	itt	gt
 8003b6a:	1a9b      	subgt	r3, r3, r2
 8003b6c:	18ed      	addgt	r5, r5, r3
 8003b6e:	2600      	movs	r6, #0
 8003b70:	341a      	adds	r4, #26
 8003b72:	42b5      	cmp	r5, r6
 8003b74:	d11a      	bne.n	8003bac <_printf_common+0xc8>
 8003b76:	2000      	movs	r0, #0
 8003b78:	e008      	b.n	8003b8c <_printf_common+0xa8>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4652      	mov	r2, sl
 8003b7e:	4641      	mov	r1, r8
 8003b80:	4638      	mov	r0, r7
 8003b82:	47c8      	blx	r9
 8003b84:	3001      	adds	r0, #1
 8003b86:	d103      	bne.n	8003b90 <_printf_common+0xac>
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	3501      	adds	r5, #1
 8003b92:	e7c6      	b.n	8003b22 <_printf_common+0x3e>
 8003b94:	18e1      	adds	r1, r4, r3
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	2030      	movs	r0, #48	@ 0x30
 8003b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b9e:	4422      	add	r2, r4
 8003ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ba8:	3302      	adds	r3, #2
 8003baa:	e7c7      	b.n	8003b3c <_printf_common+0x58>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	47c8      	blx	r9
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0e6      	beq.n	8003b88 <_printf_common+0xa4>
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7d9      	b.n	8003b72 <_printf_common+0x8e>
	...

08003bc0 <_printf_i>:
 8003bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	7e0f      	ldrb	r7, [r1, #24]
 8003bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bc8:	2f78      	cmp	r7, #120	@ 0x78
 8003bca:	4691      	mov	r9, r2
 8003bcc:	4680      	mov	r8, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	469a      	mov	sl, r3
 8003bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bd6:	d807      	bhi.n	8003be8 <_printf_i+0x28>
 8003bd8:	2f62      	cmp	r7, #98	@ 0x62
 8003bda:	d80a      	bhi.n	8003bf2 <_printf_i+0x32>
 8003bdc:	2f00      	cmp	r7, #0
 8003bde:	f000 80d2 	beq.w	8003d86 <_printf_i+0x1c6>
 8003be2:	2f58      	cmp	r7, #88	@ 0x58
 8003be4:	f000 80b9 	beq.w	8003d5a <_printf_i+0x19a>
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf0:	e03a      	b.n	8003c68 <_printf_i+0xa8>
 8003bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bf6:	2b15      	cmp	r3, #21
 8003bf8:	d8f6      	bhi.n	8003be8 <_printf_i+0x28>
 8003bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8003c00 <_printf_i+0x40>)
 8003bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c00:	08003c59 	.word	0x08003c59
 8003c04:	08003c6d 	.word	0x08003c6d
 8003c08:	08003be9 	.word	0x08003be9
 8003c0c:	08003be9 	.word	0x08003be9
 8003c10:	08003be9 	.word	0x08003be9
 8003c14:	08003be9 	.word	0x08003be9
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003be9 	.word	0x08003be9
 8003c20:	08003be9 	.word	0x08003be9
 8003c24:	08003be9 	.word	0x08003be9
 8003c28:	08003be9 	.word	0x08003be9
 8003c2c:	08003d6d 	.word	0x08003d6d
 8003c30:	08003c97 	.word	0x08003c97
 8003c34:	08003d27 	.word	0x08003d27
 8003c38:	08003be9 	.word	0x08003be9
 8003c3c:	08003be9 	.word	0x08003be9
 8003c40:	08003d8f 	.word	0x08003d8f
 8003c44:	08003be9 	.word	0x08003be9
 8003c48:	08003c97 	.word	0x08003c97
 8003c4c:	08003be9 	.word	0x08003be9
 8003c50:	08003be9 	.word	0x08003be9
 8003c54:	08003d2f 	.word	0x08003d2f
 8003c58:	6833      	ldr	r3, [r6, #0]
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6032      	str	r2, [r6, #0]
 8003c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e09d      	b.n	8003da8 <_printf_i+0x1e8>
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	6820      	ldr	r0, [r4, #0]
 8003c70:	1d19      	adds	r1, r3, #4
 8003c72:	6031      	str	r1, [r6, #0]
 8003c74:	0606      	lsls	r6, r0, #24
 8003c76:	d501      	bpl.n	8003c7c <_printf_i+0xbc>
 8003c78:	681d      	ldr	r5, [r3, #0]
 8003c7a:	e003      	b.n	8003c84 <_printf_i+0xc4>
 8003c7c:	0645      	lsls	r5, r0, #25
 8003c7e:	d5fb      	bpl.n	8003c78 <_printf_i+0xb8>
 8003c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	da03      	bge.n	8003c90 <_printf_i+0xd0>
 8003c88:	232d      	movs	r3, #45	@ 0x2d
 8003c8a:	426d      	negs	r5, r5
 8003c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c90:	4859      	ldr	r0, [pc, #356]	@ (8003df8 <_printf_i+0x238>)
 8003c92:	230a      	movs	r3, #10
 8003c94:	e011      	b.n	8003cba <_printf_i+0xfa>
 8003c96:	6821      	ldr	r1, [r4, #0]
 8003c98:	6833      	ldr	r3, [r6, #0]
 8003c9a:	0608      	lsls	r0, r1, #24
 8003c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca0:	d402      	bmi.n	8003ca8 <_printf_i+0xe8>
 8003ca2:	0649      	lsls	r1, r1, #25
 8003ca4:	bf48      	it	mi
 8003ca6:	b2ad      	uxthmi	r5, r5
 8003ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003caa:	4853      	ldr	r0, [pc, #332]	@ (8003df8 <_printf_i+0x238>)
 8003cac:	6033      	str	r3, [r6, #0]
 8003cae:	bf14      	ite	ne
 8003cb0:	230a      	movne	r3, #10
 8003cb2:	2308      	moveq	r3, #8
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cba:	6866      	ldr	r6, [r4, #4]
 8003cbc:	60a6      	str	r6, [r4, #8]
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	bfa2      	ittt	ge
 8003cc2:	6821      	ldrge	r1, [r4, #0]
 8003cc4:	f021 0104 	bicge.w	r1, r1, #4
 8003cc8:	6021      	strge	r1, [r4, #0]
 8003cca:	b90d      	cbnz	r5, 8003cd0 <_printf_i+0x110>
 8003ccc:	2e00      	cmp	r6, #0
 8003cce:	d04b      	beq.n	8003d68 <_printf_i+0x1a8>
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cd6:	fb03 5711 	mls	r7, r3, r1, r5
 8003cda:	5dc7      	ldrb	r7, [r0, r7]
 8003cdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce0:	462f      	mov	r7, r5
 8003ce2:	42bb      	cmp	r3, r7
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	d9f4      	bls.n	8003cd2 <_printf_i+0x112>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d10b      	bne.n	8003d04 <_printf_i+0x144>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	07df      	lsls	r7, r3, #31
 8003cf0:	d508      	bpl.n	8003d04 <_printf_i+0x144>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	6861      	ldr	r1, [r4, #4]
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	bfde      	ittt	le
 8003cfa:	2330      	movle	r3, #48	@ 0x30
 8003cfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d04:	1b92      	subs	r2, r2, r6
 8003d06:	6122      	str	r2, [r4, #16]
 8003d08:	f8cd a000 	str.w	sl, [sp]
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	aa03      	add	r2, sp, #12
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fee6 	bl	8003ae4 <_printf_common>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d14a      	bne.n	8003db2 <_printf_i+0x1f2>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	b004      	add	sp, #16
 8003d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	4833      	ldr	r0, [pc, #204]	@ (8003dfc <_printf_i+0x23c>)
 8003d30:	2778      	movs	r7, #120	@ 0x78
 8003d32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6831      	ldr	r1, [r6, #0]
 8003d3a:	061f      	lsls	r7, r3, #24
 8003d3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d40:	d402      	bmi.n	8003d48 <_printf_i+0x188>
 8003d42:	065f      	lsls	r7, r3, #25
 8003d44:	bf48      	it	mi
 8003d46:	b2ad      	uxthmi	r5, r5
 8003d48:	6031      	str	r1, [r6, #0]
 8003d4a:	07d9      	lsls	r1, r3, #31
 8003d4c:	bf44      	itt	mi
 8003d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d52:	6023      	strmi	r3, [r4, #0]
 8003d54:	b11d      	cbz	r5, 8003d5e <_printf_i+0x19e>
 8003d56:	2310      	movs	r3, #16
 8003d58:	e7ac      	b.n	8003cb4 <_printf_i+0xf4>
 8003d5a:	4827      	ldr	r0, [pc, #156]	@ (8003df8 <_printf_i+0x238>)
 8003d5c:	e7e9      	b.n	8003d32 <_printf_i+0x172>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f023 0320 	bic.w	r3, r3, #32
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	e7f6      	b.n	8003d56 <_printf_i+0x196>
 8003d68:	4616      	mov	r6, r2
 8003d6a:	e7bd      	b.n	8003ce8 <_printf_i+0x128>
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	6961      	ldr	r1, [r4, #20]
 8003d72:	1d18      	adds	r0, r3, #4
 8003d74:	6030      	str	r0, [r6, #0]
 8003d76:	062e      	lsls	r6, r5, #24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0x1c0>
 8003d7c:	6019      	str	r1, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <_printf_i+0x1c6>
 8003d80:	0668      	lsls	r0, r5, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0x1bc>
 8003d84:	8019      	strh	r1, [r3, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	4616      	mov	r6, r2
 8003d8c:	e7bc      	b.n	8003d08 <_printf_i+0x148>
 8003d8e:	6833      	ldr	r3, [r6, #0]
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	6032      	str	r2, [r6, #0]
 8003d94:	681e      	ldr	r6, [r3, #0]
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f7fc fa18 	bl	80001d0 <memchr>
 8003da0:	b108      	cbz	r0, 8003da6 <_printf_i+0x1e6>
 8003da2:	1b80      	subs	r0, r0, r6
 8003da4:	6060      	str	r0, [r4, #4]
 8003da6:	6863      	ldr	r3, [r4, #4]
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	2300      	movs	r3, #0
 8003dac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db0:	e7aa      	b.n	8003d08 <_printf_i+0x148>
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	4632      	mov	r2, r6
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d0ad      	beq.n	8003d1c <_printf_i+0x15c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	079b      	lsls	r3, r3, #30
 8003dc4:	d413      	bmi.n	8003dee <_printf_i+0x22e>
 8003dc6:	68e0      	ldr	r0, [r4, #12]
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	bfb8      	it	lt
 8003dce:	4618      	movlt	r0, r3
 8003dd0:	e7a6      	b.n	8003d20 <_printf_i+0x160>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	47d0      	blx	sl
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d09d      	beq.n	8003d1c <_printf_i+0x15c>
 8003de0:	3501      	adds	r5, #1
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	9903      	ldr	r1, [sp, #12]
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dcf2      	bgt.n	8003dd2 <_printf_i+0x212>
 8003dec:	e7eb      	b.n	8003dc6 <_printf_i+0x206>
 8003dee:	2500      	movs	r5, #0
 8003df0:	f104 0619 	add.w	r6, r4, #25
 8003df4:	e7f5      	b.n	8003de2 <_printf_i+0x222>
 8003df6:	bf00      	nop
 8003df8:	08004091 	.word	0x08004091
 8003dfc:	080040a2 	.word	0x080040a2

08003e00 <memmove>:
 8003e00:	4288      	cmp	r0, r1
 8003e02:	b510      	push	{r4, lr}
 8003e04:	eb01 0402 	add.w	r4, r1, r2
 8003e08:	d902      	bls.n	8003e10 <memmove+0x10>
 8003e0a:	4284      	cmp	r4, r0
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	d807      	bhi.n	8003e20 <memmove+0x20>
 8003e10:	1e43      	subs	r3, r0, #1
 8003e12:	42a1      	cmp	r1, r4
 8003e14:	d008      	beq.n	8003e28 <memmove+0x28>
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1e:	e7f8      	b.n	8003e12 <memmove+0x12>
 8003e20:	4402      	add	r2, r0
 8003e22:	4601      	mov	r1, r0
 8003e24:	428a      	cmp	r2, r1
 8003e26:	d100      	bne.n	8003e2a <memmove+0x2a>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e32:	e7f7      	b.n	8003e24 <memmove+0x24>

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	@ (8003e50 <_sbrk_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fe f84a 	bl	8001ed8 <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	20000238 	.word	0x20000238

08003e54 <memcpy>:
 8003e54:	440a      	add	r2, r1
 8003e56:	4291      	cmp	r1, r2
 8003e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e5c:	d100      	bne.n	8003e60 <memcpy+0xc>
 8003e5e:	4770      	bx	lr
 8003e60:	b510      	push	{r4, lr}
 8003e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	d1f9      	bne.n	8003e62 <memcpy+0xe>
 8003e6e:	bd10      	pop	{r4, pc}

08003e70 <_realloc_r>:
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	4680      	mov	r8, r0
 8003e76:	4615      	mov	r5, r2
 8003e78:	460c      	mov	r4, r1
 8003e7a:	b921      	cbnz	r1, 8003e86 <_realloc_r+0x16>
 8003e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	4611      	mov	r1, r2
 8003e82:	f7ff bc4b 	b.w	800371c <_malloc_r>
 8003e86:	b92a      	cbnz	r2, 8003e94 <_realloc_r+0x24>
 8003e88:	f7ff fbdc 	bl	8003644 <_free_r>
 8003e8c:	2400      	movs	r4, #0
 8003e8e:	4620      	mov	r0, r4
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	f000 f81a 	bl	8003ecc <_malloc_usable_size_r>
 8003e98:	4285      	cmp	r5, r0
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	d802      	bhi.n	8003ea4 <_realloc_r+0x34>
 8003e9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ea2:	d8f4      	bhi.n	8003e8e <_realloc_r+0x1e>
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	f7ff fc38 	bl	800371c <_malloc_r>
 8003eac:	4607      	mov	r7, r0
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d0ec      	beq.n	8003e8c <_realloc_r+0x1c>
 8003eb2:	42b5      	cmp	r5, r6
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	bf28      	it	cs
 8003eba:	4632      	movcs	r2, r6
 8003ebc:	f7ff ffca 	bl	8003e54 <memcpy>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f7ff fbbe 	bl	8003644 <_free_r>
 8003ec8:	463c      	mov	r4, r7
 8003eca:	e7e0      	b.n	8003e8e <_realloc_r+0x1e>

08003ecc <_malloc_usable_size_r>:
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f18      	subs	r0, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbc      	itt	lt
 8003ed6:	580b      	ldrlt	r3, [r1, r0]
 8003ed8:	18c0      	addlt	r0, r0, r3
 8003eda:	4770      	bx	lr

08003edc <_init>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr

08003ee8 <_fini>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr
