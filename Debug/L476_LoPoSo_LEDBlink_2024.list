
L476_LoPoSo_LEDBlink_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a0  080021a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080021a0  080021a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a0  080021a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a0  080021a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080021a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080021ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080021ac  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071c9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001660  00000000  00000000  000271fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  00028860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020323  00000000  00000000  00029868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005dcc  00000000  00000000  00049b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b01c4  00000000  00000000  0004f957  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffb1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002154  00000000  00000000  000ffb98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002140 	.word	0x08002140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002140 	.word	0x08002140

080001c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db0a      	blt.n	80001f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	490c      	ldr	r1, [pc, #48]	; (8000214 <__NVIC_SetPriority+0x4c>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	0112      	lsls	r2, r2, #4
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f0:	e00a      	b.n	8000208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4908      	ldr	r1, [pc, #32]	; (8000218 <__NVIC_SetPriority+0x50>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f003 030f 	and.w	r3, r3, #15
 80001fe:	3b04      	subs	r3, #4
 8000200:	0112      	lsls	r2, r2, #4
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	440b      	add	r3, r1
 8000206:	761a      	strb	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000e100 	.word	0xe000e100
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <LL_RCC_MSI_Enable+0x1c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <LL_RCC_MSI_Enable+0x1c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000

0800023c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <LL_RCC_MSI_IsReady+0x20>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b02      	cmp	r3, #2
 800024a:	d101      	bne.n	8000250 <LL_RCC_MSI_IsReady+0x14>
 800024c:	2301      	movs	r3, #1
 800024e:	e000      	b.n	8000252 <LL_RCC_MSI_IsReady+0x16>
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <LL_RCC_SetSysClkSource+0x24>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	f023 0203 	bic.w	r2, r3, #3
 8000270:	4904      	ldr	r1, [pc, #16]	; (8000284 <LL_RCC_SetSysClkSource+0x24>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4313      	orrs	r3, r2
 8000276:	608b      	str	r3, [r1, #8]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <LL_RCC_GetSysClkSource+0x18>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f003 030c 	and.w	r3, r3, #12
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	608b      	str	r3, [r1, #8]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80002dc:	4904      	ldr	r1, [pc, #16]	; (80002f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	608b      	str	r3, [r1, #8]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000304:	4904      	ldr	r1, [pc, #16]	; (8000318 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4313      	orrs	r3, r2
 800030a:	608b      	str	r3, [r1, #8]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000

0800031c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <LL_RCC_PLL_Enable+0x1c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <LL_RCC_PLL_Enable+0x1c>)
 8000326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800032a:	6013      	str	r3, [r2, #0]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <LL_RCC_PLL_IsReady+0x24>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800034c:	d101      	bne.n	8000352 <LL_RCC_PLL_IsReady+0x16>
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <LL_RCC_PLL_IsReady+0x18>
 8000352:	2300      	movs	r3, #0
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000

08000364 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000374:	68da      	ldr	r2, [r3, #12]
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000378:	4013      	ands	r3, r2
 800037a:	68f9      	ldr	r1, [r7, #12]
 800037c:	68ba      	ldr	r2, [r7, #8]
 800037e:	4311      	orrs	r1, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	0212      	lsls	r2, r2, #8
 8000384:	4311      	orrs	r1, r2
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	430a      	orrs	r2, r1
 800038a:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800038c:	4313      	orrs	r3, r2
 800038e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000
 80003a0:	f9ff808c 	.word	0xf9ff808c

080003a4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80003ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b2:	60d3      	str	r3, [r2, #12]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80003d4:	4904      	ldr	r1, [pc, #16]	; (80003e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4313      	orrs	r3, r2
 80003da:	600b      	str	r3, [r1, #0]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40007000 	.word	0x40007000

080003ec <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LL_FLASH_SetLatency+0x24>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f023 0207 	bic.w	r2, r3, #7
 80003fc:	4904      	ldr	r1, [pc, #16]	; (8000410 <LL_FLASH_SetLatency+0x24>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4313      	orrs	r3, r2
 8000402:	600b      	str	r3, [r1, #0]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40022000 	.word	0x40022000

08000414 <SystemClock_Config_80M>:
  *            APB2 Prescaler                 = 1
  *            MSI Frequency(Hz)              = 4000000
  *            Flash Latency(WS)              = 4
  */
void SystemClock_Config_80M()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/* MSI configuration and activation */
	LL_RCC_MSI_Enable();			// normalement il est deja enabled
 8000418:	f7ff ff00 	bl	800021c <LL_RCC_MSI_Enable>
	while	(LL_RCC_MSI_IsReady() != 1)	// c'est pour le cas ou on l'aurait change
 800041c:	bf00      	nop
 800041e:	f7ff ff0d 	bl	800023c <LL_RCC_MSI_IsReady>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d1fa      	bne.n	800041e <SystemClock_Config_80M+0xa>
		{ }

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);	// 4 pour 80MHz
 8000428:	2004      	movs	r0, #4
 800042a:	f7ff ffdf 	bl	80003ec <LL_FLASH_SetLatency>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1); //réglage tension régulateur interne
 800042e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000432:	f7ff ffc7 	bl	80003c4 <LL_PWR_SetRegulVoltageScaling>

	// demarrer la PLL principale 4MHz --> 80 MHz
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000436:	2300      	movs	r3, #0
 8000438:	2228      	movs	r2, #40	; 0x28
 800043a:	2100      	movs	r1, #0
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff ff91 	bl	8000364 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000442:	f7ff ff6b 	bl	800031c <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8000446:	f7ff ffad 	bl	80003a4 <LL_RCC_PLL_EnableDomain_SYS>
	while	( LL_RCC_PLL_IsReady() != 1 )
 800044a:	bf00      	nop
 800044c:	f7ff ff76 	bl	800033c <LL_RCC_PLL_IsReady>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d1fa      	bne.n	800044c <SystemClock_Config_80M+0x38>
		{ }

	// connecter Sysclk sur cette PLL
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ff24 	bl	80002a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800045c:	2003      	movs	r0, #3
 800045e:	f7ff feff 	bl	8000260 <LL_RCC_SetSysClkSource>
	while	( LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 8000462:	bf00      	nop
 8000464:	f7ff ff10 	bl	8000288 <LL_RCC_GetSysClkSource>
 8000468:	4603      	mov	r3, r0
 800046a:	2b0c      	cmp	r3, #12
 800046c:	d1fa      	bne.n	8000464 <SystemClock_Config_80M+0x50>
		{ }

	/* Set APB1 & APB2 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff2c 	bl	80002cc <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff3d 	bl	80002f4 <LL_RCC_SetAPB2Prescaler>

	//update global variable SystemCoreClock --> give access to CPU clock frequency.
	LL_SetSystemCoreClock(80000000);
 800047a:	4802      	ldr	r0, [pc, #8]	; (8000484 <SystemClock_Config_80M+0x70>)
 800047c:	f001 fe24 	bl	80020c8 <LL_SetSystemCoreClock>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	04c4b400 	.word	0x04c4b400

08000488 <mySystick>:


// config systick avec interrupt. L'argument periode_en_ticks indique la période de débordement
//du Systick, donnée en nombre de périodes du buc clock.
void mySystick( unsigned int periode_en_ticks )
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// periode
	SysTick->LOAD  = periode_en_ticks - 1;
 8000490:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <mySystick+0x3c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3b01      	subs	r3, #1
 8000496:	6053      	str	r3, [r2, #4]

	// priorite
	NVIC_SetPriority( SysTick_IRQn, 7 );
 8000498:	2107      	movs	r1, #7
 800049a:	f04f 30ff 	mov.w	r0, #4294967295
 800049e:	f7ff fe93 	bl	80001c8 <__NVIC_SetPriority>
	// init counter
	SysTick->VAL = 0;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <mySystick+0x3c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
	// prescale (0 ===> %8)
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <mySystick+0x3c>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	601a      	str	r2, [r3, #0]
	// enable timer, enable interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <mySystick+0x3c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <mySystick+0x3c>)
 80004b4:	f043 0303 	orr.w	r3, r3, #3
 80004b8:	6013      	str	r3, [r2, #0]
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	e000e010 	.word	0xe000e010

080004c8 <__NVIC_GetPriorityGrouping>:
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	0a1b      	lsrs	r3, r3, #8
 80004d2:	f003 0307 	and.w	r3, r3, #7
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <__NVIC_EnableIRQ>:
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	db0b      	blt.n	800050e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	f003 021f 	and.w	r2, r3, #31
 80004fc:	4907      	ldr	r1, [pc, #28]	; (800051c <__NVIC_EnableIRQ+0x38>)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	095b      	lsrs	r3, r3, #5
 8000504:	2001      	movs	r0, #1
 8000506:	fa00 f202 	lsl.w	r2, r0, r2
 800050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000e100 	.word	0xe000e100

08000520 <__NVIC_SetPriority>:
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800052c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000530:	2b00      	cmp	r3, #0
 8000532:	db0a      	blt.n	800054a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2da      	uxtb	r2, r3
 8000538:	490c      	ldr	r1, [pc, #48]	; (800056c <__NVIC_SetPriority+0x4c>)
 800053a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053e:	0112      	lsls	r2, r2, #4
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	440b      	add	r3, r1
 8000544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000548:	e00a      	b.n	8000560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4908      	ldr	r1, [pc, #32]	; (8000570 <__NVIC_SetPriority+0x50>)
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	3b04      	subs	r3, #4
 8000558:	0112      	lsls	r2, r2, #4
 800055a:	b2d2      	uxtb	r2, r2
 800055c:	440b      	add	r3, r1
 800055e:	761a      	strb	r2, [r3, #24]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000e100 	.word	0xe000e100
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000574:	b480      	push	{r7}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	f1c3 0307 	rsb	r3, r3, #7
 800058e:	2b04      	cmp	r3, #4
 8000590:	bf28      	it	cs
 8000592:	2304      	movcs	r3, #4
 8000594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	3304      	adds	r3, #4
 800059a:	2b06      	cmp	r3, #6
 800059c:	d902      	bls.n	80005a4 <NVIC_EncodePriority+0x30>
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3b03      	subs	r3, #3
 80005a2:	e000      	b.n	80005a6 <NVIC_EncodePriority+0x32>
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	43da      	mvns	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	401a      	ands	r2, r3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43d9      	mvns	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	4313      	orrs	r3, r2
         );
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3724      	adds	r7, #36	; 0x24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800060c:	b480      	push	{r7}
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa93 f3a3 	rbit	r3, r3
 8000626:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000632:	2320      	movs	r3, #32
 8000634:	e003      	b.n	800063e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	fab3 f383 	clz	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	2103      	movs	r1, #3
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	401a      	ands	r2, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	fa93 f3a3 	rbit	r3, r3
 8000654:	61fb      	str	r3, [r7, #28]
  return result;
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000660:	2320      	movs	r3, #32
 8000662:	e003      	b.n	800066c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	431a      	orrs	r2, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	372c      	adds	r7, #44	; 0x2c
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000686:	b480      	push	{r7}
 8000688:	b08b      	sub	sp, #44	; 0x2c
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	fa93 f3a3 	rbit	r3, r3
 80006a0:	613b      	str	r3, [r7, #16]
  return result;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006ac:	2320      	movs	r3, #32
 80006ae:	e003      	b.n	80006b8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	2103      	movs	r1, #3
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	401a      	ands	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	fa93 f3a3 	rbit	r3, r3
 80006ce:	61fb      	str	r3, [r7, #28]
  return result;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80006da:	2320      	movs	r3, #32
 80006dc:	e003      	b.n	80006e6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	fab3 f383 	clz	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	431a      	orrs	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	60da      	str	r2, [r3, #12]
}
 80006f4:	bf00      	nop
 80006f6:	372c      	adds	r7, #44	; 0x2c
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	691a      	ldr	r2, [r3, #16]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	4013      	ands	r3, r2
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d101      	bne.n	800071c <LL_GPIO_IsInputPinSet+0x1c>
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <LL_GPIO_IsInputPinSet+0x1e>
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	619a      	str	r2, [r3, #24]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <LL_SYSCFG_SetEXTISource>:
{
 8000764:	b480      	push	{r7}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <LL_SYSCFG_SetEXTISource+0x68>)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	3302      	adds	r3, #2
 8000776:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	43db      	mvns	r3, r3
 8000780:	ea02 0103 	and.w	r1, r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	0c1b      	lsrs	r3, r3, #16
 8000788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	fa93 f3a3 	rbit	r3, r3
 8000790:	60fb      	str	r3, [r7, #12]
  return result;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 800079c:	2320      	movs	r3, #32
 800079e:	e003      	b.n	80007a8 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	fa03 f202 	lsl.w	r2, r3, r2
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <LL_SYSCFG_SetEXTISource+0x68>)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	430a      	orrs	r2, r1
 80007b8:	3302      	adds	r3, #2
 80007ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007be:	bf00      	nop
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40010000 	.word	0x40010000

080007d0 <GPIO_init>:
//#include "options.h"
#include "gpio.h"


void GPIO_init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
	  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]

	  /* GPIO Ports Clock Enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fef2 	bl	80005dc <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff feef 	bl	80005dc <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff feec 	bl	80005dc <LL_AHB2_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, nRF_CSN_Pin|nRF_CE_Pin);
 8000804:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f7ff ff9b 	bl	8000746 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 8000810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000814:	483c      	ldr	r0, [pc, #240]	; (8000908 <GPIO_init+0x138>)
 8000816:	f7ff ff96 	bl	8000746 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(Clock_Monitor_GPIO_Port, Clock_Monitor_Pin);
 800081a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081e:	483b      	ldr	r0, [pc, #236]	; (800090c <GPIO_init+0x13c>)
 8000820:	f7ff ff91 	bl	8000746 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = User_Button_Pin;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4835      	ldr	r0, [pc, #212]	; (800090c <GPIO_init+0x13c>)
 8000838:	f000 febd 	bl	80015b6 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = nRF_CSN_Pin|nRF_CE_Pin;
 800083c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000840:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000842:	2301      	movs	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085a:	f000 feac 	bl	80015b6 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = User_LED_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000864:	2301      	movs	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4823      	ldr	r0, [pc, #140]	; (8000908 <GPIO_init+0x138>)
 800087a:	f000 fe9c 	bl	80015b6 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = Clock_Monitor_Pin;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000884:	2301      	movs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(Clock_Monitor_GPIO_Port, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <GPIO_init+0x13c>)
 800089a:	f000 fe8c 	bl	80015b6 <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 800089e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff ff5e 	bl	8000764 <LL_SYSCFG_SetEXTISource>

	  /**/
	  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
	  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
	  EXTI_InitStruct.LineCommand = ENABLE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80008bc:	2302      	movs	r3, #2
 80008be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  LL_EXTI_Init(&EXTI_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fc3e 	bl	8001148 <LL_EXTI_Init>

	  /**/
	  LL_GPIO_SetPinPull(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_PULL_UP);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <GPIO_init+0x138>)
 80008d2:	f7ff fed8 	bl	8000686 <LL_GPIO_SetPinPull>

	  /**/
	  LL_GPIO_SetPinMode(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_MODE_INPUT);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <GPIO_init+0x138>)
 80008dc:	f7ff fe96 	bl	800060c <LL_GPIO_SetPinMode>

	  /* EXTI interrupt init*/
	  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008e0:	f7ff fdf2 	bl	80004c8 <__NVIC_GetPriorityGrouping>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe42 	bl	8000574 <NVIC_EncodePriority>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4619      	mov	r1, r3
 80008f4:	2006      	movs	r0, #6
 80008f6:	f7ff fe13 	bl	8000520 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(EXTI0_IRQn);
 80008fa:	2006      	movs	r0, #6
 80008fc:	f7ff fdf2 	bl	80004e4 <__NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800

08000910 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if	( val )
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <LED_GREEN+0x1a>
		LL_GPIO_SetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <LED_GREEN+0x2c>)
 8000924:	f7ff ff01 	bl	800072a <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
}
 8000928:	e004      	b.n	8000934 <LED_GREEN+0x24>
	else	LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 800092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <LED_GREEN+0x2c>)
 8000930:	f7ff ff09 	bl	8000746 <LL_GPIO_ResetOutputPin>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	48000400 	.word	0x48000400

08000940 <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	return ( !LL_GPIO_IsInputPinSet(User_Button_GPIO_Port, User_Button_Pin) );
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <BLUE_BUTTON+0x20>)
 800094a:	f7ff fed9 	bl	8000700 <LL_GPIO_IsInputPinSet>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	48000800 	.word	0x48000800

08000964 <__NVIC_SetPriorityGrouping>:
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4013      	ands	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000

08000a0c <main>:
volatile int old_blue = 0;
volatile int expe = 0; //pour la sauvegarde du numéro de l'expérience


int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /*clock domains activation*/
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff ffe3 	bl	80009dc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000a1a:	f7ff ffc7 	bl	80009ac <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f7ff ffa0 	bl	8000964 <__NVIC_SetPriorityGrouping>

  // config GPIO
  GPIO_init();
 8000a24:	f7ff fed4 	bl	80007d0 <GPIO_init>
  //config clock
  SystemClock_Config_80M();
 8000a28:	f7ff fcf4 	bl	8000414 <SystemClock_Config_80M>
  //config bus SPI1 (pour la communication avec le transceiver nRF24L01)
  SPI1_Init();
 8000a2c:	f000 f8a4 	bl	8000b78 <SPI1_Init>
  //config USART2
  USART2_Init();
 8000a30:	f000 f9e0 	bl	8000df4 <USART2_Init>

  // config systick avec interrupt
  mySystick( SystemCoreClock / 100 );	// 100 Hz --> 10 ms
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <main+0x3c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <main+0x40>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fd21 	bl	8000488 <mySystick>

  while (1)
 8000a46:	e7fe      	b.n	8000a46 <main+0x3a>
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	51eb851f 	.word	0x51eb851f

08000a50 <SysTick_Handler>:
}

// systick interrupt handler --> allumage LED toutes les 2 s pendant 50 ms.
//Scrutation de l'état du bouton bleu  (pas d'action à ce stade).
void SysTick_Handler()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	unsigned int subticks;

	//scrutation bouton bleu
	ticks += 1;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <SysTick_Handler+0x70>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <SysTick_Handler+0x70>)
 8000a5e:	6013      	str	r3, [r2, #0]
	if	( BLUE_BUTTON() )
 8000a60:	f7ff ff6e 	bl	8000940 <BLUE_BUTTON>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00a      	beq.n	8000a80 <SysTick_Handler+0x30>
		{
		if	( old_blue == 0 )
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <SysTick_Handler+0x74>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SysTick_Handler+0x28>
			blue_mode = 1;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <SysTick_Handler+0x78>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
		old_blue = 1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <SysTick_Handler+0x74>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e002      	b.n	8000a86 <SysTick_Handler+0x36>
		}
	else 	old_blue = 0;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <SysTick_Handler+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]

	//gestion de l'allumage de la LED
	subticks = ticks % 200;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <SysTick_Handler+0x70>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <SysTick_Handler+0x7c>)
 8000a8c:	fba2 1203 	umull	r1, r2, r2, r3
 8000a90:	0992      	lsrs	r2, r2, #6
 8000a92:	21c8      	movs	r1, #200	; 0xc8
 8000a94:	fb01 f202 	mul.w	r2, r1, r2
 8000a98:	1a9b      	subs	r3, r3, r2
 8000a9a:	607b      	str	r3, [r7, #4]
	if	( subticks == 0 )
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <SysTick_Handler+0x5a>
		LED_GREEN(1);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff ff34 	bl	8000910 <LED_GREEN>
	else if	( subticks == 5 )
		LED_GREEN(0);
}
 8000aa8:	e005      	b.n	8000ab6 <SysTick_Handler+0x66>
	else if	( subticks == 5 )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b05      	cmp	r3, #5
 8000aae:	d102      	bne.n	8000ab6 <SysTick_Handler+0x66>
		LED_GREEN(0);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff ff2d 	bl	8000910 <LED_GREEN>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000020 	.word	0x20000020
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	20000024 	.word	0x20000024
 8000acc:	51eb851f 	.word	0x51eb851f

08000ad0 <LL_AHB2_GRP1_EnableClock>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4013      	ands	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000

08000b00 <LL_APB2_GRP1_EnableClock>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000

08000b30 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f023 0210 	bic.w	r2, r3, #16
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	605a      	str	r2, [r3, #4]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f023 0208 	bic.w	r2, r3, #8
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	605a      	str	r2, [r3, #4]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SPI1_Init>:
// > mode master, full duplex
// > 8 bits
// > pin NSS généré logiciellement
// > bit rate = 5 Mbps --> avec un bus clock à 80 MHz le prescaler est réglé à 16.
void SPI1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	; 0x40
 8000b7c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	2228      	movs	r2, #40	; 0x28
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fad2 	bl	8002130 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000b9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ba0:	f7ff ffae 	bl	8000b00 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff ff93 	bl	8000ad0 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000baa:	23e0      	movs	r3, #224	; 0xe0
 8000bac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f000 fcf4 	bl	80015b6 <LL_GPIO_Init>

  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000bd2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000bd6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000bd8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bdc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000bec:	2318      	movs	r3, #24
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <SPI1_Init+0xa8>)
 8000c04:	f001 f925 	bl	8001e52 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <SPI1_Init+0xa8>)
 8000c0c:	f7ff ff90 	bl	8000b30 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <SPI1_Init+0xa8>)
 8000c12:	f7ff ffa0 	bl	8000b56 <LL_SPI_DisableNSSPulseMgt>
}
 8000c16:	bf00      	nop
 8000c18:	3740      	adds	r7, #64	; 0x40
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40013000 	.word	0x40013000

08000c24 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4013      	ands	r3, r2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d101      	bne.n	8000c3e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40010400 	.word	0x40010400

08000c50 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6153      	str	r3, [r2, #20]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010400 	.word	0x40010400

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ffad 	bl	8000c24 <LL_EXTI_IsActiveFlag_0_31>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff ffbd 	bl	8000c50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <SystemInit+0x64>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <SystemInit+0x64>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <SystemInit+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <SystemInit+0x68>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <SystemInit+0x68>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <SystemInit+0x68>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <SystemInit+0x68>)
 8000d08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <SystemInit+0x68>)
 8000d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SystemInit+0x68>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <SystemInit+0x68>)
 8000d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <SystemInit+0x68>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SystemInit+0x64>)
 8000d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d32:	609a      	str	r2, [r3, #8]
#endif
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f043 0201 	orr.w	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_AHB2_GRP1_EnableClock>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <LL_APB1_GRP1_EnableClock>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <USART2_Init>:
#include "stm32l4xx_ll_gpio.h"


//Initialisation de l'USART2.
void USART2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e22:	f7ff ffcf 	bl	8000dc4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff ffb4 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e40:	2307      	movs	r3, #7
 8000e42:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f000 fbb3 	bl	80015b6 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8000e50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e54:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e62:	230c      	movs	r3, #12
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <USART2_Init+0x9c>)
 8000e76:	f001 f8ab 	bl	8001fd0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <USART2_Init+0x9c>)
 8000e7c:	f7ff ff74 	bl	8000d68 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <USART2_Init+0x9c>)
 8000e82:	f7ff ff61 	bl	8000d48 <LL_USART_Enable>
}
 8000e86:	bf00      	nop
 8000e88:	3738      	adds	r7, #56	; 0x38
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004400 	.word	0x40004400

08000e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e98:	f7ff ff20 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <LoopForever+0x16>)
	cmp	r2, r3
 8000ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f001 f911 	bl	80020e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec6:	f7ff fda1 	bl	8000a0c <main>

08000eca <LoopForever>:

LoopForever:
    b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ed0:	080021a8 	.word	0x080021a8
	ldr	r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ed8:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000edc:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000ee0:	2000002c 	.word	0x2000002c

08000ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_2_IRQHandler>
	...

08000ee8 <LL_EXTI_EnableIT_0_31>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40010400 	.word	0x40010400

08000f0c <LL_EXTI_EnableIT_32_63>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <LL_EXTI_EnableIT_32_63+0x20>)
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	4904      	ldr	r1, [pc, #16]	; (8000f2c <LL_EXTI_EnableIT_32_63+0x20>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	620b      	str	r3, [r1, #32]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40010400 	.word	0x40010400

08000f30 <LL_EXTI_DisableIT_0_31>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <LL_EXTI_DisableIT_0_31+0x24>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4904      	ldr	r1, [pc, #16]	; (8000f54 <LL_EXTI_DisableIT_0_31+0x24>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40010400 	.word	0x40010400

08000f58 <LL_EXTI_DisableIT_32_63>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <LL_EXTI_DisableIT_32_63+0x24>)
 8000f62:	6a1a      	ldr	r2, [r3, #32]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <LL_EXTI_DisableIT_32_63+0x24>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	620b      	str	r3, [r1, #32]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40010400 	.word	0x40010400

08000f80 <LL_EXTI_EnableEvent_0_31>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4904      	ldr	r1, [pc, #16]	; (8000fa0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <LL_EXTI_EnableEvent_32_63>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <LL_EXTI_DisableEvent_0_31>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <LL_EXTI_DisableEvent_0_31+0x24>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_EXTI_DisableEvent_0_31+0x24>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40010400 	.word	0x40010400

08000ff0 <LL_EXTI_DisableEvent_32_63>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4904      	ldr	r1, [pc, #16]	; (8001014 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001002:	4013      	ands	r3, r2
 8001004:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40010400 	.word	0x40010400

08001018 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	4904      	ldr	r1, [pc, #16]	; (8001038 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4313      	orrs	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40010400 	.word	0x40010400

0800103c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001048:	4904      	ldr	r1, [pc, #16]	; (800105c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40010400 	.word	0x40010400

08001060 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	43db      	mvns	r3, r3
 8001070:	4904      	ldr	r1, [pc, #16]	; (8001084 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001072:	4013      	ands	r3, r2
 8001074:	608b      	str	r3, [r1, #8]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40010400 	.word	0x40010400

08001088 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	43db      	mvns	r3, r3
 8001098:	4904      	ldr	r1, [pc, #16]	; (80010ac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800109a:	4013      	ands	r3, r2
 800109c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40010400 	.word	0x40010400

080010b0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	4904      	ldr	r1, [pc, #16]	; (80010d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60cb      	str	r3, [r1, #12]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40010400 	.word	0x40010400

080010d4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80010de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40010400 	.word	0x40010400

080010f8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	43db      	mvns	r3, r3
 8001108:	4904      	ldr	r1, [pc, #16]	; (800111c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800110a:	4013      	ands	r3, r2
 800110c:	60cb      	str	r3, [r1, #12]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40010400 	.word	0x40010400

08001120 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	43db      	mvns	r3, r3
 8001130:	4904      	ldr	r1, [pc, #16]	; (8001144 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001132:	4013      	ands	r3, r2
 8001134:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40010400 	.word	0x40010400

08001148 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7a1b      	ldrb	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80c6 	beq.w	80012ea <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d05d      	beq.n	8001222 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7a5b      	ldrb	r3, [r3, #9]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d00e      	beq.n	800118c <LL_EXTI_Init+0x44>
 800116e:	2b02      	cmp	r3, #2
 8001170:	d017      	beq.n	80011a2 <LL_EXTI_Init+0x5a>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d120      	bne.n	80011b8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff24 	bl	8000fc8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff feaf 	bl	8000ee8 <LL_EXTI_EnableIT_0_31>
          break;
 800118a:	e018      	b.n	80011be <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fecd 	bl	8000f30 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fef0 	bl	8000f80 <LL_EXTI_EnableEvent_0_31>
          break;
 80011a0:	e00d      	b.n	80011be <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fe9e 	bl	8000ee8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fee5 	bl	8000f80 <LL_EXTI_EnableEvent_0_31>
          break;
 80011b6:	e002      	b.n	80011be <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
          break;
 80011bc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7a9b      	ldrb	r3, [r3, #10]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02d      	beq.n	8001222 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7a9b      	ldrb	r3, [r3, #10]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d00e      	beq.n	80011ec <LL_EXTI_Init+0xa4>
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <LL_EXTI_Init+0xba>
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d120      	bne.n	8001218 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff8c 	bl	80010f8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff17 	bl	8001018 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80011ea:	e01b      	b.n	8001224 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff35 	bl	8001060 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff58 	bl	80010b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001200:	e010      	b.n	8001224 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff06 	bl	8001018 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff4d 	bl	80010b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001216:	e005      	b.n	8001224 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
            break;
 8001220:	e000      	b.n	8001224 <LL_EXTI_Init+0xdc>
        }
      }
 8001222:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d073      	beq.n	8001314 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7a5b      	ldrb	r3, [r3, #9]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00e      	beq.n	8001252 <LL_EXTI_Init+0x10a>
 8001234:	2b02      	cmp	r3, #2
 8001236:	d017      	beq.n	8001268 <LL_EXTI_Init+0x120>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d120      	bne.n	800127e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fed5 	bl	8000ff0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe5e 	bl	8000f0c <LL_EXTI_EnableIT_32_63>
          break;
 8001250:	e01a      	b.n	8001288 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fe7e 	bl	8000f58 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe9f 	bl	8000fa4 <LL_EXTI_EnableEvent_32_63>
          break;
 8001266:	e00f      	b.n	8001288 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe4d 	bl	8000f0c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe94 	bl	8000fa4 <LL_EXTI_EnableEvent_32_63>
          break;
 800127c:	e004      	b.n	8001288 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	60fb      	str	r3, [r7, #12]
          break;
 8001286:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7a9b      	ldrb	r3, [r3, #10]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d041      	beq.n	8001314 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7a9b      	ldrb	r3, [r3, #10]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d00e      	beq.n	80012b6 <LL_EXTI_Init+0x16e>
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <LL_EXTI_Init+0x184>
 800129c:	2b01      	cmp	r3, #1
 800129e:	d120      	bne.n	80012e2 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff3b 	bl	8001120 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fec4 	bl	800103c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80012b4:	e02f      	b.n	8001316 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fee4 	bl	8001088 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff05 	bl	80010d4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80012ca:	e024      	b.n	8001316 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff feb3 	bl	800103c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fefa 	bl	80010d4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80012e0:	e019      	b.n	8001316 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
            break;
 80012e6:	bf00      	nop
 80012e8:	e015      	b.n	8001316 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe1e 	bl	8000f30 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe65 	bl	8000fc8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe28 	bl	8000f58 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe6f 	bl	8000ff0 <LL_EXTI_DisableEvent_32_63>
 8001312:	e000      	b.n	8001316 <LL_EXTI_Init+0x1ce>
      }
 8001314:	bf00      	nop
  }

  return status;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_GPIO_SetPinMode>:
{
 8001320:	b480      	push	{r7}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	613b      	str	r3, [r7, #16]
  return result;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001346:	2320      	movs	r3, #32
 8001348:	e003      	b.n	8001352 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2103      	movs	r1, #3
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	401a      	ands	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	61fb      	str	r3, [r7, #28]
  return result;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001374:	2320      	movs	r3, #32
 8001376:	e003      	b.n	8001380 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	372c      	adds	r7, #44	; 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_GPIO_SetPinOutputType>:
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_GPIO_SetPinSpeed>:
{
 80013ca:	b480      	push	{r7}
 80013cc:	b08b      	sub	sp, #44	; 0x2c
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	613b      	str	r3, [r7, #16]
  return result;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80013f0:	2320      	movs	r3, #32
 80013f2:	e003      	b.n	80013fc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2103      	movs	r1, #3
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	61fb      	str	r3, [r7, #28]
  return result;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800141e:	2320      	movs	r3, #32
 8001420:	e003      	b.n	800142a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	609a      	str	r2, [r3, #8]
}
 8001438:	bf00      	nop
 800143a:	372c      	adds	r7, #44	; 0x2c
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_GPIO_SetPinPull>:
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	613b      	str	r3, [r7, #16]
  return result;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800146a:	2320      	movs	r3, #32
 800146c:	e003      	b.n	8001476 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2103      	movs	r1, #3
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	401a      	ands	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	61fb      	str	r3, [r7, #28]
  return result;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001498:	2320      	movs	r3, #32
 800149a:	e003      	b.n	80014a4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	60da      	str	r2, [r3, #12]
}
 80014b2:	bf00      	nop
 80014b4:	372c      	adds	r7, #44	; 0x2c
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_GPIO_SetAFPin_0_7>:
{
 80014be:	b480      	push	{r7}
 80014c0:	b08b      	sub	sp, #44	; 0x2c
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a1a      	ldr	r2, [r3, #32]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	613b      	str	r3, [r7, #16]
  return result;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80014e4:	2320      	movs	r3, #32
 80014e6:	e003      	b.n	80014f0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	210f      	movs	r1, #15
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	61fb      	str	r3, [r7, #28]
  return result;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001512:	2320      	movs	r3, #32
 8001514:	e003      	b.n	800151e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	431a      	orrs	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	621a      	str	r2, [r3, #32]
}
 800152c:	bf00      	nop
 800152e:	372c      	adds	r7, #44	; 0x2c
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_GPIO_SetAFPin_8_15>:
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	; 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	613b      	str	r3, [r7, #16]
  return result;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001560:	2320      	movs	r3, #32
 8001562:	e003      	b.n	800156c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	210f      	movs	r1, #15
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	401a      	ands	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	61fb      	str	r3, [r7, #28]
  return result;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001590:	2320      	movs	r3, #32
 8001592:	e003      	b.n	800159c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	431a      	orrs	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015aa:	bf00      	nop
 80015ac:	372c      	adds	r7, #44	; 0x2c
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b088      	sub	sp, #32
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	60fb      	str	r3, [r7, #12]
  return result;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <LL_GPIO_Init+0x26>
    return 32U;
 80015d8:	2320      	movs	r3, #32
 80015da:	e003      	b.n	80015e4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80015e6:	e040      	b.n	800166a <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d032      	beq.n	8001664 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	461a      	mov	r2, r3
 8001604:	69b9      	ldr	r1, [r7, #24]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fe8a 	bl	8001320 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d003      	beq.n	800161c <LL_GPIO_Init+0x66>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d106      	bne.n	800162a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	461a      	mov	r2, r3
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fed0 	bl	80013ca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	461a      	mov	r2, r3
 8001630:	69b9      	ldr	r1, [r7, #24]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff06 	bl	8001444 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d111      	bne.n	8001664 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2bff      	cmp	r3, #255	; 0xff
 8001644:	d807      	bhi.n	8001656 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	461a      	mov	r2, r3
 800164c:	69b9      	ldr	r1, [r7, #24]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff35 	bl	80014be <LL_GPIO_SetAFPin_0_7>
 8001654:	e006      	b.n	8001664 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	461a      	mov	r2, r3
 800165c:	69b9      	ldr	r1, [r7, #24]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff6a 	bl	8001538 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	3301      	adds	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1b7      	bne.n	80015e8 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d003      	beq.n	8001688 <LL_GPIO_Init+0xd2>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d107      	bne.n	8001698 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	461a      	mov	r2, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fe81 	bl	800139a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <LL_RCC_HSI_IsReady>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <LL_RCC_HSI_IsReady+0x24>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b4:	d101      	bne.n	80016ba <LL_RCC_HSI_IsReady+0x16>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_RCC_HSI_IsReady+0x18>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <LL_RCC_LSE_IsReady>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <LL_RCC_LSE_IsReady+0x24>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d101      	bne.n	80016e2 <LL_RCC_LSE_IsReady+0x16>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_RCC_LSE_IsReady+0x18>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b08      	cmp	r3, #8
 8001702:	d101      	bne.n	8001708 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000

08001718 <LL_RCC_MSI_GetRange>:
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <LL_RCC_MSI_GetRange+0x18>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000

08001750 <LL_RCC_GetSysClkSource>:
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <LL_RCC_GetSysClkSource+0x18>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <LL_RCC_GetAHBPrescaler>:
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <LL_RCC_GetAHBPrescaler+0x18>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_GetAPB1Prescaler>:
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_RCC_GetAPB2Prescaler>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <LL_RCC_GetUSARTClockSource>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <LL_RCC_GetUSARTClockSource+0x24>)
 80017ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	4313      	orrs	r3, r2
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000

080017e8 <LL_RCC_GetUARTClockSource>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <LL_RCC_GetUARTClockSource+0x24>)
 80017f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	401a      	ands	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	4313      	orrs	r3, r2
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_PLL_GetMainSource>:
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <LL_RCC_PLL_GetMainSource+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0303 	and.w	r3, r3, #3
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <LL_RCC_PLL_GetN>:
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <LL_RCC_PLL_GetN+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000

08001848 <LL_RCC_PLL_GetR>:
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <LL_RCC_PLL_GetR+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <LL_RCC_PLL_GetDivider>:
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <LL_RCC_PLL_GetDivider+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d137      	bne.n	8001902 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff94 	bl	80017c0 <LL_RCC_GetUSARTClockSource>
 8001898:	4603      	mov	r3, r0
 800189a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800189e:	2b03      	cmp	r3, #3
 80018a0:	f200 80b2 	bhi.w	8001a08 <LL_RCC_GetUSARTClockFreq+0x188>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <LL_RCC_GetUSARTClockFreq+0x2c>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	080018eb 	.word	0x080018eb
 80018b0:	080018bd 	.word	0x080018bd
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018d7 	.word	0x080018d7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80018bc:	f000 f952 	bl	8001b64 <RCC_GetSystemClockFreq>
 80018c0:	60f8      	str	r0, [r7, #12]
        break;
 80018c2:	e0b2      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80018c4:	f7ff feee 	bl	80016a4 <LL_RCC_HSI_IsReady>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 809e 	beq.w	8001a0c <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80018d0:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80018d2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80018d4:	e09a      	b.n	8001a0c <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80018d6:	f7ff fef9 	bl	80016cc <LL_RCC_LSE_IsReady>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8097 	beq.w	8001a10 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 80018e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80018e8:	e092      	b.n	8001a10 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80018ea:	f000 f93b 	bl	8001b64 <RCC_GetSystemClockFreq>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f9c7 	bl	8001c84 <RCC_GetHCLKClockFreq>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f9ed 	bl	8001cd8 <RCC_GetPCLK2ClockFreq>
 80018fe:	60f8      	str	r0, [r7, #12]
        break;
 8001900:	e093      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d146      	bne.n	8001996 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff59 	bl	80017c0 <LL_RCC_GetUSARTClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d87d      	bhi.n	8001a14 <LL_RCC_GetUSARTClockFreq+0x194>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	0800197f 	.word	0x0800197f
 8001924:	08001a15 	.word	0x08001a15
 8001928:	08001a15 	.word	0x08001a15
 800192c:	08001a15 	.word	0x08001a15
 8001930:	08001955 	.word	0x08001955
 8001934:	08001a15 	.word	0x08001a15
 8001938:	08001a15 	.word	0x08001a15
 800193c:	08001a15 	.word	0x08001a15
 8001940:	0800195d 	.word	0x0800195d
 8001944:	08001a15 	.word	0x08001a15
 8001948:	08001a15 	.word	0x08001a15
 800194c:	08001a15 	.word	0x08001a15
 8001950:	0800196d 	.word	0x0800196d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001954:	f000 f906 	bl	8001b64 <RCC_GetSystemClockFreq>
 8001958:	60f8      	str	r0, [r7, #12]
        break;
 800195a:	e066      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800195c:	f7ff fea2 	bl	80016a4 <LL_RCC_HSI_IsReady>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d058      	beq.n	8001a18 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001968:	60fb      	str	r3, [r7, #12]
        }
        break;
 800196a:	e055      	b.n	8001a18 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800196c:	f7ff feae 	bl	80016cc <LL_RCC_LSE_IsReady>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d052      	beq.n	8001a1c <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8001976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800197c:	e04e      	b.n	8001a1c <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800197e:	f000 f8f1 	bl	8001b64 <RCC_GetSystemClockFreq>
 8001982:	4603      	mov	r3, r0
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f97d 	bl	8001c84 <RCC_GetHCLKClockFreq>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f98f 	bl	8001cb0 <RCC_GetPCLK1ClockFreq>
 8001992:	60f8      	str	r0, [r7, #12]
        break;
 8001994:	e049      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b30      	cmp	r3, #48	; 0x30
 800199a:	d141      	bne.n	8001a20 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff0f 	bl	80017c0 <LL_RCC_GetUSARTClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <LL_RCC_GetUSARTClockFreq+0x146>
 80019aa:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d803      	bhi.n	80019b8 <LL_RCC_GetUSARTClockFreq+0x138>
 80019b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80019b4:	d01c      	beq.n	80019f0 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80019b6:	e038      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <LL_RCC_GetUSARTClockFreq+0x14e>
 80019be:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80019c2:	d00c      	beq.n	80019de <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80019c4:	e031      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 80019c6:	f000 f8cd 	bl	8001b64 <RCC_GetSystemClockFreq>
 80019ca:	60f8      	str	r0, [r7, #12]
          break;
 80019cc:	e02d      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80019ce:	f7ff fe69 	bl	80016a4 <LL_RCC_HSI_IsReady>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d025      	beq.n	8001a24 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80019da:	60fb      	str	r3, [r7, #12]
          break;
 80019dc:	e022      	b.n	8001a24 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 80019de:	f7ff fe75 	bl	80016cc <LL_RCC_LSE_IsReady>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01f      	beq.n	8001a28 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 80019e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ec:	60fb      	str	r3, [r7, #12]
          break;
 80019ee:	e01b      	b.n	8001a28 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80019f0:	f000 f8b8 	bl	8001b64 <RCC_GetSystemClockFreq>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f944 	bl	8001c84 <RCC_GetHCLKClockFreq>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f956 	bl	8001cb0 <RCC_GetPCLK1ClockFreq>
 8001a04:	60f8      	str	r0, [r7, #12]
          break;
 8001a06:	e010      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001a08:	bf00      	nop
 8001a0a:	e00e      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001a0c:	bf00      	nop
 8001a0e:	e00c      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001a10:	bf00      	nop
 8001a12:	e00a      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001a14:	bf00      	nop
 8001a16:	e008      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001a18:	bf00      	nop
 8001a1a:	e006      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001a1c:	bf00      	nop
 8001a1e:	e004      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001a28:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	00300010 	.word	0x00300010
 8001a3c:	00300020 	.word	0x00300020

08001a40 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8001a50:	d135      	bne.n	8001abe <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fec8 	bl	80017e8 <LL_RCC_GetUARTClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <LL_RCC_GetUARTClockFreq+0x110>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <LL_RCC_GetUARTClockFreq+0x3c>
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <LL_RCC_GetUARTClockFreq+0x110>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d803      	bhi.n	8001a6e <LL_RCC_GetUARTClockFreq+0x2e>
 8001a66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a6a:	d01c      	beq.n	8001aa6 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8001a6c:	e02c      	b.n	8001ac8 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001a6e:	4a39      	ldr	r2, [pc, #228]	; (8001b54 <LL_RCC_GetUARTClockFreq+0x114>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <LL_RCC_GetUARTClockFreq+0x44>
 8001a74:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8001a78:	d00c      	beq.n	8001a94 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8001a7a:	e025      	b.n	8001ac8 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8001a7c:	f000 f872 	bl	8001b64 <RCC_GetSystemClockFreq>
 8001a80:	60f8      	str	r0, [r7, #12]
        break;
 8001a82:	e021      	b.n	8001ac8 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8001a84:	f7ff fe0e 	bl	80016a4 <LL_RCC_HSI_IsReady>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <LL_RCC_GetUARTClockFreq+0x118>)
 8001a90:	60fb      	str	r3, [r7, #12]
        break;
 8001a92:	e016      	b.n	8001ac2 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001a94:	f7ff fe1a 	bl	80016cc <LL_RCC_LSE_IsReady>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d013      	beq.n	8001ac6 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8001a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aa2:	60fb      	str	r3, [r7, #12]
        break;
 8001aa4:	e00f      	b.n	8001ac6 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001aa6:	f000 f85d 	bl	8001b64 <RCC_GetSystemClockFreq>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f8e9 	bl	8001c84 <RCC_GetHCLKClockFreq>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f8fb 	bl	8001cb0 <RCC_GetPCLK1ClockFreq>
 8001aba:	60f8      	str	r0, [r7, #12]
        break;
 8001abc:	e004      	b.n	8001ac8 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8001abe:	bf00      	nop
 8001ac0:	e002      	b.n	8001ac8 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8001ac6:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ace:	d135      	bne.n	8001b3c <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fe89 	bl	80017e8 <LL_RCC_GetUARTClockSource>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <LL_RCC_GetUARTClockFreq+0x11c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <LL_RCC_GetUARTClockFreq+0xba>
 8001ade:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <LL_RCC_GetUARTClockFreq+0x11c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d803      	bhi.n	8001aec <LL_RCC_GetUARTClockFreq+0xac>
 8001ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ae8:	d01c      	beq.n	8001b24 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8001aea:	e02c      	b.n	8001b46 <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <LL_RCC_GetUARTClockFreq+0x120>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <LL_RCC_GetUARTClockFreq+0xc2>
 8001af2:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8001af6:	d00c      	beq.n	8001b12 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8001af8:	e025      	b.n	8001b46 <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8001afa:	f000 f833 	bl	8001b64 <RCC_GetSystemClockFreq>
 8001afe:	60f8      	str	r0, [r7, #12]
        break;
 8001b00:	e021      	b.n	8001b46 <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8001b02:	f7ff fdcf 	bl	80016a4 <LL_RCC_HSI_IsReady>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d019      	beq.n	8001b40 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <LL_RCC_GetUARTClockFreq+0x118>)
 8001b0e:	60fb      	str	r3, [r7, #12]
        break;
 8001b10:	e016      	b.n	8001b40 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001b12:	f7ff fddb 	bl	80016cc <LL_RCC_LSE_IsReady>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8001b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b20:	60fb      	str	r3, [r7, #12]
        break;
 8001b22:	e00f      	b.n	8001b44 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001b24:	f000 f81e 	bl	8001b64 <RCC_GetSystemClockFreq>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f8aa 	bl	8001c84 <RCC_GetHCLKClockFreq>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f8bc 	bl	8001cb0 <RCC_GetPCLK1ClockFreq>
 8001b38:	60f8      	str	r0, [r7, #12]
        break;
 8001b3a:	e004      	b.n	8001b46 <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8001b3c:	bf00      	nop
 8001b3e:	e002      	b.n	8001b46 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8001b44:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	00c00040 	.word	0x00c00040
 8001b54:	00c00080 	.word	0x00c00080
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	03000100 	.word	0x03000100
 8001b60:	03000200 	.word	0x03000200

08001b64 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b6a:	f7ff fdf1 	bl	8001750 <LL_RCC_GetSysClkSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d851      	bhi.n	8001c18 <RCC_GetSystemClockFreq+0xb4>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <RCC_GetSystemClockFreq+0x18>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001bb1 	.word	0x08001bb1
 8001b80:	08001c19 	.word	0x08001c19
 8001b84:	08001c19 	.word	0x08001c19
 8001b88:	08001c19 	.word	0x08001c19
 8001b8c:	08001c05 	.word	0x08001c05
 8001b90:	08001c19 	.word	0x08001c19
 8001b94:	08001c19 	.word	0x08001c19
 8001b98:	08001c19 	.word	0x08001c19
 8001b9c:	08001c0b 	.word	0x08001c0b
 8001ba0:	08001c19 	.word	0x08001c19
 8001ba4:	08001c19 	.word	0x08001c19
 8001ba8:	08001c19 	.word	0x08001c19
 8001bac:	08001c11 	.word	0x08001c11
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001bb0:	f7ff fda0 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d111      	bne.n	8001bde <RCC_GetSystemClockFreq+0x7a>
 8001bba:	f7ff fd9b 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <RCC_GetSystemClockFreq+0x6a>
 8001bc4:	f7ff fda8 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	e003      	b.n	8001bd6 <RCC_GetSystemClockFreq+0x72>
 8001bce:	f7ff fdb1 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <RCC_GetSystemClockFreq+0x114>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	e010      	b.n	8001c00 <RCC_GetSystemClockFreq+0x9c>
 8001bde:	f7ff fd89 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <RCC_GetSystemClockFreq+0x8e>
 8001be8:	f7ff fd96 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001bec:	4603      	mov	r3, r0
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	e003      	b.n	8001bfa <RCC_GetSystemClockFreq+0x96>
 8001bf2:	f7ff fd9f 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <RCC_GetSystemClockFreq+0x114>)
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001c02:	e033      	b.n	8001c6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <RCC_GetSystemClockFreq+0x118>)
 8001c06:	607b      	str	r3, [r7, #4]
      break;
 8001c08:	e030      	b.n	8001c6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <RCC_GetSystemClockFreq+0x11c>)
 8001c0c:	607b      	str	r3, [r7, #4]
      break;
 8001c0e:	e02d      	b.n	8001c6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001c10:	f000 f876 	bl	8001d00 <RCC_PLL_GetFreqDomain_SYS>
 8001c14:	6078      	str	r0, [r7, #4]
      break;
 8001c16:	e029      	b.n	8001c6c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c18:	f7ff fd6c 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d111      	bne.n	8001c46 <RCC_GetSystemClockFreq+0xe2>
 8001c22:	f7ff fd67 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <RCC_GetSystemClockFreq+0xd2>
 8001c2c:	f7ff fd74 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001c30:	4603      	mov	r3, r0
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	e003      	b.n	8001c3e <RCC_GetSystemClockFreq+0xda>
 8001c36:	f7ff fd7d 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <RCC_GetSystemClockFreq+0x114>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	e010      	b.n	8001c68 <RCC_GetSystemClockFreq+0x104>
 8001c46:	f7ff fd55 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <RCC_GetSystemClockFreq+0xf6>
 8001c50:	f7ff fd62 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	e003      	b.n	8001c62 <RCC_GetSystemClockFreq+0xfe>
 8001c5a:	f7ff fd6b 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <RCC_GetSystemClockFreq+0x114>)
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001c6a:	bf00      	nop
  }

  return frequency;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	08002170 	.word	0x08002170
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c8c:	f7ff fd6e 	bl	800176c <LL_RCC_GetAHBPrescaler>
 8001c90:	4603      	mov	r3, r0
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <RCC_GetHCLKClockFreq+0x28>)
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	40d3      	lsrs	r3, r2
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08002158 	.word	0x08002158

08001cb0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001cb8:	f7ff fd66 	bl	8001788 <LL_RCC_GetAPB1Prescaler>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	40d3      	lsrs	r3, r2
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	08002168 	.word	0x08002168

08001cd8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ce0:	f7ff fd60 	bl	80017a4 <LL_RCC_GetAPB2Prescaler>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	0adb      	lsrs	r3, r3, #11
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <RCC_GetPCLK2ClockFreq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	40d3      	lsrs	r3, r2
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08002168 	.word	0x08002168

08001d00 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001d06:	f7ff fd83 	bl	8001810 <LL_RCC_PLL_GetMainSource>
 8001d0a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d02d      	beq.n	8001d6e <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d02e      	beq.n	8001d74 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d12f      	bne.n	8001d7a <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d1a:	f7ff fceb 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8001d24:	f7ff fce6 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8001d2e:	f7ff fcf3 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001d32:	4603      	mov	r3, r0
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	e003      	b.n	8001d40 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001d38:	f7ff fcfc 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	e010      	b.n	8001d6a <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8001d48:	f7ff fcd4 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8001d52:	f7ff fce1 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001d56:	4603      	mov	r3, r0
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	e003      	b.n	8001d64 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8001d5c:	f7ff fcea 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d60:	4603      	mov	r3, r0
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001d6c:	e02f      	b.n	8001dce <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8001d70:	607b      	str	r3, [r7, #4]
      break;
 8001d72:	e02c      	b.n	8001dce <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8001d76:	607b      	str	r3, [r7, #4]
      break;
 8001d78:	e029      	b.n	8001dce <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d7a:	f7ff fcbb 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8001d84:	f7ff fcb6 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8001d8e:	f7ff fcc3 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001d92:	4603      	mov	r3, r0
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	e003      	b.n	8001da0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8001d98:	f7ff fccc 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	e010      	b.n	8001dca <RCC_PLL_GetFreqDomain_SYS+0xca>
 8001da8:	f7ff fca4 	bl	80016f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8001db2:	f7ff fcb1 	bl	8001718 <LL_RCC_MSI_GetRange>
 8001db6:	4603      	mov	r3, r0
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	e003      	b.n	8001dc4 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8001dbc:	f7ff fcba 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001dcc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001dce:	f7ff fd49 	bl	8001864 <LL_RCC_PLL_GetDivider>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	fbb2 f4f3 	udiv	r4, r2, r3
 8001dde:	f7ff fd25 	bl	800182c <LL_RCC_PLL_GetN>
 8001de2:	4603      	mov	r3, r0
 8001de4:	fb03 f404 	mul.w	r4, r3, r4
 8001de8:	f7ff fd2e 	bl	8001848 <LL_RCC_PLL_GetR>
 8001dec:	4603      	mov	r3, r0
 8001dee:	0e5b      	lsrs	r3, r3, #25
 8001df0:	3301      	adds	r3, #1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	08002170 	.word	0x08002170
 8001e04:	00f42400 	.word	0x00f42400
 8001e08:	007a1200 	.word	0x007a1200

08001e0c <LL_SPI_IsEnabled>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d101      	bne.n	8001e24 <LL_SPI_IsEnabled+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_SPI_IsEnabled+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_SPI_SetCRCPolynomial>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffd3 	bl	8001e0c <LL_SPI_IsEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13b      	bne.n	8001ee4 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e74:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6811      	ldr	r1, [r2, #0]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	6852      	ldr	r2, [r2, #4]
 8001e80:	4311      	orrs	r1, r2
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	68d2      	ldr	r2, [r2, #12]
 8001e86:	4311      	orrs	r1, r2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	6912      	ldr	r2, [r2, #16]
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	6952      	ldr	r2, [r2, #20]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6992      	ldr	r2, [r2, #24]
 8001e98:	4311      	orrs	r1, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	69d2      	ldr	r2, [r2, #28]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6a12      	ldr	r2, [r2, #32]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	6891      	ldr	r1, [r2, #8]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6952      	ldr	r2, [r2, #20]
 8001ec0:	0c12      	lsrs	r2, r2, #16
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ed2:	d105      	bne.n	8001ee0 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa9 	bl	8001e32 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LL_USART_IsEnabled>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <LL_USART_IsEnabled+0x18>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_USART_IsEnabled+0x1a>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_USART_SetStopBitsLength>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	605a      	str	r2, [r3, #4]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_USART_SetHWFlowCtrl>:
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_USART_SetBaudRate>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f74:	d11a      	bne.n	8001fac <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	005a      	lsls	r2, r3, #1
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	441a      	add	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	60da      	str	r2, [r3, #12]
}
 8001faa:	e00a      	b.n	8001fc2 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	085a      	lsrs	r2, r3, #1
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	441a      	add	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	60da      	str	r2, [r3, #12]
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff83 	bl	8001eee <LL_USART_IsEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d15b      	bne.n	80020a6 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <LL_USART_Init+0xe0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	6851      	ldr	r1, [r2, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	4311      	orrs	r1, r2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	6912      	ldr	r2, [r2, #16]
 8002004:	4311      	orrs	r1, r2
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	6992      	ldr	r2, [r2, #24]
 800200a:	430a      	orrs	r2, r1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff7b 	bl	8001f14 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff88 	bl	8001f3a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <LL_USART_Init+0xe4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d104      	bne.n	800203c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002032:	2003      	movs	r0, #3
 8002034:	f7ff fc24 	bl	8001880 <LL_RCC_GetUSARTClockFreq>
 8002038:	60b8      	str	r0, [r7, #8]
 800203a:	e023      	b.n	8002084 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <LL_USART_Init+0xe8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d104      	bne.n	800204e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002044:	200c      	movs	r0, #12
 8002046:	f7ff fc1b 	bl	8001880 <LL_RCC_GetUSARTClockFreq>
 800204a:	60b8      	str	r0, [r7, #8]
 800204c:	e01a      	b.n	8002084 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <LL_USART_Init+0xec>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d104      	bne.n	8002060 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002056:	2030      	movs	r0, #48	; 0x30
 8002058:	f7ff fc12 	bl	8001880 <LL_RCC_GetUSARTClockFreq>
 800205c:	60b8      	str	r0, [r7, #8]
 800205e:	e011      	b.n	8002084 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <LL_USART_Init+0xf0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d104      	bne.n	8002072 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002068:	20c0      	movs	r0, #192	; 0xc0
 800206a:	f7ff fce9 	bl	8001a40 <LL_RCC_GetUARTClockFreq>
 800206e:	60b8      	str	r0, [r7, #8]
 8002070:	e008      	b.n	8002084 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <LL_USART_Init+0xf4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d104      	bne.n	8002084 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800207a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800207e:	f7ff fcdf 	bl	8001a40 <LL_RCC_GetUARTClockFreq>
 8002082:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff5d 	bl	8001f60 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	efff69f3 	.word	0xefff69f3
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40004800 	.word	0x40004800
 80020c0:	40004c00 	.word	0x40004c00
 80020c4:	40005000 	.word	0x40005000

080020c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <LL_SetSystemCoreClock+0x1c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000

080020e8 <__libc_init_array>:
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	4e0d      	ldr	r6, [pc, #52]	; (8002120 <__libc_init_array+0x38>)
 80020ec:	4c0d      	ldr	r4, [pc, #52]	; (8002124 <__libc_init_array+0x3c>)
 80020ee:	1ba4      	subs	r4, r4, r6
 80020f0:	10a4      	asrs	r4, r4, #2
 80020f2:	2500      	movs	r5, #0
 80020f4:	42a5      	cmp	r5, r4
 80020f6:	d109      	bne.n	800210c <__libc_init_array+0x24>
 80020f8:	4e0b      	ldr	r6, [pc, #44]	; (8002128 <__libc_init_array+0x40>)
 80020fa:	4c0c      	ldr	r4, [pc, #48]	; (800212c <__libc_init_array+0x44>)
 80020fc:	f000 f820 	bl	8002140 <_init>
 8002100:	1ba4      	subs	r4, r4, r6
 8002102:	10a4      	asrs	r4, r4, #2
 8002104:	2500      	movs	r5, #0
 8002106:	42a5      	cmp	r5, r4
 8002108:	d105      	bne.n	8002116 <__libc_init_array+0x2e>
 800210a:	bd70      	pop	{r4, r5, r6, pc}
 800210c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002110:	4798      	blx	r3
 8002112:	3501      	adds	r5, #1
 8002114:	e7ee      	b.n	80020f4 <__libc_init_array+0xc>
 8002116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800211a:	4798      	blx	r3
 800211c:	3501      	adds	r5, #1
 800211e:	e7f2      	b.n	8002106 <__libc_init_array+0x1e>
 8002120:	080021a0 	.word	0x080021a0
 8002124:	080021a0 	.word	0x080021a0
 8002128:	080021a0 	.word	0x080021a0
 800212c:	080021a4 	.word	0x080021a4

08002130 <memset>:
 8002130:	4402      	add	r2, r0
 8002132:	4603      	mov	r3, r0
 8002134:	4293      	cmp	r3, r2
 8002136:	d100      	bne.n	800213a <memset+0xa>
 8002138:	4770      	bx	lr
 800213a:	f803 1b01 	strb.w	r1, [r3], #1
 800213e:	e7f9      	b.n	8002134 <memset+0x4>

08002140 <_init>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr

0800214c <_fini>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr
