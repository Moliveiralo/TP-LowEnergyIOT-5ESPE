
L476_nRF24L01_MultiCeiver_PTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003198  08003198  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003198  08003198  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080031a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000030  080031d0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080031d0  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087be  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b9a  00000000  00000000  0002881e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0002ae90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000202a1  00000000  00000000  0002b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006eb0  00000000  00000000  0004bb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000af956  00000000  00000000  000529c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b1c  00000000  00000000  00102394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003004 	.word	0x08003004

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08003004 	.word	0x08003004

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <nRF24_CE_L>:
#define CRC_Field_1byte 0
#define CRC_Field_2byte 1

#define NRF_SPI SPI1

static inline void nRF24_CE_L() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(nRF_CE_GPIO_Port, nRF_CE_Pin);
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020c:	f7ff ffea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}

08000214 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(nRF_CE_GPIO_Port, nRF_CE_Pin);
 8000218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f7ff ffd2 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}

08000228 <Delay_ms>:
    while (!LL_SPI_IsActiveFlag_RXNE(NRF_SPI));
    return LL_SPI_ReceiveData8(NRF_SPI);
}


static inline void Delay_ms(uint32_t ms) { LL_mDelay(ms); }
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f002 fe85 	bl	8002f40 <LL_mDelay>
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <nRF24_TransmitPacket+0x94>)
 800024e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000250:	f7ff ffd6 	bl	8000200 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8000254:	78fb      	ldrb	r3, [r7, #3]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f001 faa3 	bl	80017a4 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800025e:	f7ff ffd9 	bl	8000214 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8000262:	f001 fa72 	bl	800174a <nRF24_GetStatus>
 8000266:	4603      	mov	r3, r0
 8000268:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800026a:	7bfb      	ldrb	r3, [r7, #15]
 800026c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000270:	2b00      	cmp	r3, #0
 8000272:	d105      	bne.n	8000280 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	1e5a      	subs	r2, r3, #1
 8000278:	60ba      	str	r2, [r7, #8]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f1      	bne.n	8000262 <nRF24_TransmitPacket+0x22>
 800027e:	e000      	b.n	8000282 <nRF24_TransmitPacket+0x42>
			break;
 8000280:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000282:	f7ff ffbd 	bl	8000200 <nRF24_CE_L>

	if (!wait) {
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d101      	bne.n	8000290 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 800028c:	2302      	movs	r3, #2
 800028e:	e01c      	b.n	80002ca <nRF24_TransmitPacket+0x8a>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8000290:	4811      	ldr	r0, [pc, #68]	; (80002d8 <nRF24_TransmitPacket+0x98>)
 8000292:	f001 fcb5 	bl	8001c00 <UART_SendStr>
	UART_SendHex8(status);
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	4618      	mov	r0, r3
 800029a:	f001 fcf3 	bl	8001c84 <UART_SendHex8>
	UART_SendStr("] ");
 800029e:	480f      	ldr	r0, [pc, #60]	; (80002dc <nRF24_TransmitPacket+0x9c>)
 80002a0:	f001 fcae 	bl	8001c00 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80002a4:	f001 fa69 	bl	800177a <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <nRF24_TransmitPacket+0x76>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80002b2:	2303      	movs	r3, #3
 80002b4:	e009      	b.n	80002ca <nRF24_TransmitPacket+0x8a>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	f003 0320 	and.w	r3, r3, #32
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <nRF24_TransmitPacket+0x84>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80002c0:	2301      	movs	r3, #1
 80002c2:	e002      	b.n	80002ca <nRF24_TransmitPacket+0x8a>
	}
	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80002c4:	f001 fa49 	bl	800175a <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80002c8:	2300      	movs	r3, #0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	000fffff 	.word	0x000fffff
 80002d8:	0800301c 	.word	0x0800301c
 80002dc:	08003020 	.word	0x08003020

080002e0 <Init_Transceiver>:

//Initialisation du transceiver --> paramètres par défaut, raz des IRQ, passage en mode power down
//et vérification que le transceiver fonctionne.
//Les registres du nRF24L01 sont accessibles par SPI même en mode power down.
void Init_Transceiver() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	uint8_t check_OK;

	nRF24_Init(); // Initialize the nRF24L01 to its default state
 80002e6:	f001 f822 	bl	800132e <nRF24_Init>
	nRF24_ClearIRQFlags(); // Clear any pending IRQ flags
 80002ea:	f001 fa46 	bl	800177a <nRF24_ClearIRQFlags>
	nRF24_SetPowerMode(nRF24_PWR_DOWN); //passage en mode power down.
 80002ee:	2000      	movs	r0, #0
 80002f0:	f001 f898 	bl	8001424 <nRF24_SetPowerMode>
	//même si le passage en mode power down est rapide, on laisse un délai de 1 ms (suppose que
	//le Systick soit cadencé pour déborder toutes les 1 ms).
	Delay_ms(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f7ff ff97 	bl	8000228 <Delay_ms>

	check_OK = nRF24_Check(); //vérif de la présence du nRF24L01
 80002fa:	f001 f865 	bl	80013c8 <nRF24_Check>
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	if (check_OK == 1) {
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d103      	bne.n	8000310 <Init_Transceiver+0x30>
		UART_SendStr("The transceiver nRF24L01 is on-line.\r\n");
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <Init_Transceiver+0x40>)
 800030a:	f001 fc79 	bl	8001c00 <UART_SendStr>
	} else {
		UART_SendStr("The transceiver nRF24L01 is not responding.\r\n");
	}
}
 800030e:	e002      	b.n	8000316 <Init_Transceiver+0x36>
		UART_SendStr("The transceiver nRF24L01 is not responding.\r\n");
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <Init_Transceiver+0x44>)
 8000312:	f001 fc75 	bl	8001c00 <UART_SendStr>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	08003024 	.word	0x08003024
 8000324:	0800304c 	.word	0x0800304c

08000328 <Config_RF_channel>:

//Configuration du canal RF : fréq du canal RF, puissance RF et data rate
void Config_RF_channel(uint8_t channel_nb, uint8_t DataRate, uint8_t TX_Power) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	460b      	mov	r3, r1
 8000334:	71bb      	strb	r3, [r7, #6]
 8000336:	4613      	mov	r3, r2
 8000338:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Set RF channel
	nRF24_SetRFChannel(channel_nb);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4618      	mov	r0, r3
 800033e:	f001 f8d2 	bl	80014e6 <nRF24_SetRFChannel>
	// Set data rate
	nRF24_SetDataRate(DataRate);
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4618      	mov	r0, r3
 8000346:	f001 f974 	bl	8001632 <nRF24_SetDataRate>
	// Set TX power
	nRF24_SetTXPower(TX_Power);
 800034a:	797b      	ldrb	r3, [r7, #5]
 800034c:	4618      	mov	r0, r3
 800034e:	f001 f953 	bl	80015f8 <nRF24_SetTXPower>

	//verification des registres.
	//reg = ReadReg(0x05); //registre RF_CH
	//reg = ReadReg(0x06); //registre RF_SETUP
	//reg = ReadReg(0x00); //registre config
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <Config_CRC>:

//configuration du CRC :
//CRC_On = 0 --> desactivation du champ CRC, = 1 --> activation du champ CRC
//size_CRC = 0 --> CRC sur 1 octet. size_CRC = 1 --> CRC sur 2 octets
void Config_CRC(uint8_t CRC_On, uint8_t size_CRC) {
 800035a:	b580      	push	{r7, lr}
 800035c:	b084      	sub	sp, #16
 800035e:	af00      	add	r7, sp, #0
 8000360:	4603      	mov	r3, r0
 8000362:	460a      	mov	r2, r1
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	4613      	mov	r3, r2
 8000368:	71bb      	strb	r3, [r7, #6]
	uint8_t scheme_CRC = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]

	if (CRC_On == CRC_Field_On) {
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d107      	bne.n	8000384 <Config_CRC+0x2a>
		if (size_CRC == CRC_Field_1byte) {
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d102      	bne.n	8000380 <Config_CRC+0x26>
			scheme_CRC = 0x8;
 800037a:	2308      	movs	r3, #8
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	e001      	b.n	8000384 <Config_CRC+0x2a>
		}
		else {
			scheme_CRC = 0xC;
 8000380:	230c      	movs	r3, #12
 8000382:	73fb      	strb	r3, [r7, #15]
		}
	}

	nRF24_SetCRCScheme(scheme_CRC);
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f88c 	bl	80014a4 <nRF24_SetCRCScheme>
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <Config_PTX_adress>:
	ReadMBReg(0x0A, verif_RX0_Adr, 5);
}

//configure l'adresse du data pipe utilisé par le PTX. On indique le numéro du data pipe num_data_pipe.
//num_data_pipe est compris entre 0 et 5. Addr_Default = Default_pipe_address ou Custom_pipe_address.
void Config_PTX_adress(uint8_t Address_width, uint8_t Addr_Default, uint8_t num_data_pipe, uint8_t autoAck_on) {
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	4604      	mov	r4, r0
 800039c:	4608      	mov	r0, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	461a      	mov	r2, r3
 80003a2:	4623      	mov	r3, r4
 80003a4:	71fb      	strb	r3, [r7, #7]
 80003a6:	4603      	mov	r3, r0
 80003a8:	71bb      	strb	r3, [r7, #6]
 80003aa:	460b      	mov	r3, r1
 80003ac:	717b      	strb	r3, [r7, #5]
 80003ae:	4613      	mov	r3, r2
 80003b0:	713b      	strb	r3, [r7, #4]
	uint8_t reg;
	uint8_t verif_TX_Adr[5];
	uint8_t verif_RX0_Adr[5];
	uint8_t pipeAddrVar[5];

	if ((Address_width < 3) | (Address_width > 5)) { //par défaut, adresse sur 5 octets
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	bf94      	ite	ls
 80003b8:	2301      	movls	r3, #1
 80003ba:	2300      	movhi	r3, #0
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b05      	cmp	r3, #5
 80003c2:	bf8c      	ite	hi
 80003c4:	2301      	movhi	r3, #1
 80003c6:	2300      	movls	r3, #0
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <Config_PTX_adress+0x46>
			nRF24_SetAddrWidth(5);
 80003d2:	2005      	movs	r0, #5
 80003d4:	f001 f8b0 	bl	8001538 <nRF24_SetAddrWidth>
 80003d8:	e003      	b.n	80003e2 <Config_PTX_adress+0x4e>
	} else {
			nRF24_SetAddrWidth(Address_width);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f8ab 	bl	8001538 <nRF24_SetAddrWidth>
	}

	//On rend identique l'adresse TX et l'adresse RX_P0, lorsque l'auto-acknowledgment est activé.
	//Par défaut, les adresses sont sur 5 octets, AA activés et data pipe 0 et 1 activés par défaut.
	nRF24_SetRXPipe(nRF24_PIPE0,autoAck_on,payload_length);
 80003e2:	4b80      	ldr	r3, [pc, #512]	; (80005e4 <Config_PTX_adress+0x250>)
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	793b      	ldrb	r3, [r7, #4]
 80003e8:	4619      	mov	r1, r3
 80003ea:	2000      	movs	r0, #0
 80003ec:	f001 f93c 	bl	8001668 <nRF24_SetRXPipe>
	//on vérifie la largeur du champ d'adresse
	reg = ReadReg(0x03);
 80003f0:	2003      	movs	r0, #3
 80003f2:	f000 ff7c 	bl	80012ee <ReadReg>
 80003f6:	4603      	mov	r3, r0
 80003f8:	77fb      	strb	r3, [r7, #31]

	if (autoAck_on == nRF24_AA_ON) {  //l'adresse TX = l'adresse RX_P0.
 80003fa:	793b      	ldrb	r3, [r7, #4]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	f040 8089 	bne.w	8000514 <Config_PTX_adress+0x180>

		if (Addr_Default == Default_pipe_address) {
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d160      	bne.n	80004ca <Config_PTX_adress+0x136>
			switch (num_data_pipe) {
 8000408:	797b      	ldrb	r3, [r7, #5]
 800040a:	2b05      	cmp	r3, #5
 800040c:	d850      	bhi.n	80004b0 <Config_PTX_adress+0x11c>
 800040e:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <Config_PTX_adress+0x80>)
 8000410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000414:	0800042d 	.word	0x0800042d
 8000418:	08000443 	.word	0x08000443
 800041c:	08000459 	.word	0x08000459
 8000420:	0800046f 	.word	0x0800046f
 8000424:	08000485 	.word	0x08000485
 8000428:	0800049b 	.word	0x0800049b
				case 0 : pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; break; //adr défaut RX_ADDR_P0
 800042c:	23e7      	movs	r3, #231	; 0xe7
 800042e:	733b      	strb	r3, [r7, #12]
 8000430:	23e7      	movs	r3, #231	; 0xe7
 8000432:	72fb      	strb	r3, [r7, #11]
 8000434:	23e7      	movs	r3, #231	; 0xe7
 8000436:	72bb      	strb	r3, [r7, #10]
 8000438:	23e7      	movs	r3, #231	; 0xe7
 800043a:	727b      	strb	r3, [r7, #9]
 800043c:	23e7      	movs	r3, #231	; 0xe7
 800043e:	723b      	strb	r3, [r7, #8]
 8000440:	e036      	b.n	80004b0 <Config_PTX_adress+0x11c>
				case 1 : pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P1
 8000442:	23c2      	movs	r3, #194	; 0xc2
 8000444:	733b      	strb	r3, [r7, #12]
 8000446:	23c2      	movs	r3, #194	; 0xc2
 8000448:	72fb      	strb	r3, [r7, #11]
 800044a:	23c2      	movs	r3, #194	; 0xc2
 800044c:	72bb      	strb	r3, [r7, #10]
 800044e:	23c2      	movs	r3, #194	; 0xc2
 8000450:	727b      	strb	r3, [r7, #9]
 8000452:	23c2      	movs	r3, #194	; 0xc2
 8000454:	723b      	strb	r3, [r7, #8]
 8000456:	e02b      	b.n	80004b0 <Config_PTX_adress+0x11c>
				case 2 : pipeAddrVar[4]=0xC3; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P2
 8000458:	23c3      	movs	r3, #195	; 0xc3
 800045a:	733b      	strb	r3, [r7, #12]
 800045c:	23c2      	movs	r3, #194	; 0xc2
 800045e:	72fb      	strb	r3, [r7, #11]
 8000460:	23c2      	movs	r3, #194	; 0xc2
 8000462:	72bb      	strb	r3, [r7, #10]
 8000464:	23c2      	movs	r3, #194	; 0xc2
 8000466:	727b      	strb	r3, [r7, #9]
 8000468:	23c2      	movs	r3, #194	; 0xc2
 800046a:	723b      	strb	r3, [r7, #8]
 800046c:	e020      	b.n	80004b0 <Config_PTX_adress+0x11c>
				case 3 : pipeAddrVar[4]=0xC4; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P3
 800046e:	23c4      	movs	r3, #196	; 0xc4
 8000470:	733b      	strb	r3, [r7, #12]
 8000472:	23c2      	movs	r3, #194	; 0xc2
 8000474:	72fb      	strb	r3, [r7, #11]
 8000476:	23c2      	movs	r3, #194	; 0xc2
 8000478:	72bb      	strb	r3, [r7, #10]
 800047a:	23c2      	movs	r3, #194	; 0xc2
 800047c:	727b      	strb	r3, [r7, #9]
 800047e:	23c2      	movs	r3, #194	; 0xc2
 8000480:	723b      	strb	r3, [r7, #8]
 8000482:	e015      	b.n	80004b0 <Config_PTX_adress+0x11c>
				case 4 : pipeAddrVar[4]=0xC5; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P4
 8000484:	23c5      	movs	r3, #197	; 0xc5
 8000486:	733b      	strb	r3, [r7, #12]
 8000488:	23c2      	movs	r3, #194	; 0xc2
 800048a:	72fb      	strb	r3, [r7, #11]
 800048c:	23c2      	movs	r3, #194	; 0xc2
 800048e:	72bb      	strb	r3, [r7, #10]
 8000490:	23c2      	movs	r3, #194	; 0xc2
 8000492:	727b      	strb	r3, [r7, #9]
 8000494:	23c2      	movs	r3, #194	; 0xc2
 8000496:	723b      	strb	r3, [r7, #8]
 8000498:	e00a      	b.n	80004b0 <Config_PTX_adress+0x11c>
				case 5 : pipeAddrVar[4]=0xC6; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; break;//adr défaut RX_ADDR_P5
 800049a:	23c6      	movs	r3, #198	; 0xc6
 800049c:	733b      	strb	r3, [r7, #12]
 800049e:	23c2      	movs	r3, #194	; 0xc2
 80004a0:	72fb      	strb	r3, [r7, #11]
 80004a2:	23c2      	movs	r3, #194	; 0xc2
 80004a4:	72bb      	strb	r3, [r7, #10]
 80004a6:	23c2      	movs	r3, #194	; 0xc2
 80004a8:	727b      	strb	r3, [r7, #9]
 80004aa:	23c2      	movs	r3, #194	; 0xc2
 80004ac:	723b      	strb	r3, [r7, #8]
 80004ae:	bf00      	nop
			}
			nRF24_SetAddr(nRF24_PIPE0,pipeAddrVar);
 80004b0:	f107 0308 	add.w	r3, r7, #8
 80004b4:	4619      	mov	r1, r3
 80004b6:	2000      	movs	r0, #0
 80004b8:	f001 f84e 	bl	8001558 <nRF24_SetAddr>
			nRF24_SetAddr(nRF24_PIPETX,pipeAddrVar);
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	4619      	mov	r1, r3
 80004c2:	2006      	movs	r0, #6
 80004c4:	f001 f848 	bl	8001558 <nRF24_SetAddr>
 80004c8:	e015      	b.n	80004f6 <Config_PTX_adress+0x162>
		}
		//sinon, on fixe les adresses TX et RX0 à partir du contenu du tableau addresses.
		else {
			nRF24_SetAddr(nRF24_PIPE0,addresses_TX[num_data_pipe]);
 80004ca:	797a      	ldrb	r2, [r7, #5]
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4a44      	ldr	r2, [pc, #272]	; (80005e8 <Config_PTX_adress+0x254>)
 80004d6:	4413      	add	r3, r2
 80004d8:	4619      	mov	r1, r3
 80004da:	2000      	movs	r0, #0
 80004dc:	f001 f83c 	bl	8001558 <nRF24_SetAddr>
			nRF24_SetAddr(nRF24_PIPETX,addresses_TX[num_data_pipe]);
 80004e0:	797a      	ldrb	r2, [r7, #5]
 80004e2:	4613      	mov	r3, r2
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	4413      	add	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4a3f      	ldr	r2, [pc, #252]	; (80005e8 <Config_PTX_adress+0x254>)
 80004ec:	4413      	add	r3, r2
 80004ee:	4619      	mov	r1, r3
 80004f0:	2006      	movs	r0, #6
 80004f2:	f001 f831 	bl	8001558 <nRF24_SetAddr>
		}

		//vérification des adresses :
		ReadMBReg(0x0A, verif_RX0_Adr, 5);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	2205      	movs	r2, #5
 80004fc:	4619      	mov	r1, r3
 80004fe:	200a      	movs	r0, #10
 8000500:	f000 ff03 	bl	800130a <ReadMBReg>
		ReadMBReg(0x10, verif_TX_Adr, 5);
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	2205      	movs	r2, #5
 800050a:	4619      	mov	r1, r3
 800050c:	2010      	movs	r0, #16
 800050e:	f000 fefc 	bl	800130a <ReadMBReg>
		}
		else {
			nRF24_SetAddr(nRF24_PIPETX, addresses_TX[num_data_pipe]);
		}
	}
}
 8000512:	e063      	b.n	80005dc <Config_PTX_adress+0x248>
		if (Addr_Default == Default_pipe_address) {
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d155      	bne.n	80005c6 <Config_PTX_adress+0x232>
			switch (num_data_pipe) {
 800051a:	797b      	ldrb	r3, [r7, #5]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d84b      	bhi.n	80005b8 <Config_PTX_adress+0x224>
 8000520:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <Config_PTX_adress+0x194>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	08000541 	.word	0x08000541
 800052c:	08000555 	.word	0x08000555
 8000530:	08000569 	.word	0x08000569
 8000534:	0800057d 	.word	0x0800057d
 8000538:	08000591 	.word	0x08000591
 800053c:	080005a5 	.word	0x080005a5
				case 0 : pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; //adr défaut RX_ADDR_P0
 8000540:	23e7      	movs	r3, #231	; 0xe7
 8000542:	733b      	strb	r3, [r7, #12]
 8000544:	23e7      	movs	r3, #231	; 0xe7
 8000546:	72fb      	strb	r3, [r7, #11]
 8000548:	23e7      	movs	r3, #231	; 0xe7
 800054a:	72bb      	strb	r3, [r7, #10]
 800054c:	23e7      	movs	r3, #231	; 0xe7
 800054e:	727b      	strb	r3, [r7, #9]
 8000550:	23e7      	movs	r3, #231	; 0xe7
 8000552:	723b      	strb	r3, [r7, #8]
				case 1 : pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; //adr défaut RX_ADDR_P1
 8000554:	23c2      	movs	r3, #194	; 0xc2
 8000556:	733b      	strb	r3, [r7, #12]
 8000558:	23c2      	movs	r3, #194	; 0xc2
 800055a:	72fb      	strb	r3, [r7, #11]
 800055c:	23c2      	movs	r3, #194	; 0xc2
 800055e:	72bb      	strb	r3, [r7, #10]
 8000560:	23c2      	movs	r3, #194	; 0xc2
 8000562:	727b      	strb	r3, [r7, #9]
 8000564:	23c2      	movs	r3, #194	; 0xc2
 8000566:	723b      	strb	r3, [r7, #8]
				case 2 : pipeAddrVar[4]=0xC3; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; //adr défaut RX_ADDR_P2
 8000568:	23c3      	movs	r3, #195	; 0xc3
 800056a:	733b      	strb	r3, [r7, #12]
 800056c:	23c2      	movs	r3, #194	; 0xc2
 800056e:	72fb      	strb	r3, [r7, #11]
 8000570:	23c2      	movs	r3, #194	; 0xc2
 8000572:	72bb      	strb	r3, [r7, #10]
 8000574:	23c2      	movs	r3, #194	; 0xc2
 8000576:	727b      	strb	r3, [r7, #9]
 8000578:	23c2      	movs	r3, #194	; 0xc2
 800057a:	723b      	strb	r3, [r7, #8]
				case 3 : pipeAddrVar[4]=0xC4; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; //adr défaut RX_ADDR_P3
 800057c:	23c4      	movs	r3, #196	; 0xc4
 800057e:	733b      	strb	r3, [r7, #12]
 8000580:	23c2      	movs	r3, #194	; 0xc2
 8000582:	72fb      	strb	r3, [r7, #11]
 8000584:	23c2      	movs	r3, #194	; 0xc2
 8000586:	72bb      	strb	r3, [r7, #10]
 8000588:	23c2      	movs	r3, #194	; 0xc2
 800058a:	727b      	strb	r3, [r7, #9]
 800058c:	23c2      	movs	r3, #194	; 0xc2
 800058e:	723b      	strb	r3, [r7, #8]
				case 4 : pipeAddrVar[4]=0xC5; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; //adr défaut RX_ADDR_P4
 8000590:	23c5      	movs	r3, #197	; 0xc5
 8000592:	733b      	strb	r3, [r7, #12]
 8000594:	23c2      	movs	r3, #194	; 0xc2
 8000596:	72fb      	strb	r3, [r7, #11]
 8000598:	23c2      	movs	r3, #194	; 0xc2
 800059a:	72bb      	strb	r3, [r7, #10]
 800059c:	23c2      	movs	r3, #194	; 0xc2
 800059e:	727b      	strb	r3, [r7, #9]
 80005a0:	23c2      	movs	r3, #194	; 0xc2
 80005a2:	723b      	strb	r3, [r7, #8]
				case 5 : pipeAddrVar[4]=0xC6; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; //adr défaut RX_ADDR_P5
 80005a4:	23c6      	movs	r3, #198	; 0xc6
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	23c2      	movs	r3, #194	; 0xc2
 80005aa:	72fb      	strb	r3, [r7, #11]
 80005ac:	23c2      	movs	r3, #194	; 0xc2
 80005ae:	72bb      	strb	r3, [r7, #10]
 80005b0:	23c2      	movs	r3, #194	; 0xc2
 80005b2:	727b      	strb	r3, [r7, #9]
 80005b4:	23c2      	movs	r3, #194	; 0xc2
 80005b6:	723b      	strb	r3, [r7, #8]
			nRF24_SetAddr(nRF24_PIPETX,pipeAddrVar);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	4619      	mov	r1, r3
 80005be:	2006      	movs	r0, #6
 80005c0:	f000 ffca 	bl	8001558 <nRF24_SetAddr>
}
 80005c4:	e00a      	b.n	80005dc <Config_PTX_adress+0x248>
			nRF24_SetAddr(nRF24_PIPETX, addresses_TX[num_data_pipe]);
 80005c6:	797a      	ldrb	r2, [r7, #5]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <Config_PTX_adress+0x254>)
 80005d2:	4413      	add	r3, r2
 80005d4:	4619      	mov	r1, r3
 80005d6:	2006      	movs	r0, #6
 80005d8:	f000 ffbe 	bl	8001558 <nRF24_SetAddr>
}
 80005dc:	bf00      	nop
 80005de:	3724      	adds	r7, #36	; 0x24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000004 	.word	0x20000004

080005ec <Config_ESB_Protocol>:

//Active le protocole Enhanced ShockBurst, notamment l'auto acknowledgment et l'auto retransmit.
//On spécifie, pour le PTX uniquement, le nb de retransmission (ARC --> count_retries, de 0 à 15) et le
//délai entre retransmission (ARD --> delay_retries, de 0 à 15)
void Config_ESB_Protocol(uint8_t delay_retries, uint8_t count_retries) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;

	//autorisation de l'auto acknowledgement pour tous les data pipes
	nRF24_EnableAA(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f001 f887 	bl	8001710 <nRF24_EnableAA>
	nRF24_EnableAA(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 f884 	bl	8001710 <nRF24_EnableAA>
	nRF24_EnableAA(2);
 8000608:	2002      	movs	r0, #2
 800060a:	f001 f881 	bl	8001710 <nRF24_EnableAA>
	nRF24_EnableAA(3);
 800060e:	2003      	movs	r0, #3
 8000610:	f001 f87e 	bl	8001710 <nRF24_EnableAA>
	nRF24_EnableAA(4);
 8000614:	2004      	movs	r0, #4
 8000616:	f001 f87b 	bl	8001710 <nRF24_EnableAA>
	nRF24_EnableAA(5);
 800061a:	2005      	movs	r0, #5
 800061c:	f001 f878 	bl	8001710 <nRF24_EnableAA>

	//réglage paramètres de retransmission
	nRF24_SetAutoRetr(delay_retries,count_retries);
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ff6b 	bl	8001502 <nRF24_SetAutoRetr>

	//verification des registres
	//reg = ReadReg(0x01); //registre EN_AA
	//reg = ReadReg(0x04); //registre SETUP_RETR
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <StopListen>:
}

//la fonction active la fonction TX (mise à 0 de la broche CE).
//Le transceiver doit être au préalable sorti du mode power down (donc en mode StandBy I) et
//et le mode TX doit avoir été sélectionné (PRIM_RX = 0).
void StopListen() {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	nRF24_CE_L();
 8000638:	f7ff fde2 	bl	8000200 <nRF24_CE_L>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <Transmit_Message>:
	}
}

//La fonction transmet le message Message de longueur donnée par l'argument longueur.
//La fonction indique aussi sur l'UART si la transmission s'est faite.
void Transmit_Message(uint8_t *Message,uint8_t longueur) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]

	payload_length = longueur;
 800064c:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <Transmit_Message+0x80>)
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	7013      	strb	r3, [r2, #0]

	UART_SendStr("Message a transmettre:>");
 8000652:	481c      	ldr	r0, [pc, #112]	; (80006c4 <Transmit_Message+0x84>)
 8000654:	f001 fad4 	bl	8001c00 <UART_SendStr>
	UART_SendBufHex((char *)Message,payload_length);
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <Transmit_Message+0x80>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f001 fae3 	bl	8001c2c <UART_SendBufHex>
	UART_SendStr("<: ");
 8000666:	4818      	ldr	r0, [pc, #96]	; (80006c8 <Transmit_Message+0x88>)
 8000668:	f001 faca 	bl	8001c00 <UART_SendStr>

	// Transmit a packet
	tx_result = nRF24_TransmitPacket(Message, payload_length);
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Transmit_Message+0x80>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff fde4 	bl	8000240 <nRF24_TransmitPacket>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <Transmit_Message+0x8c>)
 800067e:	701a      	strb	r2, [r3, #0]
	switch (tx_result) {
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <Transmit_Message+0x8c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d007      	beq.n	8000698 <Transmit_Message+0x58>
 8000688:	2b03      	cmp	r3, #3
 800068a:	d009      	beq.n	80006a0 <Transmit_Message+0x60>
 800068c:	2b01      	cmp	r3, #1
 800068e:	d10b      	bne.n	80006a8 <Transmit_Message+0x68>
		case nRF24_TX_SUCCESS:
			UART_SendStr("OK");
 8000690:	480f      	ldr	r0, [pc, #60]	; (80006d0 <Transmit_Message+0x90>)
 8000692:	f001 fab5 	bl	8001c00 <UART_SendStr>
			break;
 8000696:	e00b      	b.n	80006b0 <Transmit_Message+0x70>
		case nRF24_TX_TIMEOUT:
			UART_SendStr("TIMEOUT");
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <Transmit_Message+0x94>)
 800069a:	f001 fab1 	bl	8001c00 <UART_SendStr>
			break;
 800069e:	e007      	b.n	80006b0 <Transmit_Message+0x70>
		case nRF24_TX_MAXRT:
			UART_SendStr("MAX RETRANSMIT");
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <Transmit_Message+0x98>)
 80006a2:	f001 faad 	bl	8001c00 <UART_SendStr>
			break;
 80006a6:	e003      	b.n	80006b0 <Transmit_Message+0x70>
		default:
			UART_SendStr("ERROR");
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <Transmit_Message+0x9c>)
 80006aa:	f001 faa9 	bl	8001c00 <UART_SendStr>
			break;
 80006ae:	bf00      	nop
	}
	UART_SendStr("\r\n");
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <Transmit_Message+0xa0>)
 80006b2:	f001 faa5 	bl	8001c00 <UART_SendStr>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000
 80006c4:	080030cc 	.word	0x080030cc
 80006c8:	080030e4 	.word	0x080030e4
 80006cc:	20000052 	.word	0x20000052
 80006d0:	080030e8 	.word	0x080030e8
 80006d4:	080030ec 	.word	0x080030ec
 80006d8:	080030f4 	.word	0x080030f4
 80006dc:	08003104 	.word	0x08003104
 80006e0:	0800310c 	.word	0x0800310c

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LL_RCC_MSI_Enable+0x1c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <LL_RCC_MSI_Enable+0x1c>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LL_RCC_MSI_IsReady+0x20>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	2b02      	cmp	r3, #2
 8000766:	d101      	bne.n	800076c <LL_RCC_MSI_IsReady+0x14>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <LL_RCC_MSI_IsReady+0x16>
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <LL_RCC_SetSysClkSource+0x24>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f023 0203 	bic.w	r2, r3, #3
 800078c:	4904      	ldr	r1, [pc, #16]	; (80007a0 <LL_RCC_SetSysClkSource+0x24>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	608b      	str	r3, [r1, #8]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <LL_RCC_GetSysClkSource+0x18>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 030c 	and.w	r3, r3, #12
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	608b      	str	r3, [r1, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40021000 	.word	0x40021000

080007e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LL_RCC_SetAPB1Prescaler+0x24>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80007f8:	4904      	ldr	r1, [pc, #16]	; (800080c <LL_RCC_SetAPB1Prescaler+0x24>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	608b      	str	r3, [r1, #8]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_SetAPB2Prescaler+0x24>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000820:	4904      	ldr	r1, [pc, #16]	; (8000834 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	608b      	str	r3, [r1, #8]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <LL_RCC_SetUSARTClockSource+0x30>)
 8000842:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	0c1b      	lsrs	r3, r3, #16
 800084a:	43db      	mvns	r3, r3
 800084c:	401a      	ands	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	b29b      	uxth	r3, r3
 8000852:	4905      	ldr	r1, [pc, #20]	; (8000868 <LL_RCC_SetUSARTClockSource+0x30>)
 8000854:	4313      	orrs	r3, r2
 8000856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <LL_RCC_PLL_Enable+0x1c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <LL_RCC_PLL_Enable+0x1c>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <LL_RCC_PLL_IsReady+0x24>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800089c:	d101      	bne.n	80008a2 <LL_RCC_PLL_IsReady+0x16>
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <LL_RCC_PLL_IsReady+0x18>
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	68f9      	ldr	r1, [r7, #12]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	4311      	orrs	r1, r2
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	0212      	lsls	r2, r2, #8
 80008d4:	4311      	orrs	r1, r2
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	430a      	orrs	r2, r1
 80008da:	4904      	ldr	r1, [pc, #16]	; (80008ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000
 80008f0:	f9ff808c 	.word	0xf9ff808c

080008f4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80008fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000924:	4904      	ldr	r1, [pc, #16]	; (8000938 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4313      	orrs	r3, r2
 800092a:	600b      	str	r3, [r1, #0]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40007000 	.word	0x40007000

0800093c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <LL_FLASH_SetLatency+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f023 0207 	bic.w	r2, r3, #7
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <LL_FLASH_SetLatency+0x24>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	600b      	str	r3, [r1, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40022000 	.word	0x40022000

08000964 <SystemClock_Config_80M>:
  *            APB2 Prescaler                 = 1
  *            MSI Frequency(Hz)              = 4000000
  *            Flash Latency(WS)              = 4
  */
void SystemClock_Config_80M()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	/* MSI configuration and activation */
	LL_RCC_MSI_Enable();			// normalement il est deja enabled
 8000968:	f7ff fee6 	bl	8000738 <LL_RCC_MSI_Enable>
	while	(LL_RCC_MSI_IsReady() != 1)	// c'est pour le cas ou on l'aurait change
 800096c:	bf00      	nop
 800096e:	f7ff fef3 	bl	8000758 <LL_RCC_MSI_IsReady>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d1fa      	bne.n	800096e <SystemClock_Config_80M+0xa>
		{ }

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);	// 4 pour 80MHz
 8000978:	2004      	movs	r0, #4
 800097a:	f7ff ffdf 	bl	800093c <LL_FLASH_SetLatency>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1); //réglage tension régulateur interne
 800097e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000982:	f7ff ffc7 	bl	8000914 <LL_PWR_SetRegulVoltageScaling>

	// demarrer la PLL principale 4MHz --> 80 MHz
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000986:	2300      	movs	r3, #0
 8000988:	2228      	movs	r2, #40	; 0x28
 800098a:	2100      	movs	r1, #0
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ff91 	bl	80008b4 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000992:	f7ff ff6b 	bl	800086c <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8000996:	f7ff ffad 	bl	80008f4 <LL_RCC_PLL_EnableDomain_SYS>
	while	( LL_RCC_PLL_IsReady() != 1 )
 800099a:	bf00      	nop
 800099c:	f7ff ff76 	bl	800088c <LL_RCC_PLL_IsReady>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d1fa      	bne.n	800099c <SystemClock_Config_80M+0x38>
		{ }

	// connecter Sysclk sur cette PLL
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff ff0a 	bl	80007c0 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f7ff fee5 	bl	800077c <LL_RCC_SetSysClkSource>
	while	( LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 80009b2:	bf00      	nop
 80009b4:	f7ff fef6 	bl	80007a4 <LL_RCC_GetSysClkSource>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b0c      	cmp	r3, #12
 80009bc:	d1fa      	bne.n	80009b4 <SystemClock_Config_80M+0x50>
		{ }

	/* Set APB1 & APB2 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ff12 	bl	80007e8 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ff23 	bl	8000810 <LL_RCC_SetAPB2Prescaler>

	//update global variable SystemCoreClock --> give access to CPU clock frequency.
	LL_SetSystemCoreClock(80000000);
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <SystemClock_Config_80M+0x80>)
 80009cc:	f002 fade 	bl	8002f8c <LL_SetSystemCoreClock>
	LL_Init1msTick(80000000);
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <SystemClock_Config_80M+0x80>)
 80009d2:	f002 faa7 	bl	8002f24 <LL_Init1msTick>

	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80009d6:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80009da:	f7ff ff2d 	bl	8000838 <LL_RCC_SetUSARTClockSource>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	04c4b400 	.word	0x04c4b400

080009e8 <mySystick>:


// config systick avec interrupt. L'argument periode_en_ticks indique la période de débordement
//du Systick, donnée en nombre de périodes du buc clock.
void mySystick( unsigned int periode_en_ticks )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	// periode
	SysTick->LOAD  = periode_en_ticks - 1;
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <mySystick+0x3c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	6053      	str	r3, [r2, #4]

	// priorite
	NVIC_SetPriority( SysTick_IRQn, 7 );
 80009f8:	2107      	movs	r1, #7
 80009fa:	f04f 30ff 	mov.w	r0, #4294967295
 80009fe:	f7ff fe71 	bl	80006e4 <__NVIC_SetPriority>
	// init counter
	SysTick->VAL = 0;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <mySystick+0x3c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
	// prescale (0 ===> %8)
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <mySystick+0x3c>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	601a      	str	r2, [r3, #0]
	// enable timer, enable interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <mySystick+0x3c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <mySystick+0x3c>)
 8000a14:	f043 0303 	orr.w	r3, r3, #3
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4013      	ands	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000

08000b6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa93 f3a3 	rbit	r3, r3
 8000b86:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000b92:	2320      	movs	r3, #32
 8000b94:	e003      	b.n	8000b9e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	fab3 f383 	clz	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	401a      	ands	r2, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	fa93 f3a3 	rbit	r3, r3
 8000bb4:	61fb      	str	r3, [r7, #28]
  return result;
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	e003      	b.n	8000bcc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	fab3 f383 	clz	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	372c      	adds	r7, #44	; 0x2c
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b08b      	sub	sp, #44	; 0x2c
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa93 f3a3 	rbit	r3, r3
 8000c00:	613b      	str	r3, [r7, #16]
  return result;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	e003      	b.n	8000c18 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fab3 f383 	clz	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	61fb      	str	r3, [r7, #28]
  return result;
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	e003      	b.n	8000c46 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	fab3 f383 	clz	r3, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	60da      	str	r2, [r3, #12]
}
 8000c54:	bf00      	nop
 8000c56:	372c      	adds	r7, #44	; 0x2c
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	0c1b      	lsrs	r3, r3, #16
 8000c96:	43db      	mvns	r3, r3
 8000c98:	ea02 0103 	and.w	r1, r2, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	0c1b      	lsrs	r3, r3, #16
 8000ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa93 f3a3 	rbit	r3, r3
 8000ca8:	60fb      	str	r3, [r7, #12]
  return result;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	e003      	b.n	8000cc0 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fab3 f383 	clz	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	fa03 f202 	lsl.w	r2, r3, r2
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cd6:	bf00      	nop
 8000cd8:	371c      	adds	r7, #28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <GPIO_init>:
//#include "options.h"
#include "gpio.h"


void GPIO_init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
	  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]

	  /* GPIO Ports Clock Enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f7ff ff16 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff ff13 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff ff10 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, nRF_CSN_Pin|nRF_CE_Pin);
 8000d1c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f7ff ff9c 	bl	8000c60 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	483c      	ldr	r0, [pc, #240]	; (8000e20 <GPIO_init+0x138>)
 8000d2e:	f7ff ff97 	bl	8000c60 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(Clock_Monitor_GPIO_Port, Clock_Monitor_Pin);
 8000d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d36:	483b      	ldr	r0, [pc, #236]	; (8000e24 <GPIO_init+0x13c>)
 8000d38:	f7ff ff92 	bl	8000c60 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = User_Button_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4835      	ldr	r0, [pc, #212]	; (8000e24 <GPIO_init+0x13c>)
 8000d50:	f001 fb45 	bl	80023de <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = nRF_CSN_Pin|nRF_CE_Pin;
 8000d54:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d58:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f001 fb34 	bl	80023de <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = User_LED_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4823      	ldr	r0, [pc, #140]	; (8000e20 <GPIO_init+0x138>)
 8000d92:	f001 fb24 	bl	80023de <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = Clock_Monitor_Pin;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(Clock_Monitor_GPIO_Port, &GPIO_InitStruct);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	481c      	ldr	r0, [pc, #112]	; (8000e24 <GPIO_init+0x13c>)
 8000db2:	f001 fb14 	bl	80023de <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000db6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ff5e 	bl	8000c7c <LL_SYSCFG_SetEXTISource>

	  /**/
	  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
	  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
	  EXTI_InitStruct.LineCommand = ENABLE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  LL_EXTI_Init(&EXTI_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f8c6 	bl	8001f70 <LL_EXTI_Init>

	  /**/
	  LL_GPIO_SetPinPull(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_PULL_UP);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <GPIO_init+0x138>)
 8000dea:	f7ff fefc 	bl	8000be6 <LL_GPIO_SetPinPull>

	  /**/
	  LL_GPIO_SetPinMode(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_MODE_INPUT);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2101      	movs	r1, #1
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <GPIO_init+0x138>)
 8000df4:	f7ff feba 	bl	8000b6c <LL_GPIO_SetPinMode>

	  /* EXTI interrupt init*/
	  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000df8:	f7ff fe16 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe66 	bl	8000ad4 <NVIC_EncodePriority>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f7ff fe37 	bl	8000a80 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(EXTI0_IRQn);
 8000e12:	2006      	movs	r0, #6
 8000e14:	f7ff fe16 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48000800 	.word	0x48000800

08000e28 <__NVIC_SetPriorityGrouping>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <Delay_ms>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f002 f831 	bl	8002f40 <LL_mDelay>
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <main>:
uint8_t Message[taille_message];
uint8_t channel_nb = 60; //n° du canal radio utilisé (//channel 60 --> 2460 MHz)
uint8_t adr_data_pipe_used = 1; //numéro du data pipe utilisé pour la transmission (de 0 à 5)

int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /*clock domains activation*/
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff ffd7 	bl	8000ea0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ef2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ef6:	f7ff ffbb 	bl	8000e70 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efa:	2003      	movs	r0, #3
 8000efc:	f7ff ff94 	bl	8000e28 <__NVIC_SetPriorityGrouping>

  // config GPIO
  GPIO_init();
 8000f00:	f7ff fef2 	bl	8000ce8 <GPIO_init>
  //config clock
  SystemClock_Config_80M();
 8000f04:	f7ff fd2e 	bl	8000964 <SystemClock_Config_80M>
  //config bus SPI1 (pour la communication avec le transceiver nRF24L01)
  SPI1_Init();
 8000f08:	f000 fcb0 	bl	800186c <SPI1_Init>
  //config USART2
  USART2_Init();
 8000f0c:	f000 fe10 	bl	8001b30 <USART2_Init>

  //configuration du transceiver en mode PTX
  Init_Transceiver();
 8000f10:	f7ff f9e6 	bl	80002e0 <Init_Transceiver>
  Config_RF_channel(channel_nb,nRF24_DR_250kbps,nRF24_TXPWR_6dBm);
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <main+0x84>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2204      	movs	r2, #4
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fa03 	bl	8000328 <Config_RF_channel>
  Config_CRC(CRC_Field_On, CRC_Field_1byte);
 8000f22:	2100      	movs	r1, #0
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fa18 	bl	800035a <Config_CRC>
  //Adresse sur 5 bits. Transmission sur le data pipe adr_data_pipe_used.
  Config_PTX_adress(5,Default_pipe_address,adr_data_pipe_used,nRF24_AA_ON);
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <main+0x88>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2100      	movs	r1, #0
 8000f32:	2005      	movs	r0, #5
 8000f34:	f7ff fa2e 	bl	8000394 <Config_PTX_adress>
  Config_ESB_Protocol(nRF24_ARD_1000us,10);
 8000f38:	210a      	movs	r1, #10
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f7ff fb56 	bl	80005ec <Config_ESB_Protocol>
  //on sort du mode power down
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f000 fa6f 	bl	8001424 <nRF24_SetPowerMode>
  Delay_ms(2); //Attente 2 ms (1.5 ms pour la sortie du mode power down).
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff ffc2 	bl	8000ed0 <Delay_ms>

  //Entrée en mode TX
  nRF24_SetOperationalMode(nRF24_MODE_TX);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fa88 	bl	8001462 <nRF24_SetOperationalMode>
  StopListen();
 8000f52:	f7ff fb6f 	bl	8000634 <StopListen>


  //configuration interruption Systick (attention, il n'y a quue 23 bits dans le registre load ...
  //mySystick( SystemCoreClock * 2 );	// 0.5 Hz --> 2 s
  //on va partir sur une période de 100 ms
  mySystick( SystemCoreClock /10 ); //10 Hz --> 0.1 s
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <main+0x8c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <main+0x90>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fd40 	bl	80009e8 <mySystick>

  while(1) {
 8000f68:	e7fe      	b.n	8000f68 <main+0x80>
 8000f6a:	bf00      	nop
 8000f6c:	2000002a 	.word	0x2000002a
 8000f70:	2000002b 	.word	0x2000002b
 8000f74:	2000002c 	.word	0x2000002c
 8000f78:	cccccccd 	.word	0xcccccccd

08000f7c <SysTick_Handler>:

// systick interrupt handler --> transmission d'une nouvelle trame toutes les 2 s
//comme l'interuption a lieu toutes les 100 ms, on ajoute un compteur pour transmettre
//quand le compteur atteint 20.
void SysTick_Handler()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	uint8_t i;

	if (cptr_transmit == period_transmit) {
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <SysTick_Handler+0x7c>)
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <SysTick_Handler+0x80>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d129      	bne.n	8000fe2 <SysTick_Handler+0x66>

		//sortie du mode power down
		nRF24_SetPowerMode(nRF24_PWR_UP);
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f000 fa48 	bl	8001424 <nRF24_SetPowerMode>
		//En fait, on attend 200 ms car la base de temps du systick est 100 ms.
		//LE test montre qu'on n'est pas obligé de mettre un délai. Le temps de compléter le tableau
		//Message et le temps de transmettre sur l'UART prend au moins 5 ms.

		//préparation du message à transmettre
		for (i = 0; i < 17; i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	e008      	b.n	8000fac <SysTick_Handler+0x30>
			Message[i] = entete_message[i];
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4918      	ldr	r1, [pc, #96]	; (8001000 <SysTick_Handler+0x84>)
 8000fa0:	5c89      	ldrb	r1, [r1, r2]
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <SysTick_Handler+0x88>)
 8000fa4:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 17; i++) {
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d9f3      	bls.n	8000f9a <SysTick_Handler+0x1e>
		}
		Message[17] = '_';
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <SysTick_Handler+0x88>)
 8000fb4:	225f      	movs	r2, #95	; 0x5f
 8000fb6:	745a      	strb	r2, [r3, #17]
		Message[18] = cptr;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <SysTick_Handler+0x8c>)
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <SysTick_Handler+0x88>)
 8000fbe:	749a      	strb	r2, [r3, #18]

		Transmit_Message(Message,taille_message);
 8000fc0:	2114      	movs	r1, #20
 8000fc2:	4810      	ldr	r0, [pc, #64]	; (8001004 <SysTick_Handler+0x88>)
 8000fc4:	f7ff fb3c 	bl	8000640 <Transmit_Message>
		cptr++;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <SysTick_Handler+0x8c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <SysTick_Handler+0x8c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		cptr_transmit = 1;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SysTick_Handler+0x7c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]

		//retour dans le mode power down
		nRF24_SetPowerMode(nRF24_PWR_DOWN);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 fa22 	bl	8001424 <nRF24_SetPowerMode>
	}
	else {
		cptr_transmit ++;
	}
}
 8000fe0:	e005      	b.n	8000fee <SysTick_Handler+0x72>
		cptr_transmit ++;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Handler+0x7c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <SysTick_Handler+0x7c>)
 8000fec:	701a      	strb	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	20000029 	.word	0x20000029
 8001000:	0800312c 	.word	0x0800312c
 8001004:	20000074 	.word	0x20000074
 8001008:	2000004c 	.word	0x2000004c

0800100c <LL_GPIO_SetOutputPin>:
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	619a      	str	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_GPIO_ResetOutputPin>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d101      	bne.n	80010c8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	2b80      	cmp	r3, #128	; 0x80
 80010e8:	d101      	bne.n	80010ee <LL_SPI_IsActiveFlag_BSY+0x18>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	330c      	adds	r3, #12
 8001126:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	78fa      	ldrb	r2, [r7, #3]
 800112c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin);
 800113e:	2110      	movs	r1, #16
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f7ff ff70 	bl	8001028 <LL_GPIO_ResetOutputPin>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin);
 8001150:	2110      	movs	r1, #16
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f7ff ff59 	bl	800100c <LL_GPIO_SetOutputPin>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
    LL_SPI_SetRxFIFOThreshold(NRF_SPI,LL_SPI_RX_FIFO_TH_QUARTER);
 800116a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <nRF24_LL_RW+0x60>)
 8001170:	f7ff ff78 	bl	8001064 <LL_SPI_SetRxFIFOThreshold>
    LL_SPI_Enable(NRF_SPI);
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <nRF24_LL_RW+0x60>)
 8001176:	f7ff ff65 	bl	8001044 <LL_SPI_Enable>
    while (LL_SPI_IsActiveFlag_BSY(NRF_SPI));
 800117a:	bf00      	nop
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <nRF24_LL_RW+0x60>)
 800117e:	f7ff ffaa 	bl	80010d6 <LL_SPI_IsActiveFlag_BSY>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f9      	bne.n	800117c <nRF24_LL_RW+0x1c>
    while (!LL_SPI_IsActiveFlag_TXE(NRF_SPI));
 8001188:	bf00      	nop
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <nRF24_LL_RW+0x60>)
 800118c:	f7ff ff90 	bl	80010b0 <LL_SPI_IsActiveFlag_TXE>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f9      	beq.n	800118a <nRF24_LL_RW+0x2a>
    LL_SPI_TransmitData8(NRF_SPI, data);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4619      	mov	r1, r3
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <nRF24_LL_RW+0x60>)
 800119c:	f7ff ffbb 	bl	8001116 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(NRF_SPI));
 80011a0:	bf00      	nop
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <nRF24_LL_RW+0x60>)
 80011a4:	f7ff ff71 	bl	800108a <LL_SPI_IsActiveFlag_RXNE>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f9      	beq.n	80011a2 <nRF24_LL_RW+0x42>
    return LL_SPI_ReceiveData8(NRF_SPI);
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <nRF24_LL_RW+0x60>)
 80011b0:	f7ff ffa4 	bl	80010fc <LL_SPI_ReceiveData8>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40013000 	.word	0x40013000

080011c4 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80011ce:	f7ff ffb4 	bl	800113a <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffc0 	bl	8001160 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80011e0:	20ff      	movs	r0, #255	; 0xff
 80011e2:	f7ff ffbd 	bl	8001160 <nRF24_LL_RW>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80011ea:	f7ff ffaf 	bl	800114c <nRF24_CSN_H>

	return value;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001208:	f7ff ff97 	bl	800113a <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b1f      	cmp	r3, #31
 8001210:	d810      	bhi.n	8001234 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	b25b      	sxtb	r3, r3
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff9b 	bl	8001160 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff97 	bl	8001160 <nRF24_LL_RW>
 8001232:	e013      	b.n	800125c <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff92 	bl	8001160 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2be1      	cmp	r3, #225	; 0xe1
 8001240:	d00c      	beq.n	800125c <nRF24_WriteReg+0x64>
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2be2      	cmp	r3, #226	; 0xe2
 8001246:	d009      	beq.n	800125c <nRF24_WriteReg+0x64>
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2be3      	cmp	r3, #227	; 0xe3
 800124c:	d006      	beq.n	800125c <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2bff      	cmp	r3, #255	; 0xff
 8001252:	d003      	beq.n	800125c <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff82 	bl	8001160 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800125c:	f7ff ff76 	bl	800114c <nRF24_CSN_H>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001278:	f7ff ff5f 	bl	800113a <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff6e 	bl	8001160 <nRF24_LL_RW>
	while (count--) {
 8001284:	e007      	b.n	8001296 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8001286:	683c      	ldr	r4, [r7, #0]
 8001288:	1c63      	adds	r3, r4, #1
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	20ff      	movs	r0, #255	; 0xff
 800128e:	f7ff ff67 	bl	8001160 <nRF24_LL_RW>
 8001292:	4603      	mov	r3, r0
 8001294:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	1e5a      	subs	r2, r3, #1
 800129a:	71ba      	strb	r2, [r7, #6]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f2      	bne.n	8001286 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80012a0:	f7ff ff54 	bl	800114c <nRF24_CSN_H>
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80012bc:	f7ff ff3d 	bl	800113a <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff4c 	bl	8001160 <nRF24_LL_RW>
	while (count--) {
 80012c8:	e006      	b.n	80012d8 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	603a      	str	r2, [r7, #0]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff44 	bl	8001160 <nRF24_LL_RW>
	while (count--) {
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	1e5a      	subs	r2, r3, #1
 80012dc:	71ba      	strb	r2, [r7, #6]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f3      	bne.n	80012ca <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80012e2:	f7ff ff33 	bl	800114c <nRF24_CSN_H>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <ReadReg>:

uint8_t ReadReg(uint8_t reg) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
	return nRF24_ReadReg(reg);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff62 	bl	80011c4 <nRF24_ReadReg>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <ReadMBReg>:

void ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	6039      	str	r1, [r7, #0]
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	4613      	mov	r3, r2
 8001318:	71bb      	strb	r3, [r7, #6]
	nRF24_ReadMBReg(reg, pBuf, count);
 800131a:	79ba      	ldrb	r2, [r7, #6]
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffa1 	bl	8001268 <nRF24_ReadMBReg>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8001332:	2108      	movs	r1, #8
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff5f 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800133a:	213f      	movs	r1, #63	; 0x3f
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ff5b 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8001342:	2103      	movs	r1, #3
 8001344:	2002      	movs	r0, #2
 8001346:	f7ff ff57 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800134a:	2103      	movs	r1, #3
 800134c:	2003      	movs	r0, #3
 800134e:	f7ff ff53 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8001352:	2103      	movs	r1, #3
 8001354:	2004      	movs	r0, #4
 8001356:	f7ff ff4f 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800135a:	2102      	movs	r1, #2
 800135c:	2005      	movs	r0, #5
 800135e:	f7ff ff4b 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8001362:	210e      	movs	r1, #14
 8001364:	2006      	movs	r0, #6
 8001366:	f7ff ff47 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800136a:	2100      	movs	r1, #0
 800136c:	2007      	movs	r0, #7
 800136e:	f7ff ff43 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8001372:	2100      	movs	r1, #0
 8001374:	2011      	movs	r0, #17
 8001376:	f7ff ff3f 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800137a:	2100      	movs	r1, #0
 800137c:	2012      	movs	r0, #18
 800137e:	f7ff ff3b 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8001382:	2100      	movs	r1, #0
 8001384:	2013      	movs	r0, #19
 8001386:	f7ff ff37 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800138a:	2100      	movs	r1, #0
 800138c:	2014      	movs	r0, #20
 800138e:	f7ff ff33 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8001392:	2100      	movs	r1, #0
 8001394:	2015      	movs	r0, #21
 8001396:	f7ff ff2f 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800139a:	2100      	movs	r1, #0
 800139c:	2016      	movs	r0, #22
 800139e:	f7ff ff2b 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80013a2:	2100      	movs	r1, #0
 80013a4:	201c      	movs	r0, #28
 80013a6:	f7ff ff27 	bl	80011f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80013aa:	2100      	movs	r1, #0
 80013ac:	201d      	movs	r0, #29
 80013ae:	f7ff ff23 	bl	80011f8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80013b2:	f000 f9da 	bl	800176a <nRF24_FlushRX>
	nRF24_FlushTX();
 80013b6:	f000 f9d0 	bl	800175a <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80013ba:	f000 f9de 	bl	800177a <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80013be:	f7ff fec5 	bl	800114c <nRF24_CSN_H>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <nRF24_Check+0x58>)
 80013d0:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80013d2:	2205      	movs	r2, #5
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	2030      	movs	r0, #48	; 0x30
 80013d8:	f7ff ff68 	bl	80012ac <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80013dc:	463b      	mov	r3, r7
 80013de:	2205      	movs	r2, #5
 80013e0:	4619      	mov	r1, r3
 80013e2:	2010      	movs	r0, #16
 80013e4:	f7ff ff40 	bl	8001268 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e010      	b.n	8001410 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	f107 0210 	add.w	r2, r7, #16
 80013f4:	4413      	add	r3, r2
 80013f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <nRF24_Check+0x42>
 8001406:	2300      	movs	r3, #0
 8001408:	e006      	b.n	8001418 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3301      	adds	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d9eb      	bls.n	80013ee <nRF24_Check+0x26>
	}

	return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	08003110 	.word	0x08003110

08001424 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fec8 	bl	80011c4 <nRF24_ReadReg>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d104      	bne.n	8001448 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e003      	b.n	8001450 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f023 0302 	bic.w	r3, r3, #2
 800144e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	4619      	mov	r1, r3
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fecf 	bl	80011f8 <nRF24_WriteReg>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fea9 	bl	80011c4 <nRF24_ReadReg>
 8001472:	4603      	mov	r3, r0
 8001474:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	b25a      	sxtb	r2, r3
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	4313      	orrs	r3, r2
 800148e:	b25b      	sxtb	r3, r3
 8001490:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4619      	mov	r1, r3
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff feae 	bl	80011f8 <nRF24_WriteReg>
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fe88 	bl	80011c4 <nRF24_ReadReg>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f023 030c 	bic.w	r3, r3, #12
 80014be:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	b25a      	sxtb	r2, r3
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	4619      	mov	r1, r3
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fe8d 	bl	80011f8 <nRF24_WriteReg>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4619      	mov	r1, r3
 80014f4:	2005      	movs	r0, #5
 80014f6:	f7ff fe7f 	bl	80011f8 <nRF24_WriteReg>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	460a      	mov	r2, r1
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	4613      	mov	r3, r2
 8001510:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	b25a      	sxtb	r2, r3
 8001518:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	b25b      	sxtb	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b25b      	sxtb	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	2004      	movs	r0, #4
 800152c:	f7ff fe64 	bl	80011f8 <nRF24_WriteReg>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	3b02      	subs	r3, #2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	2003      	movs	r0, #3
 800154c:	f7ff fe54 	bl	80011f8 <nRF24_WriteReg>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d83e      	bhi.n	80015e8 <nRF24_SetAddr+0x90>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <nRF24_SetAddr+0x18>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	0800158d 	.word	0x0800158d
 8001574:	0800158d 	.word	0x0800158d
 8001578:	080015d5 	.word	0x080015d5
 800157c:	080015d5 	.word	0x080015d5
 8001580:	080015d5 	.word	0x080015d5
 8001584:	080015d5 	.word	0x080015d5
 8001588:	0800158d 	.word	0x0800158d
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800158c:	2003      	movs	r0, #3
 800158e:	f7ff fe19 	bl	80011c4 <nRF24_ReadReg>
 8001592:	4603      	mov	r3, r0
 8001594:	3301      	adds	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80015a0:	f7ff fdcb 	bl	800113a <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <nRF24_SetAddr+0x9c>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fdd5 	bl	8001160 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	1e5a      	subs	r2, r3, #1
 80015ba:	603a      	str	r2, [r7, #0]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fdce 	bl	8001160 <nRF24_LL_RW>
			} while (addr_width--);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	73fa      	strb	r2, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f3      	bne.n	80015b6 <nRF24_SetAddr+0x5e>
			nRF24_CSN_H();
 80015ce:	f7ff fdbd 	bl	800114c <nRF24_CSN_H>
			break;
 80015d2:	e00a      	b.n	80015ea <nRF24_SetAddr+0x92>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <nRF24_SetAddr+0x9c>)
 80015d8:	5cd2      	ldrb	r2, [r2, r3]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7ff fe09 	bl	80011f8 <nRF24_WriteReg>
			break;
 80015e6:	e000      	b.n	80015ea <nRF24_SetAddr+0x92>
		default:
			// Incorrect pipe number -> do nothing
			break;
 80015e8:	bf00      	nop
	}
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08003148 	.word	0x08003148

080015f8 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001606:	2006      	movs	r0, #6
 8001608:	f7ff fddc 	bl	80011c4 <nRF24_ReadReg>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f023 0306 	bic.w	r3, r3, #6
 8001616:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4313      	orrs	r3, r2
 800161e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	4619      	mov	r1, r3
 8001624:	2006      	movs	r0, #6
 8001626:	f7ff fde7 	bl	80011f8 <nRF24_WriteReg>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800163c:	2006      	movs	r0, #6
 800163e:	f7ff fdc1 	bl	80011c4 <nRF24_ReadReg>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800164c:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4313      	orrs	r3, r2
 8001654:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	4619      	mov	r1, r3
 800165a:	2006      	movs	r0, #6
 800165c:	f7ff fdcc 	bl	80011f8 <nRF24_WriteReg>
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	460b      	mov	r3, r1
 8001674:	71bb      	strb	r3, [r7, #6]
 8001676:	4613      	mov	r3, r2
 8001678:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800167a:	2002      	movs	r0, #2
 800167c:	f7ff fda2 	bl	80011c4 <nRF24_ReadReg>
 8001680:	4603      	mov	r3, r0
 8001682:	b25a      	sxtb	r2, r3
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001698:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4619      	mov	r1, r3
 800169e:	2002      	movs	r0, #2
 80016a0:	f7ff fdaa 	bl	80011f8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <nRF24_SetRXPipe+0xa4>)
 80016a8:	5cd2      	ldrb	r2, [r2, r3]
 80016aa:	797b      	ldrb	r3, [r7, #5]
 80016ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f7ff fd9f 	bl	80011f8 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fd82 	bl	80011c4 <nRF24_ReadReg>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10a      	bne.n	80016e0 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2201      	movs	r2, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	b25a      	sxtb	r2, r3
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e00b      	b.n	80016f8 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2201      	movs	r2, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	b25a      	sxtb	r2, r3
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4013      	ands	r3, r2
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	4619      	mov	r1, r3
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fd7b 	bl	80011f8 <nRF24_WriteReg>
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	08003140 	.word	0x08003140

08001710 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fd52 	bl	80011c4 <nRF24_ReadReg>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2201      	movs	r2, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	b25a      	sxtb	r2, r3
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	4619      	mov	r1, r3
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff fd5b 	bl	80011f8 <nRF24_WriteReg>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800174e:	2007      	movs	r0, #7
 8001750:	f7ff fd38 	bl	80011c4 <nRF24_ReadReg>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}

0800175a <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800175e:	21ff      	movs	r1, #255	; 0xff
 8001760:	20e1      	movs	r0, #225	; 0xe1
 8001762:	f7ff fd49 	bl	80011f8 <nRF24_WriteReg>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}

0800176a <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800176e:	21ff      	movs	r1, #255	; 0xff
 8001770:	20e2      	movs	r0, #226	; 0xe2
 8001772:	f7ff fd41 	bl	80011f8 <nRF24_WriteReg>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}

0800177a <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8001780:	2007      	movs	r0, #7
 8001782:	f7ff fd1f 	bl	80011c4 <nRF24_ReadReg>
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001790:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4619      	mov	r1, r3
 8001796:	2007      	movs	r0, #7
 8001798:	f7ff fd2e 	bl	80011f8 <nRF24_WriteReg>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	461a      	mov	r2, r3
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	20a0      	movs	r0, #160	; 0xa0
 80017b8:	f7ff fd78 	bl	80012ac <nRF24_WriteMBReg>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LL_AHB2_GRP1_EnableClock>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4313      	orrs	r3, r2
 8001806:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LL_APB2_GRP1_EnableClock+0x2c>)
 800180a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000

08001824 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 0210 	bic.w	r2, r3, #16
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	605a      	str	r2, [r3, #4]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 0208 	bic.w	r2, r3, #8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	605a      	str	r2, [r3, #4]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SPI1_Init>:
// > mode master, full duplex
// > 8 bits
// > pin NSS généré logiciellement
// > bit rate = 5 Mbps --> avec un bus clock à 80 MHz le prescaler est réglé à 16.
void SPI1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b090      	sub	sp, #64	; 0x40
 8001870:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	2228      	movs	r2, #40	; 0x28
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fbba 	bl	8002ff4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001890:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001894:	f7ff ffae 	bl	80017f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff ff93 	bl	80017c4 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800189e:	23e0      	movs	r3, #224	; 0xe0
 80018a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018a2:	2302      	movs	r3, #2
 80018a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80018b2:	2305      	movs	r3, #5
 80018b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f000 fd8e 	bl	80023de <LL_GPIO_Init>

  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80018c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018ca:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80018cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018d0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80018da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80018e0:	2318      	movs	r3, #24
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80018ec:	2307      	movs	r3, #7
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <SPI1_Init+0xa8>)
 80018f8:	f001 f9bf 	bl	8002c7a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80018fc:	2100      	movs	r1, #0
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <SPI1_Init+0xa8>)
 8001900:	f7ff ff90 	bl	8001824 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <SPI1_Init+0xa8>)
 8001906:	f7ff ffa0 	bl	800184a <LL_SPI_DisableNSSPulseMgt>
}
 800190a:	bf00      	nop
 800190c:	3740      	adds	r7, #64	; 0x40
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013000 	.word	0x40013000

08001918 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	d101      	bne.n	8001932 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40010400 	.word	0x40010400

08001944 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6153      	str	r3, [r2, #20]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40010400 	.word	0x40010400

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff ffad 	bl	8001918 <LL_EXTI_IsActiveFlag_0_31>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ffbd 	bl	8001944 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <SystemInit+0x64>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <SystemInit+0x64>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <SystemInit+0x68>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <SystemInit+0x68>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <SystemInit+0x68>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <SystemInit+0x68>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <SystemInit+0x68>)
 80019fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <SystemInit+0x68>)
 8001a08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <SystemInit+0x68>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <SystemInit+0x68>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <SystemInit+0x68>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SystemInit+0x64>)
 8001a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a26:	609a      	str	r2, [r3, #8]
#endif
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	40021000 	.word	0x40021000

08001a3c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	2b80      	cmp	r3, #128	; 0x80
 8001a9a:	d101      	bne.n	8001aa0 <LL_USART_IsActiveFlag_TXE+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <LL_AHB2_GRP1_EnableClock>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000

08001b00 <LL_APB1_GRP1_EnableClock>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000

08001b30 <USART2_Init>:
#include "stm32l4xx_ll_gpio.h"


//Initialisation de l'USART2.
void USART2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	; 0x38
 8001b34:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b5a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b5e:	f7ff ffcf 	bl	8001b00 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff ffb4 	bl	8001ad0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001b68:	230c      	movs	r3, #12
 8001b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f000 fc29 	bl	80023de <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001b8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b90:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <USART2_Init+0x9c>)
 8001bb2:	f001 f921 	bl	8002df8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <USART2_Init+0x9c>)
 8001bb8:	f7ff ff50 	bl	8001a5c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <USART2_Init+0x9c>)
 8001bbe:	f7ff ff3d 	bl	8001a3c <LL_USART_Enable>
}
 8001bc2:	bf00      	nop
 8001bc4:	3738      	adds	r7, #56	; 0x38
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <UART_SendChar>:

void UART_SendChar(char b) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]

	while(!LL_USART_IsActiveFlag_TXE(USART2)){};
 8001bda:	bf00      	nop
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <UART_SendChar+0x2c>)
 8001bde:	f7ff ff53 	bl	8001a88 <LL_USART_IsActiveFlag_TXE>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f9      	beq.n	8001bdc <UART_SendChar+0xc>
	LL_USART_TransmitData8(USART2, (uint8_t) b);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <UART_SendChar+0x2c>)
 8001bee:	f7ff ff5e 	bl	8001aae <LL_USART_TransmitData8>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40004400 	.word	0x40004400

08001c00 <UART_SendStr>:

void UART_SendStr(char *string) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	for(;(*string) != 0;string++)
 8001c08:	e007      	b.n	8001c1a <UART_SendStr+0x1a>
	{
		UART_SendChar(* string);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffde 	bl	8001bd0 <UART_SendChar>
	for(;(*string) != 0;string++)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f3      	bne.n	8001c0a <UART_SendStr+0xa>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	81fb      	strh	r3, [r7, #14]
 8001c3c:	e018      	b.n	8001c70 <UART_SendBufHex+0x44>
		ch = *buf++;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <UART_SendBufHex+0x54>)
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffbb 	bl	8001bd0 <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001c5a:	7b7b      	ldrb	r3, [r7, #13]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <UART_SendBufHex+0x54>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffb3 	bl	8001bd0 <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	81fb      	strh	r3, [r7, #14]
 8001c70:	89fa      	ldrh	r2, [r7, #14]
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3e2      	bcc.n	8001c3e <UART_SendBufHex+0x12>
	}
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	08003118 	.word	0x08003118

08001c84 <UART_SendHex8>:

void UART_SendHex8(uint8_t num) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <UART_SendHex8+0x34>)
 8001c98:	5c9b      	ldrb	r3, [r3, r2]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff98 	bl	8001bd0 <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <UART_SendHex8+0x34>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff90 	bl	8001bd0 <UART_SendChar>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08003118 	.word	0x08003118

08001cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc0:	f7ff fe86 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <LoopForever+0x16>)
	cmp	r2, r3
 8001ce6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cea:	f001 f95f 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cee:	f7ff f8fb 	bl	8000ee8 <main>

08001cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cf2:	e7fe      	b.n	8001cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001cf8:	080031a0 	.word	0x080031a0
	ldr	r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d00:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001d04:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001d08:	20000088 	.word	0x20000088

08001d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_2_IRQHandler>
	...

08001d10 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <LL_EXTI_EnableIT_0_31+0x20>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <LL_EXTI_EnableIT_0_31+0x20>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40010400 	.word	0x40010400

08001d34 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <LL_EXTI_EnableIT_32_63+0x20>)
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <LL_EXTI_EnableIT_32_63+0x20>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	620b      	str	r3, [r1, #32]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40010400 	.word	0x40010400

08001d58 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <LL_EXTI_DisableIT_0_31+0x24>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	4904      	ldr	r1, [pc, #16]	; (8001d7c <LL_EXTI_DisableIT_0_31+0x24>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010400 	.word	0x40010400

08001d80 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	620b      	str	r3, [r1, #32]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010400 	.word	0x40010400

08001da8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]

}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40010400 	.word	0x40010400

08001dcc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <LL_EXTI_EnableEvent_32_63+0x20>)
 8001dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd8:	4904      	ldr	r1, [pc, #16]	; (8001dec <LL_EXTI_EnableEvent_32_63+0x20>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40010400 	.word	0x40010400

08001e18 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4904      	ldr	r1, [pc, #16]	; (8001e3c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40010400 	.word	0x40010400

08001e40 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]

}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40010400 	.word	0x40010400

08001e64 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e70:	4904      	ldr	r1, [pc, #16]	; (8001e84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40010400 	.word	0x40010400

08001e88 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4904      	ldr	r1, [pc, #16]	; (8001eac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]

}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010400 	.word	0x40010400

08001eb0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4904      	ldr	r1, [pc, #16]	; (8001ed4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40010400 	.word	0x40010400

08001efc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40010400 	.word	0x40010400

08001f20 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4904      	ldr	r1, [pc, #16]	; (8001f44 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	60cb      	str	r3, [r1, #12]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010400 	.word	0x40010400

08001f48 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4904      	ldr	r1, [pc, #16]	; (8001f6c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40010400 	.word	0x40010400

08001f70 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7a1b      	ldrb	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80c6 	beq.w	8002112 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d05d      	beq.n	800204a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a5b      	ldrb	r3, [r3, #9]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00e      	beq.n	8001fb4 <LL_EXTI_Init+0x44>
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d017      	beq.n	8001fca <LL_EXTI_Init+0x5a>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d120      	bne.n	8001fe0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff24 	bl	8001df0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff feaf 	bl	8001d10 <LL_EXTI_EnableIT_0_31>
          break;
 8001fb2:	e018      	b.n	8001fe6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fecd 	bl	8001d58 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fef0 	bl	8001da8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001fc8:	e00d      	b.n	8001fe6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe9e 	bl	8001d10 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fee5 	bl	8001da8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001fde:	e002      	b.n	8001fe6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
          break;
 8001fe4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7a9b      	ldrb	r3, [r3, #10]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02d      	beq.n	800204a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7a9b      	ldrb	r3, [r3, #10]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d00e      	beq.n	8002014 <LL_EXTI_Init+0xa4>
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d017      	beq.n	800202a <LL_EXTI_Init+0xba>
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d120      	bne.n	8002040 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff8c 	bl	8001f20 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff17 	bl	8001e40 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002012:	e01b      	b.n	800204c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff35 	bl	8001e88 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff58 	bl	8001ed8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002028:	e010      	b.n	800204c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff06 	bl	8001e40 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff4d 	bl	8001ed8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800203e:	e005      	b.n	800204c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
            break;
 8002048:	e000      	b.n	800204c <LL_EXTI_Init+0xdc>
        }
      }
 800204a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d073      	beq.n	800213c <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7a5b      	ldrb	r3, [r3, #9]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d00e      	beq.n	800207a <LL_EXTI_Init+0x10a>
 800205c:	2b02      	cmp	r3, #2
 800205e:	d017      	beq.n	8002090 <LL_EXTI_Init+0x120>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d120      	bne.n	80020a6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fed5 	bl	8001e18 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe5e 	bl	8001d34 <LL_EXTI_EnableIT_32_63>
          break;
 8002078:	e01a      	b.n	80020b0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fe7e 	bl	8001d80 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fe9f 	bl	8001dcc <LL_EXTI_EnableEvent_32_63>
          break;
 800208e:	e00f      	b.n	80020b0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fe4d 	bl	8001d34 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fe94 	bl	8001dcc <LL_EXTI_EnableEvent_32_63>
          break;
 80020a4:	e004      	b.n	80020b0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
          break;
 80020ae:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7a9b      	ldrb	r3, [r3, #10]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d041      	beq.n	800213c <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7a9b      	ldrb	r3, [r3, #10]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d00e      	beq.n	80020de <LL_EXTI_Init+0x16e>
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d017      	beq.n	80020f4 <LL_EXTI_Init+0x184>
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d120      	bne.n	800210a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff3b 	bl	8001f48 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fec4 	bl	8001e64 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80020dc:	e02f      	b.n	800213e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fee4 	bl	8001eb0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff05 	bl	8001efc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80020f2:	e024      	b.n	800213e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff feb3 	bl	8001e64 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fefa 	bl	8001efc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002108:	e019      	b.n	800213e <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
            break;
 800210e:	bf00      	nop
 8002110:	e015      	b.n	800213e <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fe1e 	bl	8001d58 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe65 	bl	8001df0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe28 	bl	8001d80 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fe6f 	bl	8001e18 <LL_EXTI_DisableEvent_32_63>
 800213a:	e000      	b.n	800213e <LL_EXTI_Init+0x1ce>
      }
 800213c:	bf00      	nop
  }

  return status;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <LL_GPIO_SetPinMode>:
{
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	613b      	str	r3, [r7, #16]
  return result;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e003      	b.n	800217a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2103      	movs	r1, #3
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	401a      	ands	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	61fb      	str	r3, [r7, #28]
  return result;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e003      	b.n	80021a8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	372c      	adds	r7, #44	; 0x2c
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_GPIO_SetPinOutputType>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_GPIO_SetPinSpeed>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	b08b      	sub	sp, #44	; 0x2c
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	613b      	str	r3, [r7, #16]
  return result;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2103      	movs	r1, #3
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	401a      	ands	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	61fb      	str	r3, [r7, #28]
  return result;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]
}
 8002260:	bf00      	nop
 8002262:	372c      	adds	r7, #44	; 0x2c
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_GPIO_SetPinPull>:
{
 800226c:	b480      	push	{r7}
 800226e:	b08b      	sub	sp, #44	; 0x2c
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	613b      	str	r3, [r7, #16]
  return result;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e003      	b.n	800229e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2103      	movs	r1, #3
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	61fb      	str	r3, [r7, #28]
  return result;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	60da      	str	r2, [r3, #12]
}
 80022da:	bf00      	nop
 80022dc:	372c      	adds	r7, #44	; 0x2c
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_GPIO_SetAFPin_0_7>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	b08b      	sub	sp, #44	; 0x2c
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	613b      	str	r3, [r7, #16]
  return result;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	210f      	movs	r1, #15
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	61fb      	str	r3, [r7, #28]
  return result;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e003      	b.n	8002346 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	621a      	str	r2, [r3, #32]
}
 8002354:	bf00      	nop
 8002356:	372c      	adds	r7, #44	; 0x2c
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_GPIO_SetAFPin_8_15>:
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	613b      	str	r3, [r7, #16]
  return result;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e003      	b.n	8002394 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	210f      	movs	r1, #15
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	61fb      	str	r3, [r7, #28]
  return result;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	431a      	orrs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023d2:	bf00      	nop
 80023d4:	372c      	adds	r7, #44	; 0x2c
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	60fb      	str	r3, [r7, #12]
  return result;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <LL_GPIO_Init+0x26>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800240e:	e040      	b.n	8002492 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d032      	beq.n	800248c <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fe8a 	bl	8002148 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d003      	beq.n	8002444 <LL_GPIO_Init+0x66>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d106      	bne.n	8002452 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	461a      	mov	r2, r3
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fed0 	bl	80021f2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	461a      	mov	r2, r3
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff06 	bl	800226c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d111      	bne.n	800248c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	d807      	bhi.n	800247e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	461a      	mov	r2, r3
 8002474:	69b9      	ldr	r1, [r7, #24]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ff35 	bl	80022e6 <LL_GPIO_SetAFPin_0_7>
 800247c:	e006      	b.n	800248c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	461a      	mov	r2, r3
 8002484:	69b9      	ldr	r1, [r7, #24]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff6a 	bl	8002360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3301      	adds	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1b7      	bne.n	8002410 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d003      	beq.n	80024b0 <LL_GPIO_Init+0xd2>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d107      	bne.n	80024c0 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	461a      	mov	r2, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fe81 	bl	80021c2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <LL_RCC_HSI_IsReady+0x24>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d101      	bne.n	80024e2 <LL_RCC_HSI_IsReady+0x16>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_RCC_HSI_IsReady+0x18>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <LL_RCC_LSE_IsReady+0x24>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d101      	bne.n	800250a <LL_RCC_LSE_IsReady+0x16>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_RCC_LSE_IsReady+0x18>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000

0800251c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b08      	cmp	r3, #8
 800252a:	d101      	bne.n	8002530 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000

08002540 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <LL_RCC_MSI_GetRange+0x18>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40021000 	.word	0x40021000

08002578 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <LL_RCC_GetSysClkSource+0x18>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <LL_RCC_GetAHBPrescaler+0x18>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000

080025cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <LL_RCC_GetUSARTClockSource+0x24>)
 80025f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	4313      	orrs	r3, r2
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40021000 	.word	0x40021000

08002610 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <LL_RCC_GetUARTClockSource+0x24>)
 800261a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	401a      	ands	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	4313      	orrs	r3, r2
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40021000 	.word	0x40021000

08002638 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <LL_RCC_PLL_GetMainSource+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0303 	and.w	r3, r3, #3
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000

08002654 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <LL_RCC_PLL_GetN+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40021000 	.word	0x40021000

08002670 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <LL_RCC_PLL_GetR+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000

0800268c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <LL_RCC_PLL_GetDivider+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d137      	bne.n	800272a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ff94 	bl	80025e8 <LL_RCC_GetUSARTClockSource>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	f200 80b2 	bhi.w	8002830 <LL_RCC_GetUSARTClockFreq+0x188>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002713 	.word	0x08002713
 80026d8:	080026e5 	.word	0x080026e5
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026ff 	.word	0x080026ff
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80026e4:	f000 f952 	bl	800298c <RCC_GetSystemClockFreq>
 80026e8:	60f8      	str	r0, [r7, #12]
        break;
 80026ea:	e0b2      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80026ec:	f7ff feee 	bl	80024cc <LL_RCC_HSI_IsReady>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 809e 	beq.w	8002834 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80026f8:	4b58      	ldr	r3, [pc, #352]	; (800285c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80026fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026fc:	e09a      	b.n	8002834 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80026fe:	f7ff fef9 	bl	80024f4 <LL_RCC_LSE_IsReady>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8097 	beq.w	8002838 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002710:	e092      	b.n	8002838 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002712:	f000 f93b 	bl	800298c <RCC_GetSystemClockFreq>
 8002716:	4603      	mov	r3, r0
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f9c7 	bl	8002aac <RCC_GetHCLKClockFreq>
 800271e:	4603      	mov	r3, r0
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f9ed 	bl	8002b00 <RCC_GetPCLK2ClockFreq>
 8002726:	60f8      	str	r0, [r7, #12]
        break;
 8002728:	e093      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d146      	bne.n	80027be <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff59 	bl	80025e8 <LL_RCC_GetUSARTClockSource>
 8002736:	4603      	mov	r3, r0
 8002738:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d87d      	bhi.n	800283c <LL_RCC_GetUSARTClockFreq+0x194>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	080027a7 	.word	0x080027a7
 800274c:	0800283d 	.word	0x0800283d
 8002750:	0800283d 	.word	0x0800283d
 8002754:	0800283d 	.word	0x0800283d
 8002758:	0800277d 	.word	0x0800277d
 800275c:	0800283d 	.word	0x0800283d
 8002760:	0800283d 	.word	0x0800283d
 8002764:	0800283d 	.word	0x0800283d
 8002768:	08002785 	.word	0x08002785
 800276c:	0800283d 	.word	0x0800283d
 8002770:	0800283d 	.word	0x0800283d
 8002774:	0800283d 	.word	0x0800283d
 8002778:	08002795 	.word	0x08002795
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800277c:	f000 f906 	bl	800298c <RCC_GetSystemClockFreq>
 8002780:	60f8      	str	r0, [r7, #12]
        break;
 8002782:	e066      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002784:	f7ff fea2 	bl	80024cc <LL_RCC_HSI_IsReady>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d058      	beq.n	8002840 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002790:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002792:	e055      	b.n	8002840 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002794:	f7ff feae 	bl	80024f4 <LL_RCC_LSE_IsReady>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d052      	beq.n	8002844 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800279e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027a4:	e04e      	b.n	8002844 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027a6:	f000 f8f1 	bl	800298c <RCC_GetSystemClockFreq>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f97d 	bl	8002aac <RCC_GetHCLKClockFreq>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f98f 	bl	8002ad8 <RCC_GetPCLK1ClockFreq>
 80027ba:	60f8      	str	r0, [r7, #12]
        break;
 80027bc:	e049      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b30      	cmp	r3, #48	; 0x30
 80027c2:	d141      	bne.n	8002848 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff0f 	bl	80025e8 <LL_RCC_GetUSARTClockSource>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4a24      	ldr	r2, [pc, #144]	; (8002860 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <LL_RCC_GetUSARTClockFreq+0x146>
 80027d2:	4a23      	ldr	r2, [pc, #140]	; (8002860 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d803      	bhi.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x138>
 80027d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027dc:	d01c      	beq.n	8002818 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80027de:	e038      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80027e0:	4a20      	ldr	r2, [pc, #128]	; (8002864 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <LL_RCC_GetUSARTClockFreq+0x14e>
 80027e6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80027ea:	d00c      	beq.n	8002806 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80027ec:	e031      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 80027ee:	f000 f8cd 	bl	800298c <RCC_GetSystemClockFreq>
 80027f2:	60f8      	str	r0, [r7, #12]
          break;
 80027f4:	e02d      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80027f6:	f7ff fe69 	bl	80024cc <LL_RCC_HSI_IsReady>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d025      	beq.n	800284c <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002802:	60fb      	str	r3, [r7, #12]
          break;
 8002804:	e022      	b.n	800284c <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8002806:	f7ff fe75 	bl	80024f4 <LL_RCC_LSE_IsReady>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01f      	beq.n	8002850 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8002810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002814:	60fb      	str	r3, [r7, #12]
          break;
 8002816:	e01b      	b.n	8002850 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002818:	f000 f8b8 	bl	800298c <RCC_GetSystemClockFreq>
 800281c:	4603      	mov	r3, r0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f944 	bl	8002aac <RCC_GetHCLKClockFreq>
 8002824:	4603      	mov	r3, r0
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f956 	bl	8002ad8 <RCC_GetPCLK1ClockFreq>
 800282c:	60f8      	str	r0, [r7, #12]
          break;
 800282e:	e010      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002830:	bf00      	nop
 8002832:	e00e      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002834:	bf00      	nop
 8002836:	e00c      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002838:	bf00      	nop
 800283a:	e00a      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800283c:	bf00      	nop
 800283e:	e008      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002840:	bf00      	nop
 8002842:	e006      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002844:	bf00      	nop
 8002846:	e004      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8002848:	bf00      	nop
 800284a:	e002      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8002850:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	00f42400 	.word	0x00f42400
 8002860:	00300010 	.word	0x00300010
 8002864:	00300020 	.word	0x00300020

08002868 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2bc0      	cmp	r3, #192	; 0xc0
 8002878:	d135      	bne.n	80028e6 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fec8 	bl	8002610 <LL_RCC_GetUARTClockSource>
 8002880:	4603      	mov	r3, r0
 8002882:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <LL_RCC_GetUARTClockFreq+0x110>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00d      	beq.n	80028a4 <LL_RCC_GetUARTClockFreq+0x3c>
 8002888:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <LL_RCC_GetUARTClockFreq+0x110>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d803      	bhi.n	8002896 <LL_RCC_GetUARTClockFreq+0x2e>
 800288e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002892:	d01c      	beq.n	80028ce <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002894:	e02c      	b.n	80028f0 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002896:	4a39      	ldr	r2, [pc, #228]	; (800297c <LL_RCC_GetUARTClockFreq+0x114>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <LL_RCC_GetUARTClockFreq+0x44>
 800289c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80028a0:	d00c      	beq.n	80028bc <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80028a2:	e025      	b.n	80028f0 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80028a4:	f000 f872 	bl	800298c <RCC_GetSystemClockFreq>
 80028a8:	60f8      	str	r0, [r7, #12]
        break;
 80028aa:	e021      	b.n	80028f0 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80028ac:	f7ff fe0e 	bl	80024cc <LL_RCC_HSI_IsReady>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80028b6:	4b32      	ldr	r3, [pc, #200]	; (8002980 <LL_RCC_GetUARTClockFreq+0x118>)
 80028b8:	60fb      	str	r3, [r7, #12]
        break;
 80028ba:	e016      	b.n	80028ea <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80028bc:	f7ff fe1a 	bl	80024f4 <LL_RCC_LSE_IsReady>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d013      	beq.n	80028ee <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 80028c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ca:	60fb      	str	r3, [r7, #12]
        break;
 80028cc:	e00f      	b.n	80028ee <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80028ce:	f000 f85d 	bl	800298c <RCC_GetSystemClockFreq>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f8e9 	bl	8002aac <RCC_GetHCLKClockFreq>
 80028da:	4603      	mov	r3, r0
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f8fb 	bl	8002ad8 <RCC_GetPCLK1ClockFreq>
 80028e2:	60f8      	str	r0, [r7, #12]
        break;
 80028e4:	e004      	b.n	80028f0 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80028ee:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f6:	d135      	bne.n	8002964 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fe89 	bl	8002610 <LL_RCC_GetUARTClockSource>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a20      	ldr	r2, [pc, #128]	; (8002984 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00d      	beq.n	8002922 <LL_RCC_GetUARTClockFreq+0xba>
 8002906:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d803      	bhi.n	8002914 <LL_RCC_GetUARTClockFreq+0xac>
 800290c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002910:	d01c      	beq.n	800294c <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002912:	e02c      	b.n	800296e <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <LL_RCC_GetUARTClockFreq+0x120>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <LL_RCC_GetUARTClockFreq+0xc2>
 800291a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800291e:	d00c      	beq.n	800293a <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8002920:	e025      	b.n	800296e <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8002922:	f000 f833 	bl	800298c <RCC_GetSystemClockFreq>
 8002926:	60f8      	str	r0, [r7, #12]
        break;
 8002928:	e021      	b.n	800296e <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 800292a:	f7ff fdcf 	bl	80024cc <LL_RCC_HSI_IsReady>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d019      	beq.n	8002968 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <LL_RCC_GetUARTClockFreq+0x118>)
 8002936:	60fb      	str	r3, [r7, #12]
        break;
 8002938:	e016      	b.n	8002968 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 800293a:	f7ff fddb 	bl	80024f4 <LL_RCC_LSE_IsReady>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8002944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002948:	60fb      	str	r3, [r7, #12]
        break;
 800294a:	e00f      	b.n	800296c <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800294c:	f000 f81e 	bl	800298c <RCC_GetSystemClockFreq>
 8002950:	4603      	mov	r3, r0
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f8aa 	bl	8002aac <RCC_GetHCLKClockFreq>
 8002958:	4603      	mov	r3, r0
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f8bc 	bl	8002ad8 <RCC_GetPCLK1ClockFreq>
 8002960:	60f8      	str	r0, [r7, #12]
        break;
 8002962:	e004      	b.n	800296e <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8002964:	bf00      	nop
 8002966:	e002      	b.n	800296e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 800296c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	00c00040 	.word	0x00c00040
 800297c:	00c00080 	.word	0x00c00080
 8002980:	00f42400 	.word	0x00f42400
 8002984:	03000100 	.word	0x03000100
 8002988:	03000200 	.word	0x03000200

0800298c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002992:	f7ff fdf1 	bl	8002578 <LL_RCC_GetSysClkSource>
 8002996:	4603      	mov	r3, r0
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d851      	bhi.n	8002a40 <RCC_GetSystemClockFreq+0xb4>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <RCC_GetSystemClockFreq+0x18>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029d9 	.word	0x080029d9
 80029a8:	08002a41 	.word	0x08002a41
 80029ac:	08002a41 	.word	0x08002a41
 80029b0:	08002a41 	.word	0x08002a41
 80029b4:	08002a2d 	.word	0x08002a2d
 80029b8:	08002a41 	.word	0x08002a41
 80029bc:	08002a41 	.word	0x08002a41
 80029c0:	08002a41 	.word	0x08002a41
 80029c4:	08002a33 	.word	0x08002a33
 80029c8:	08002a41 	.word	0x08002a41
 80029cc:	08002a41 	.word	0x08002a41
 80029d0:	08002a41 	.word	0x08002a41
 80029d4:	08002a39 	.word	0x08002a39
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80029d8:	f7ff fda0 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d111      	bne.n	8002a06 <RCC_GetSystemClockFreq+0x7a>
 80029e2:	f7ff fd9b 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <RCC_GetSystemClockFreq+0x6a>
 80029ec:	f7ff fda8 	bl	8002540 <LL_RCC_MSI_GetRange>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	e003      	b.n	80029fe <RCC_GetSystemClockFreq+0x72>
 80029f6:	f7ff fdb1 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 80029fa:	4603      	mov	r3, r0
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <RCC_GetSystemClockFreq+0x114>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	e010      	b.n	8002a28 <RCC_GetSystemClockFreq+0x9c>
 8002a06:	f7ff fd89 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <RCC_GetSystemClockFreq+0x8e>
 8002a10:	f7ff fd96 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002a14:	4603      	mov	r3, r0
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	e003      	b.n	8002a22 <RCC_GetSystemClockFreq+0x96>
 8002a1a:	f7ff fd9f 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <RCC_GetSystemClockFreq+0x114>)
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002a2a:	e033      	b.n	8002a94 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <RCC_GetSystemClockFreq+0x118>)
 8002a2e:	607b      	str	r3, [r7, #4]
      break;
 8002a30:	e030      	b.n	8002a94 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <RCC_GetSystemClockFreq+0x11c>)
 8002a34:	607b      	str	r3, [r7, #4]
      break;
 8002a36:	e02d      	b.n	8002a94 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002a38:	f000 f876 	bl	8002b28 <RCC_PLL_GetFreqDomain_SYS>
 8002a3c:	6078      	str	r0, [r7, #4]
      break;
 8002a3e:	e029      	b.n	8002a94 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a40:	f7ff fd6c 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d111      	bne.n	8002a6e <RCC_GetSystemClockFreq+0xe2>
 8002a4a:	f7ff fd67 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <RCC_GetSystemClockFreq+0xd2>
 8002a54:	f7ff fd74 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	e003      	b.n	8002a66 <RCC_GetSystemClockFreq+0xda>
 8002a5e:	f7ff fd7d 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002a62:	4603      	mov	r3, r0
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <RCC_GetSystemClockFreq+0x114>)
 8002a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6c:	e010      	b.n	8002a90 <RCC_GetSystemClockFreq+0x104>
 8002a6e:	f7ff fd55 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <RCC_GetSystemClockFreq+0xf6>
 8002a78:	f7ff fd62 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	e003      	b.n	8002a8a <RCC_GetSystemClockFreq+0xfe>
 8002a82:	f7ff fd6b 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002a86:	4603      	mov	r3, r0
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <RCC_GetSystemClockFreq+0x114>)
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002a92:	bf00      	nop
  }

  return frequency;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08003168 	.word	0x08003168
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ab4:	f7ff fd6e 	bl	8002594 <LL_RCC_GetAHBPrescaler>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <RCC_GetHCLKClockFreq+0x28>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	40d3      	lsrs	r3, r2
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08003150 	.word	0x08003150

08002ad8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ae0:	f7ff fd66 	bl	80025b0 <LL_RCC_GetAPB1Prescaler>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <RCC_GetPCLK1ClockFreq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	40d3      	lsrs	r3, r2
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08003160 	.word	0x08003160

08002b00 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b08:	f7ff fd60 	bl	80025cc <LL_RCC_GetAPB2Prescaler>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	0adb      	lsrs	r3, r3, #11
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <RCC_GetPCLK2ClockFreq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	40d3      	lsrs	r3, r2
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	08003160 	.word	0x08003160

08002b28 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b2e:	f7ff fd83 	bl	8002638 <LL_RCC_PLL_GetMainSource>
 8002b32:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d02d      	beq.n	8002b96 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d02e      	beq.n	8002b9c <RCC_PLL_GetFreqDomain_SYS+0x74>
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d12f      	bne.n	8002ba2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b42:	f7ff fceb 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8002b4c:	f7ff fce6 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8002b56:	f7ff fcf3 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	e003      	b.n	8002b68 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8002b60:	f7ff fcfc 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002b64:	4603      	mov	r3, r0
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	4a2f      	ldr	r2, [pc, #188]	; (8002c28 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	e010      	b.n	8002b92 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8002b70:	f7ff fcd4 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8002b7a:	f7ff fce1 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	e003      	b.n	8002b8c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8002b84:	f7ff fcea 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002b94:	e02f      	b.n	8002bf6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8002b98:	607b      	str	r3, [r7, #4]
      break;
 8002b9a:	e02c      	b.n	8002bf6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8002b9e:	607b      	str	r3, [r7, #4]
      break;
 8002ba0:	e029      	b.n	8002bf6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ba2:	f7ff fcbb 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8002bac:	f7ff fcb6 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8002bb6:	f7ff fcc3 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	e003      	b.n	8002bc8 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8002bc0:	f7ff fccc 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	e010      	b.n	8002bf2 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8002bd0:	f7ff fca4 	bl	800251c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8002bda:	f7ff fcb1 	bl	8002540 <LL_RCC_MSI_GetRange>
 8002bde:	4603      	mov	r3, r0
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	e003      	b.n	8002bec <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8002be4:	f7ff fcba 	bl	800255c <LL_RCC_MSI_GetRangeAfterStandby>
 8002be8:	4603      	mov	r3, r0
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002bf4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002bf6:	f7ff fd49 	bl	800268c <LL_RCC_PLL_GetDivider>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	3301      	adds	r3, #1
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	fbb2 f4f3 	udiv	r4, r2, r3
 8002c06:	f7ff fd25 	bl	8002654 <LL_RCC_PLL_GetN>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	fb03 f404 	mul.w	r4, r3, r4
 8002c10:	f7ff fd2e 	bl	8002670 <LL_RCC_PLL_GetR>
 8002c14:	4603      	mov	r3, r0
 8002c16:	0e5b      	lsrs	r3, r3, #25
 8002c18:	3301      	adds	r3, #1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	08003168 	.word	0x08003168
 8002c2c:	00f42400 	.word	0x00f42400
 8002c30:	007a1200 	.word	0x007a1200

08002c34 <LL_SPI_IsEnabled>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d101      	bne.n	8002c4c <LL_SPI_IsEnabled+0x18>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <LL_SPI_IsEnabled+0x1a>
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_SPI_SetCRCPolynomial>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	611a      	str	r2, [r3, #16]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ffd3 	bl	8002c34 <LL_SPI_IsEnabled>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13b      	bne.n	8002d0c <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6811      	ldr	r1, [r2, #0]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	6852      	ldr	r2, [r2, #4]
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	6912      	ldr	r2, [r2, #16]
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6952      	ldr	r2, [r2, #20]
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	6992      	ldr	r2, [r2, #24]
 8002cc0:	4311      	orrs	r1, r2
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	69d2      	ldr	r2, [r2, #28]
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	6a12      	ldr	r2, [r2, #32]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	6891      	ldr	r1, [r2, #8]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	6952      	ldr	r2, [r2, #20]
 8002ce8:	0c12      	lsrs	r2, r2, #16
 8002cea:	430a      	orrs	r2, r1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfa:	d105      	bne.n	8002d08 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa9 	bl	8002c5a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <LL_USART_IsEnabled+0x18>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <LL_USART_IsEnabled+0x1a>
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	605a      	str	r2, [r3, #4]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9c:	d11a      	bne.n	8002dd4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	005a      	lsls	r2, r3, #1
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	441a      	add	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8002dd2:	e00a      	b.n	8002dea <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	085a      	lsrs	r2, r3, #1
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	441a      	add	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	60da      	str	r2, [r3, #12]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff83 	bl	8002d16 <LL_USART_IsEnabled>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d15b      	bne.n	8002ece <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <LL_USART_Init+0xe0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	6851      	ldr	r1, [r2, #4]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68d2      	ldr	r2, [r2, #12]
 8002e26:	4311      	orrs	r1, r2
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	6912      	ldr	r2, [r2, #16]
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6992      	ldr	r2, [r2, #24]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff7b 	bl	8002d3c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff88 	bl	8002d62 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a21      	ldr	r2, [pc, #132]	; (8002edc <LL_USART_Init+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d104      	bne.n	8002e64 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f7ff fc24 	bl	80026a8 <LL_RCC_GetUSARTClockFreq>
 8002e60:	60b8      	str	r0, [r7, #8]
 8002e62:	e023      	b.n	8002eac <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <LL_USART_Init+0xe8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d104      	bne.n	8002e76 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002e6c:	200c      	movs	r0, #12
 8002e6e:	f7ff fc1b 	bl	80026a8 <LL_RCC_GetUSARTClockFreq>
 8002e72:	60b8      	str	r0, [r7, #8]
 8002e74:	e01a      	b.n	8002eac <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <LL_USART_Init+0xec>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d104      	bne.n	8002e88 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002e7e:	2030      	movs	r0, #48	; 0x30
 8002e80:	f7ff fc12 	bl	80026a8 <LL_RCC_GetUSARTClockFreq>
 8002e84:	60b8      	str	r0, [r7, #8]
 8002e86:	e011      	b.n	8002eac <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <LL_USART_Init+0xf0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d104      	bne.n	8002e9a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002e90:	20c0      	movs	r0, #192	; 0xc0
 8002e92:	f7ff fce9 	bl	8002868 <LL_RCC_GetUARTClockFreq>
 8002e96:	60b8      	str	r0, [r7, #8]
 8002e98:	e008      	b.n	8002eac <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <LL_USART_Init+0xf4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d104      	bne.n	8002eac <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002ea2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002ea6:	f7ff fcdf 	bl	8002868 <LL_RCC_GetUARTClockFreq>
 8002eaa:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff5d 	bl	8002d88 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	efff69f3 	.word	0xefff69f3
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	40004800 	.word	0x40004800
 8002ee8:	40004c00 	.word	0x40004c00
 8002eec:	40005000 	.word	0x40005000

08002ef0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <LL_InitTick+0x30>)
 8002f04:	3b01      	subs	r3, #1
 8002f06:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <LL_InitTick+0x30>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <LL_InitTick+0x30>)
 8002f10:	2205      	movs	r2, #5
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002f2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ffdd 	bl	8002ef0 <LL_InitTick>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <LL_mDelay+0x48>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002f52:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d00c      	beq.n	8002f76 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002f62:	e008      	b.n	8002f76 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <LL_mDelay+0x48>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f3      	bne.n	8002f64 <LL_mDelay+0x24>
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000e010 	.word	0xe000e010

08002f8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <LL_SetSystemCoreClock+0x1c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000002c 	.word	0x2000002c

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4e0d      	ldr	r6, [pc, #52]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb0:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb2:	1ba4      	subs	r4, r4, r6
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	2500      	movs	r5, #0
 8002fb8:	42a5      	cmp	r5, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	4e0b      	ldr	r6, [pc, #44]	; (8002fec <__libc_init_array+0x40>)
 8002fbe:	4c0c      	ldr	r4, [pc, #48]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc0:	f000 f820 	bl	8003004 <_init>
 8002fc4:	1ba4      	subs	r4, r4, r6
 8002fc6:	10a4      	asrs	r4, r4, #2
 8002fc8:	2500      	movs	r5, #0
 8002fca:	42a5      	cmp	r5, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd4:	4798      	blx	r3
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fde:	4798      	blx	r3
 8002fe0:	3501      	adds	r5, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003198 	.word	0x08003198
 8002fe8:	08003198 	.word	0x08003198
 8002fec:	08003198 	.word	0x08003198
 8002ff0:	0800319c 	.word	0x0800319c

08002ff4 <memset>:
 8002ff4:	4402      	add	r2, r0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
