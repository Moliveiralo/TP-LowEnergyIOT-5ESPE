
L476_nRF24L01_MultiCeiver_PRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000030  08002f38  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002f38  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008716  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b71  00000000  00000000  00028776  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002a2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0002adc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002029b  00000000  00000000  0002b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e90  00000000  00000000  0004ba3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000af897  00000000  00000000  000528cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b18  00000000  00000000  001021e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d80 	.word	0x08002d80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08002d80 	.word	0x08002d80

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <nRF24_CE_H>:

static inline void nRF24_CE_L() {
    LL_GPIO_ResetOutputPin(nRF_CE_GPIO_Port, nRF_CE_Pin);
}

static inline void nRF24_CE_H() {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(nRF_CE_GPIO_Port, nRF_CE_Pin);
 80001e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f0:	f7ff ffea 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <Delay_ms>:
    while (!LL_SPI_IsActiveFlag_RXNE(NRF_SPI));
    return LL_SPI_ReceiveData8(NRF_SPI);
}


static inline void Delay_ms(uint32_t ms) { LL_mDelay(ms); }
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f002 fd5b 	bl	8002cbc <LL_mDelay>
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <Init_Transceiver>:
}

//Initialisation du transceiver --> paramètres par défaut, raz des IRQ, passage en mode power down
//et vérification que le transceiver fonctionne.
//Les registres du nRF24L01 sont accessibles par SPI même en mode power down.
void Init_Transceiver() {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
	uint8_t check_OK;

	nRF24_Init(); // Initialize the nRF24L01 to its default state
 8000216:	f000 fec8 	bl	8000faa <nRF24_Init>
	nRF24_ClearIRQFlags(); // Clear any pending IRQ flags
 800021a:	f001 f8ef 	bl	80013fc <nRF24_ClearIRQFlags>
	nRF24_SetPowerMode(nRF24_PWR_DOWN); //passage en mode power down.
 800021e:	2000      	movs	r0, #0
 8000220:	f000 ff3e 	bl	80010a0 <nRF24_SetPowerMode>
	//même si le passage en mode power down est rapide, on laisse un délai de 1 ms (suppose que
	//le Systick soit cadencé pour déborder toutes les 1 ms).
	Delay_ms(1);
 8000224:	2001      	movs	r0, #1
 8000226:	f7ff ffe7 	bl	80001f8 <Delay_ms>

	check_OK = nRF24_Check(); //vérif de la présence du nRF24L01
 800022a:	f000 ff0b 	bl	8001044 <nRF24_Check>
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	if (check_OK == 1) {
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d103      	bne.n	8000240 <Init_Transceiver+0x30>
		UART_SendStr("The transceiver nRF24L01 is on-line.\r\n");
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <Init_Transceiver+0x40>)
 800023a:	f001 fb7f 	bl	800193c <UART_SendStr>
	} else {
		UART_SendStr("The transceiver nRF24L01 is not responding.\r\n");
	}
}
 800023e:	e002      	b.n	8000246 <Init_Transceiver+0x36>
		UART_SendStr("The transceiver nRF24L01 is not responding.\r\n");
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <Init_Transceiver+0x44>)
 8000242:	f001 fb7b 	bl	800193c <UART_SendStr>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	08002da0 	.word	0x08002da0
 8000254:	08002dc8 	.word	0x08002dc8

08000258 <Config_RF_channel>:

//Configuration du canal RF : fréq du canal RF, puissance RF et data rate
void Config_RF_channel(uint8_t channel_nb, uint8_t DataRate, uint8_t TX_Power) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	460b      	mov	r3, r1
 8000264:	71bb      	strb	r3, [r7, #6]
 8000266:	4613      	mov	r3, r2
 8000268:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Set RF channel
	nRF24_SetRFChannel(channel_nb);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 ff78 	bl	8001162 <nRF24_SetRFChannel>
	// Set data rate
	nRF24_SetDataRate(DataRate);
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	4618      	mov	r0, r3
 8000276:	f001 f81a 	bl	80012ae <nRF24_SetDataRate>
	// Set TX power
	nRF24_SetTXPower(TX_Power);
 800027a:	797b      	ldrb	r3, [r7, #5]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fff9 	bl	8001274 <nRF24_SetTXPower>

	//verification des registres.
	//reg = ReadReg(0x05); //registre RF_CH
	//reg = ReadReg(0x06); //registre RF_SETUP
	//reg = ReadReg(0x00); //registre config
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <Config_CRC>:

//configuration du CRC :
//CRC_On = 0 --> desactivation du champ CRC, = 1 --> activation du champ CRC
//size_CRC = 0 --> CRC sur 1 octet. size_CRC = 1 --> CRC sur 2 octets
void Config_CRC(uint8_t CRC_On, uint8_t size_CRC) {
 800028a:	b580      	push	{r7, lr}
 800028c:	b084      	sub	sp, #16
 800028e:	af00      	add	r7, sp, #0
 8000290:	4603      	mov	r3, r0
 8000292:	460a      	mov	r2, r1
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	4613      	mov	r3, r2
 8000298:	71bb      	strb	r3, [r7, #6]
	uint8_t scheme_CRC = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	73fb      	strb	r3, [r7, #15]

	if (CRC_On == CRC_Field_On) {
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d107      	bne.n	80002b4 <Config_CRC+0x2a>
		if (size_CRC == CRC_Field_1byte) {
 80002a4:	79bb      	ldrb	r3, [r7, #6]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d102      	bne.n	80002b0 <Config_CRC+0x26>
			scheme_CRC = 0x8;
 80002aa:	2308      	movs	r3, #8
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	e001      	b.n	80002b4 <Config_CRC+0x2a>
		}
		else {
			scheme_CRC = 0xC;
 80002b0:	230c      	movs	r3, #12
 80002b2:	73fb      	strb	r3, [r7, #15]
		}
	}

	nRF24_SetCRCScheme(scheme_CRC);
 80002b4:	7bfb      	ldrb	r3, [r7, #15]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff32 	bl	8001120 <nRF24_SetCRCScheme>
}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <Config_PRX_adress>:

//configure les 6 adresses des data pipes. Configure aussi la largeur de l'adresse (3 à 5 octets)
//Addr_Default = Default_pipe_address ou Custom_pipe_address.
void Config_PRX_adress(uint8_t Address_width, uint8_t autoAck_on, uint8_t Addr_Default) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 80002ce:	460b      	mov	r3, r1
 80002d0:	71bb      	strb	r3, [r7, #6]
 80002d2:	4613      	mov	r3, r2
 80002d4:	717b      	strb	r3, [r7, #5]
	uint8_t verif_RX0_Adr[5];

	if ((Address_width < 3) | (Address_width > 5)) { //par défaut, adresse sur 5 octets
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	bf94      	ite	ls
 80002dc:	2301      	movls	r3, #1
 80002de:	2300      	movhi	r3, #0
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b05      	cmp	r3, #5
 80002e6:	bf8c      	ite	hi
 80002e8:	2301      	movhi	r3, #1
 80002ea:	2300      	movls	r3, #0
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	4313      	orrs	r3, r2
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d003      	beq.n	80002fe <Config_PRX_adress+0x3a>
		nRF24_SetAddrWidth(5);
 80002f6:	2005      	movs	r0, #5
 80002f8:	f000 ff5c 	bl	80011b4 <nRF24_SetAddrWidth>
 80002fc:	e003      	b.n	8000306 <Config_PRX_adress+0x42>
	} else {
		nRF24_SetAddrWidth(Address_width);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 ff57 	bl	80011b4 <nRF24_SetAddrWidth>
	}

	//ouverture des 6 data pipes (bits du registre EN_RXADDR)
	nRF24_SetRXPipe(nRF24_PIPE0,autoAck_on,payload_length);
 8000306:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <Config_PRX_adress+0xe4>)
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	4619      	mov	r1, r3
 800030e:	2000      	movs	r0, #0
 8000310:	f000 ffe8 	bl	80012e4 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE1,autoAck_on,payload_length);
 8000314:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <Config_PRX_adress+0xe4>)
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	4619      	mov	r1, r3
 800031c:	2001      	movs	r0, #1
 800031e:	f000 ffe1 	bl	80012e4 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE2,autoAck_on,payload_length);
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <Config_PRX_adress+0xe4>)
 8000324:	781a      	ldrb	r2, [r3, #0]
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	4619      	mov	r1, r3
 800032a:	2002      	movs	r0, #2
 800032c:	f000 ffda 	bl	80012e4 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE3,autoAck_on,payload_length);
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <Config_PRX_adress+0xe4>)
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	4619      	mov	r1, r3
 8000338:	2003      	movs	r0, #3
 800033a:	f000 ffd3 	bl	80012e4 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE4,autoAck_on,payload_length);
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <Config_PRX_adress+0xe4>)
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4619      	mov	r1, r3
 8000346:	2004      	movs	r0, #4
 8000348:	f000 ffcc 	bl	80012e4 <nRF24_SetRXPipe>
	nRF24_SetRXPipe(nRF24_PIPE5,autoAck_on,payload_length);
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <Config_PRX_adress+0xe4>)
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	4619      	mov	r1, r3
 8000354:	2005      	movs	r0, #5
 8000356:	f000 ffc5 	bl	80012e4 <nRF24_SetRXPipe>

	//configuration des adresses des 6 data pipes :
	if (Addr_Default == Custom_pipe_address) {
 800035a:	797b      	ldrb	r3, [r7, #5]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d117      	bne.n	8000390 <Config_PRX_adress+0xcc>
		nRF24_SetAddr(nRF24_PIPE0, addresses_RX[0]);
 8000360:	4912      	ldr	r1, [pc, #72]	; (80003ac <Config_PRX_adress+0xe8>)
 8000362:	2000      	movs	r0, #0
 8000364:	f000 ff36 	bl	80011d4 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE1, addresses_RX[1]);
 8000368:	4911      	ldr	r1, [pc, #68]	; (80003b0 <Config_PRX_adress+0xec>)
 800036a:	2001      	movs	r0, #1
 800036c:	f000 ff32 	bl	80011d4 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE2, addresses_RX[2]);
 8000370:	4910      	ldr	r1, [pc, #64]	; (80003b4 <Config_PRX_adress+0xf0>)
 8000372:	2002      	movs	r0, #2
 8000374:	f000 ff2e 	bl	80011d4 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE3, addresses_RX[3]);
 8000378:	490f      	ldr	r1, [pc, #60]	; (80003b8 <Config_PRX_adress+0xf4>)
 800037a:	2003      	movs	r0, #3
 800037c:	f000 ff2a 	bl	80011d4 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE4, addresses_RX[4]);
 8000380:	490e      	ldr	r1, [pc, #56]	; (80003bc <Config_PRX_adress+0xf8>)
 8000382:	2004      	movs	r0, #4
 8000384:	f000 ff26 	bl	80011d4 <nRF24_SetAddr>
		nRF24_SetAddr(nRF24_PIPE5, addresses_RX[5]);
 8000388:	490d      	ldr	r1, [pc, #52]	; (80003c0 <Config_PRX_adress+0xfc>)
 800038a:	2005      	movs	r0, #5
 800038c:	f000 ff22 	bl	80011d4 <nRF24_SetAddr>
	//else : on ne fait rien. Après l'extinction de l'alim du nRF24L01, les adresses
	//de chaque pipe reprendront leurs valeurs par défaut.


	//vérification de l'écriture des adresses de réception
	ReadMBReg(0x0A, verif_RX0_Adr, 5);
 8000390:	f107 0308 	add.w	r3, r7, #8
 8000394:	2205      	movs	r2, #5
 8000396:	4619      	mov	r1, r3
 8000398:	200a      	movs	r0, #10
 800039a:	f000 fdf4 	bl	8000f86 <ReadMBReg>
}
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000004 	.word	0x20000004
 80003b0:	2000000a 	.word	0x2000000a
 80003b4:	20000010 	.word	0x20000010
 80003b8:	20000016 	.word	0x20000016
 80003bc:	2000001c 	.word	0x2000001c
 80003c0:	20000022 	.word	0x20000022

080003c4 <Config_ESB_Protocol>:
}

//Active le protocole Enhanced ShockBurst, notamment l'auto acknowledgment et l'auto retransmit.
//On spécifie, pour le PTX uniquement, le nb de retransmission (ARC --> count_retries, de 0 à 15) et le
//délai entre retransmission (ARD --> delay_retries, de 0 à 15)
void Config_ESB_Protocol(uint8_t delay_retries, uint8_t count_retries) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;

	//autorisation de l'auto acknowledgement pour tous les data pipes
	nRF24_EnableAA(0);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 ffd9 	bl	800138c <nRF24_EnableAA>
	nRF24_EnableAA(1);
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 ffd6 	bl	800138c <nRF24_EnableAA>
	nRF24_EnableAA(2);
 80003e0:	2002      	movs	r0, #2
 80003e2:	f000 ffd3 	bl	800138c <nRF24_EnableAA>
	nRF24_EnableAA(3);
 80003e6:	2003      	movs	r0, #3
 80003e8:	f000 ffd0 	bl	800138c <nRF24_EnableAA>
	nRF24_EnableAA(4);
 80003ec:	2004      	movs	r0, #4
 80003ee:	f000 ffcd 	bl	800138c <nRF24_EnableAA>
	nRF24_EnableAA(5);
 80003f2:	2005      	movs	r0, #5
 80003f4:	f000 ffca 	bl	800138c <nRF24_EnableAA>

	//réglage paramètres de retransmission
	nRF24_SetAutoRetr(delay_retries,count_retries);
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4611      	mov	r1, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 febd 	bl	800117e <nRF24_SetAutoRetr>

	//verification des registres
	//reg = ReadReg(0x01); //registre EN_AA
	//reg = ReadReg(0x04); //registre SETUP_RETR
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <StartListen>:

//la fonction active la fonction RX (mise à 1 de la broche CE).
//Le transceiver doit être au préalable sorti du mode power down (donc en mode StandBy I) et
//et le mode RX doit avoir été sélectionné (PRIM_RX = 1).
void StartListen() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	nRF24_CE_H();
 8000410:	f7ff fee8 	bl	80001e4 <nRF24_CE_H>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <Continuous_RX_Listen>:

//attention : fonction bloquante ! La fonction permet une écoute permanente et l'affichage des messages
//reçues sur le canal RF via l'UART. Ici, la fonction n'utilise pas d'interruption, mais un polling
//du statut du RX_FIFO. Le délai wait_time_ms est ajouté entre chaque interrogation de l'état du
//RX_FIFO
void Continuous_RX_Listen(int wait_time_ms) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	while (1) {
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000420:	f000 ffd1 	bl	80013c6 <nRF24_GetStatus_RXFIFO>
 8000424:	4603      	mov	r3, r0
 8000426:	2b01      	cmp	r3, #1
 8000428:	d027      	beq.n	800047a <Continuous_RX_Listen+0x62>
			// Get a payload from the transceiver
			pipe_message_recu = nRF24_ReadPayload(nRF24_payload_recu, &payload_length);
 800042a:	4918      	ldr	r1, [pc, #96]	; (800048c <Continuous_RX_Listen+0x74>)
 800042c:	4818      	ldr	r0, [pc, #96]	; (8000490 <Continuous_RX_Listen+0x78>)
 800042e:	f001 f857 	bl	80014e0 <nRF24_ReadPayload>
 8000432:	4603      	mov	r3, r0
 8000434:	461a      	mov	r2, r3
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <Continuous_RX_Listen+0x7c>)
 8000438:	701a      	strb	r2, [r3, #0]

			// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 800043a:	f000 ffdf 	bl	80013fc <nRF24_ClearIRQFlags>

			// Print a payload contents to UART
			UART_SendStr("Message reçu sur le data pipe #");
 800043e:	4816      	ldr	r0, [pc, #88]	; (8000498 <Continuous_RX_Listen+0x80>)
 8000440:	f001 fa7c 	bl	800193c <UART_SendStr>
			UART_SendInt(pipe_message_recu);
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <Continuous_RX_Listen+0x7c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fab9 	bl	80019c0 <UART_SendInt>
			UART_SendStr(" de ");
 800044e:	4813      	ldr	r0, [pc, #76]	; (800049c <Continuous_RX_Listen+0x84>)
 8000450:	f001 fa74 	bl	800193c <UART_SendStr>
			UART_SendInt(payload_length);
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <Continuous_RX_Listen+0x74>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fab1 	bl	80019c0 <UART_SendInt>
			UART_SendStr(" octets:>");
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <Continuous_RX_Listen+0x88>)
 8000460:	f001 fa6c 	bl	800193c <UART_SendStr>
			UART_SendBufHex((char *)nRF24_payload_recu, payload_length);
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <Continuous_RX_Listen+0x74>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b29b      	uxth	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <Continuous_RX_Listen+0x78>)
 800046e:	f001 fa7b 	bl	8001968 <UART_SendBufHex>
			UART_SendStr("<\r\n");
 8000472:	480c      	ldr	r0, [pc, #48]	; (80004a4 <Continuous_RX_Listen+0x8c>)
 8000474:	f001 fa62 	bl	800193c <UART_SendStr>
 8000478:	e7d2      	b.n	8000420 <Continuous_RX_Listen+0x8>
		}
		else {
			UART_SendStr("Wait for message \n");
 800047a:	480b      	ldr	r0, [pc, #44]	; (80004a8 <Continuous_RX_Listen+0x90>)
 800047c:	f001 fa5e 	bl	800193c <UART_SendStr>
			Delay_ms(900);
 8000480:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000484:	f7ff feb8 	bl	80001f8 <Delay_ms>
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000488:	e7ca      	b.n	8000420 <Continuous_RX_Listen+0x8>
 800048a:	bf00      	nop
 800048c:	20000000 	.word	0x20000000
 8000490:	20000050 	.word	0x20000050
 8000494:	2000004d 	.word	0x2000004d
 8000498:	08002df8 	.word	0x08002df8
 800049c:	08002e1c 	.word	0x08002e1c
 80004a0:	08002e24 	.word	0x08002e24
 80004a4:	08002e30 	.word	0x08002e30
 80004a8:	08002e34 	.word	0x08002e34

080004ac <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <LL_RCC_MSI_Enable+0x1c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <LL_RCC_MSI_Enable+0x1c>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <LL_RCC_MSI_IsReady+0x20>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0302 	and.w	r3, r3, #2
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d101      	bne.n	80004e0 <LL_RCC_MSI_IsReady+0x14>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <LL_RCC_MSI_IsReady+0x16>
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000

080004f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_RCC_SetSysClkSource+0x24>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f023 0203 	bic.w	r2, r3, #3
 8000500:	4904      	ldr	r1, [pc, #16]	; (8000514 <LL_RCC_SetSysClkSource+0x24>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4313      	orrs	r3, r2
 8000506:	608b      	str	r3, [r1, #8]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_RCC_GetSysClkSource+0x18>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f003 030c 	and.w	r3, r3, #12
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_RCC_SetAHBPrescaler+0x24>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000544:	4904      	ldr	r1, [pc, #16]	; (8000558 <LL_RCC_SetAHBPrescaler+0x24>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <LL_RCC_SetAPB1Prescaler+0x24>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	608b      	str	r3, [r1, #8]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <LL_RCC_SetUSARTClockSource+0x30>)
 80005b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	0c1b      	lsrs	r3, r3, #16
 80005be:	43db      	mvns	r3, r3
 80005c0:	401a      	ands	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <LL_RCC_SetUSARTClockSource+0x30>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <LL_RCC_PLL_Enable+0x1c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <LL_RCC_PLL_Enable+0x1c>)
 80005ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LL_RCC_PLL_IsReady+0x24>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000610:	d101      	bne.n	8000616 <LL_RCC_PLL_IsReady+0x16>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_RCC_PLL_IsReady+0x18>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000638:	68da      	ldr	r2, [r3, #12]
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800063c:	4013      	ands	r3, r2
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	4311      	orrs	r1, r2
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	0212      	lsls	r2, r2, #8
 8000648:	4311      	orrs	r1, r2
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	430a      	orrs	r2, r1
 800064e:	4904      	ldr	r1, [pc, #16]	; (8000660 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000650:	4313      	orrs	r3, r2
 8000652:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40021000 	.word	0x40021000
 8000664:	f9ff808c 	.word	0xf9ff808c

08000668 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000698:	4904      	ldr	r1, [pc, #16]	; (80006ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4313      	orrs	r3, r2
 800069e:	600b      	str	r3, [r1, #0]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40007000 	.word	0x40007000

080006b0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <LL_FLASH_SetLatency+0x24>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 0207 	bic.w	r2, r3, #7
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <LL_FLASH_SetLatency+0x24>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	600b      	str	r3, [r1, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40022000 	.word	0x40022000

080006d8 <SystemClock_Config_80M>:
  *            APB2 Prescaler                 = 1
  *            MSI Frequency(Hz)              = 4000000
  *            Flash Latency(WS)              = 4
  */
void SystemClock_Config_80M()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/* MSI configuration and activation */
	LL_RCC_MSI_Enable();			// normalement il est deja enabled
 80006dc:	f7ff fee6 	bl	80004ac <LL_RCC_MSI_Enable>
	while	(LL_RCC_MSI_IsReady() != 1)	// c'est pour le cas ou on l'aurait change
 80006e0:	bf00      	nop
 80006e2:	f7ff fef3 	bl	80004cc <LL_RCC_MSI_IsReady>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d1fa      	bne.n	80006e2 <SystemClock_Config_80M+0xa>
		{ }

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);	// 4 pour 80MHz
 80006ec:	2004      	movs	r0, #4
 80006ee:	f7ff ffdf 	bl	80006b0 <LL_FLASH_SetLatency>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1); //réglage tension régulateur interne
 80006f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f6:	f7ff ffc7 	bl	8000688 <LL_PWR_SetRegulVoltageScaling>

	// demarrer la PLL principale 4MHz --> 80 MHz
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80006fa:	2300      	movs	r3, #0
 80006fc:	2228      	movs	r2, #40	; 0x28
 80006fe:	2100      	movs	r1, #0
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ff91 	bl	8000628 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000706:	f7ff ff6b 	bl	80005e0 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 800070a:	f7ff ffad 	bl	8000668 <LL_RCC_PLL_EnableDomain_SYS>
	while	( LL_RCC_PLL_IsReady() != 1 )
 800070e:	bf00      	nop
 8000710:	f7ff ff76 	bl	8000600 <LL_RCC_PLL_IsReady>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d1fa      	bne.n	8000710 <SystemClock_Config_80M+0x38>
		{ }

	// connecter Sysclk sur cette PLL
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff0a 	bl	8000534 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000720:	2003      	movs	r0, #3
 8000722:	f7ff fee5 	bl	80004f0 <LL_RCC_SetSysClkSource>
	while	( LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 8000726:	bf00      	nop
 8000728:	f7ff fef6 	bl	8000518 <LL_RCC_GetSysClkSource>
 800072c:	4603      	mov	r3, r0
 800072e:	2b0c      	cmp	r3, #12
 8000730:	d1fa      	bne.n	8000728 <SystemClock_Config_80M+0x50>
		{ }

	/* Set APB1 & APB2 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff ff12 	bl	800055c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff23 	bl	8000584 <LL_RCC_SetAPB2Prescaler>

	//update global variable SystemCoreClock --> give access to CPU clock frequency.
	LL_SetSystemCoreClock(80000000);
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <SystemClock_Config_80M+0x80>)
 8000740:	f002 fae2 	bl	8002d08 <LL_SetSystemCoreClock>
	LL_Init1msTick(80000000);
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <SystemClock_Config_80M+0x80>)
 8000746:	f002 faab 	bl	8002ca0 <LL_Init1msTick>

	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800074a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800074e:	f7ff ff2d 	bl	80005ac <LL_RCC_SetUSARTClockSource>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	04c4b400 	.word	0x04c4b400

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db0b      	blt.n	80007a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 021f 	and.w	r2, r3, #31
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <__NVIC_EnableIRQ+0x38>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800087a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4013      	ands	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_GPIO_SetPinMode>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b08b      	sub	sp, #44	; 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa93 f3a3 	rbit	r3, r3
 80008ba:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80008c6:	2320      	movs	r3, #32
 80008c8:	e003      	b.n	80008d2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	401a      	ands	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	fa93 f3a3 	rbit	r3, r3
 80008e8:	61fb      	str	r3, [r7, #28]
  return result;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80008f4:	2320      	movs	r3, #32
 80008f6:	e003      	b.n	8000900 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	fab3 f383 	clz	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	431a      	orrs	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	372c      	adds	r7, #44	; 0x2c
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_GPIO_SetPinPull>:
{
 800091a:	b480      	push	{r7}
 800091c:	b08b      	sub	sp, #44	; 0x2c
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	fa93 f3a3 	rbit	r3, r3
 8000934:	613b      	str	r3, [r7, #16]
  return result;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000940:	2320      	movs	r3, #32
 8000942:	e003      	b.n	800094c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61fb      	str	r3, [r7, #28]
  return result;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800096e:	2320      	movs	r3, #32
 8000970:	e003      	b.n	800097a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	fab3 f383 	clz	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	431a      	orrs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	60da      	str	r2, [r3, #12]
}
 8000988:	bf00      	nop
 800098a:	372c      	adds	r7, #44	; 0x2c
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_SYSCFG_SetEXTISource>:
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <LL_SYSCFG_SetEXTISource+0x68>)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	0c1b      	lsrs	r3, r3, #16
 80009ca:	43db      	mvns	r3, r3
 80009cc:	ea02 0103 	and.w	r1, r2, r3
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	0c1b      	lsrs	r3, r3, #16
 80009d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	fa93 f3a3 	rbit	r3, r3
 80009dc:	60fb      	str	r3, [r7, #12]
  return result;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 80009e8:	2320      	movs	r3, #32
 80009ea:	e003      	b.n	80009f4 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fab3 f383 	clz	r3, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	fa03 f202 	lsl.w	r2, r3, r2
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <LL_SYSCFG_SetEXTISource+0x68>)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	3302      	adds	r3, #2
 8000a06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a0a:	bf00      	nop
 8000a0c:	371c      	adds	r7, #28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40010000 	.word	0x40010000

08000a1c <GPIO_init>:
//#include "options.h"
#include "gpio.h"


void GPIO_init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
	  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]

	  /* GPIO Ports Clock Enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000a3e:	2004      	movs	r0, #4
 8000a40:	f7ff ff16 	bl	8000870 <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff ff13 	bl	8000870 <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f7ff ff10 	bl	8000870 <LL_AHB2_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, nRF_CSN_Pin|nRF_CE_Pin);
 8000a50:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f7ff ff9c 	bl	8000994 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(User_LED_GPIO_Port, User_LED_Pin);
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	483c      	ldr	r0, [pc, #240]	; (8000b54 <GPIO_init+0x138>)
 8000a62:	f7ff ff97 	bl	8000994 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(Clock_Monitor_GPIO_Port, Clock_Monitor_Pin);
 8000a66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6a:	483b      	ldr	r0, [pc, #236]	; (8000b58 <GPIO_init+0x13c>)
 8000a6c:	f7ff ff92 	bl	8000994 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = User_Button_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4835      	ldr	r0, [pc, #212]	; (8000b58 <GPIO_init+0x13c>)
 8000a84:	f001 fb69 	bl	800215a <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = nRF_CSN_Pin|nRF_CE_Pin;
 8000a88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a8c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f001 fb58 	bl	800215a <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = User_LED_Pin;
 8000aaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aae:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4823      	ldr	r0, [pc, #140]	; (8000b54 <GPIO_init+0x138>)
 8000ac6:	f001 fb48 	bl	800215a <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = Clock_Monitor_Pin;
 8000aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ace:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(Clock_Monitor_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481c      	ldr	r0, [pc, #112]	; (8000b58 <GPIO_init+0x13c>)
 8000ae6:	f001 fb38 	bl	800215a <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000aea:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff ff5e 	bl	80009b0 <LL_SYSCFG_SetEXTISource>

	  /**/
	  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
	  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
	  EXTI_InitStruct.LineCommand = ENABLE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  LL_EXTI_Init(&EXTI_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f8ea 	bl	8001cec <LL_EXTI_Init>

	  /**/
	  LL_GPIO_SetPinPull(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_PULL_UP);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <GPIO_init+0x138>)
 8000b1e:	f7ff fefc 	bl	800091a <LL_GPIO_SetPinPull>

	  /**/
	  LL_GPIO_SetPinMode(nRF_IRQ_GPIO_Port, nRF_IRQ_Pin, LL_GPIO_MODE_INPUT);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <GPIO_init+0x138>)
 8000b28:	f7ff feba 	bl	80008a0 <LL_GPIO_SetPinMode>

	  /* EXTI interrupt init*/
	  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b2c:	f7ff fe16 	bl	800075c <__NVIC_GetPriorityGrouping>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe66 	bl	8000808 <NVIC_EncodePriority>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2006      	movs	r0, #6
 8000b42:	f7ff fe37 	bl	80007b4 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(EXTI0_IRQn);
 8000b46:	2006      	movs	r0, #6
 8000b48:	f7ff fe16 	bl	8000778 <__NVIC_EnableIRQ>
}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	48000400 	.word	0x48000400
 8000b58:	48000800 	.word	0x48000800

08000b5c <__NVIC_SetPriorityGrouping>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000

08000c04 <Delay_ms>:
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f002 f855 	bl	8002cbc <LL_mDelay>
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <main>:


uint8_t channel_nb = 60; //n° du canal radio utilisé (//channel 60 --> 2460 MHz)

int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /*clock domains activation*/
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff ffd7 	bl	8000bd4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c2a:	f7ff ffbb 	bl	8000ba4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f7ff ff94 	bl	8000b5c <__NVIC_SetPriorityGrouping>

  // config GPIO
  GPIO_init();
 8000c34:	f7ff fef2 	bl	8000a1c <GPIO_init>
  //config clock
  SystemClock_Config_80M();
 8000c38:	f7ff fd4e 	bl	80006d8 <SystemClock_Config_80M>
  //config bus SPI1 (pour la communication avec le transceiver nRF24L01)
  SPI1_Init();
 8000c3c:	f000 fcb4 	bl	80015a8 <SPI1_Init>
  //config USART2
  USART2_Init();
 8000c40:	f000 fe14 	bl	800186c <USART2_Init>

  //configuration du transceiver en mode PRX
  Init_Transceiver();
 8000c44:	f7ff fae4 	bl	8000210 <Init_Transceiver>
  Config_RF_channel(channel_nb,nRF24_DR_250kbps,nRF24_TXPWR_12dBm);
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <main+0x78>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	2120      	movs	r1, #32
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fb01 	bl	8000258 <Config_RF_channel>
  Config_CRC(CRC_Field_On, CRC_Field_1byte);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fb16 	bl	800028a <Config_CRC>
  Config_PRX_adress(5,nRF24_AA_ON,Default_pipe_address); //Adresse sur 5 bits
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	2005      	movs	r0, #5
 8000c64:	f7ff fb2e 	bl	80002c4 <Config_PRX_adress>
  Config_ESB_Protocol(nRF24_ARD_500us,10);
 8000c68:	210a      	movs	r1, #10
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fbaa 	bl	80003c4 <Config_ESB_Protocol>
  //on sort du mode power down
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8000c70:	2002      	movs	r0, #2
 8000c72:	f000 fa15 	bl	80010a0 <nRF24_SetPowerMode>
  Delay_ms(2); //Attente 2 ms (1.5 ms pour la sortie du mode power down.
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ffc4 	bl	8000c04 <Delay_ms>

  //Entrée en mode RX
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fa2e 	bl	80010de <nRF24_SetOperationalMode>
  StartListen();
 8000c82:	f7ff fbc3 	bl	800040c <StartListen>
  //Ecoute continue
  Continuous_RX_Listen(500);
 8000c86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8a:	f7ff fbc5 	bl	8000418 <Continuous_RX_Listen>
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000028 	.word	0x20000028

08000c98 <SysTick_Handler>:


void SysTick_Handler()
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	//do nothing ...
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_GPIO_SetOutputPin>:
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	619a      	str	r2, [r3, #24]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <LL_GPIO_ResetOutputPin>:
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	605a      	str	r2, [r3, #4]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d101      	bne.n	8000d62 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d80:	2b80      	cmp	r3, #128	; 0x80
 8000d82:	d101      	bne.n	8000d88 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	330c      	adds	r3, #12
 8000dc0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	78fa      	ldrb	r2, [r7, #3]
 8000dc6:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin);
 8000dd8:	2110      	movs	r1, #16
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f7ff ff70 	bl	8000cc2 <LL_GPIO_ResetOutputPin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin);
 8000dea:	2110      	movs	r1, #16
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f7ff ff59 	bl	8000ca6 <LL_GPIO_SetOutputPin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
    LL_SPI_SetRxFIFOThreshold(NRF_SPI,LL_SPI_RX_FIFO_TH_QUARTER);
 8000e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e06:	4814      	ldr	r0, [pc, #80]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e08:	f7ff ff79 	bl	8000cfe <LL_SPI_SetRxFIFOThreshold>
    LL_SPI_Enable(NRF_SPI);
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e0e:	f7ff ff66 	bl	8000cde <LL_SPI_Enable>
    while (LL_SPI_IsActiveFlag_BSY(NRF_SPI));
 8000e12:	bf00      	nop
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e16:	f7ff ffab 	bl	8000d70 <LL_SPI_IsActiveFlag_BSY>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1f9      	bne.n	8000e14 <nRF24_LL_RW+0x1c>
    while (!LL_SPI_IsActiveFlag_TXE(NRF_SPI));
 8000e20:	bf00      	nop
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e24:	f7ff ff91 	bl	8000d4a <LL_SPI_IsActiveFlag_TXE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f9      	beq.n	8000e22 <nRF24_LL_RW+0x2a>
    LL_SPI_TransmitData8(NRF_SPI, data);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e34:	f7ff ffbc 	bl	8000db0 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(NRF_SPI));
 8000e38:	bf00      	nop
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e3c:	f7ff ff72 	bl	8000d24 <LL_SPI_IsActiveFlag_RXNE>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f9      	beq.n	8000e3a <nRF24_LL_RW+0x42>
    return LL_SPI_ReceiveData8(NRF_SPI);
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <nRF24_LL_RW+0x60>)
 8000e48:	f7ff ffa5 	bl	8000d96 <LL_SPI_ReceiveData8>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40013000 	.word	0x40013000

08000e5c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000e66:	f7ff ffb5 	bl	8000dd4 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffc0 	bl	8000df8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000e78:	20ff      	movs	r0, #255	; 0xff
 8000e7a:	f7ff ffbd 	bl	8000df8 <nRF24_LL_RW>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000e82:	f7ff ffb0 	bl	8000de6 <nRF24_CSN_H>

	return value;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000ea0:	f7ff ff98 	bl	8000dd4 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b1f      	cmp	r3, #31
 8000ea8:	d810      	bhi.n	8000ecc <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f043 0320 	orr.w	r3, r3, #32
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff9b 	bl	8000df8 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff97 	bl	8000df8 <nRF24_LL_RW>
 8000eca:	e013      	b.n	8000ef4 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff92 	bl	8000df8 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2be1      	cmp	r3, #225	; 0xe1
 8000ed8:	d00c      	beq.n	8000ef4 <nRF24_WriteReg+0x64>
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2be2      	cmp	r3, #226	; 0xe2
 8000ede:	d009      	beq.n	8000ef4 <nRF24_WriteReg+0x64>
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2be3      	cmp	r3, #227	; 0xe3
 8000ee4:	d006      	beq.n	8000ef4 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2bff      	cmp	r3, #255	; 0xff
 8000eea:	d003      	beq.n	8000ef4 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff82 	bl	8000df8 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000ef4:	f7ff ff77 	bl	8000de6 <nRF24_CSN_H>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000f10:	f7ff ff60 	bl	8000dd4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff6e 	bl	8000df8 <nRF24_LL_RW>
	while (count--) {
 8000f1c:	e007      	b.n	8000f2e <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000f1e:	683c      	ldr	r4, [r7, #0]
 8000f20:	1c63      	adds	r3, r4, #1
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	20ff      	movs	r0, #255	; 0xff
 8000f26:	f7ff ff67 	bl	8000df8 <nRF24_LL_RW>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	1e5a      	subs	r2, r3, #1
 8000f32:	71ba      	strb	r2, [r7, #6]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f2      	bne.n	8000f1e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000f38:	f7ff ff55 	bl	8000de6 <nRF24_CSN_H>
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}

08000f44 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000f54:	f7ff ff3e 	bl	8000dd4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff4c 	bl	8000df8 <nRF24_LL_RW>
	while (count--) {
 8000f60:	e006      	b.n	8000f70 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	603a      	str	r2, [r7, #0]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff44 	bl	8000df8 <nRF24_LL_RW>
	while (count--) {
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	71ba      	strb	r2, [r7, #6]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f3      	bne.n	8000f62 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000f7a:	f7ff ff34 	bl	8000de6 <nRF24_CSN_H>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <ReadMBReg>:

uint8_t ReadReg(uint8_t reg) {
	return nRF24_ReadReg(reg);
}

void ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	6039      	str	r1, [r7, #0]
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	4613      	mov	r3, r2
 8000f94:	71bb      	strb	r3, [r7, #6]
	nRF24_ReadMBReg(reg, pBuf, count);
 8000f96:	79ba      	ldrb	r2, [r7, #6]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffaf 	bl	8000f00 <nRF24_ReadMBReg>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000fae:	2108      	movs	r1, #8
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ff6d 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000fb6:	213f      	movs	r1, #63	; 0x3f
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff ff69 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff ff65 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f7ff ff61 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000fce:	2103      	movs	r1, #3
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f7ff ff5d 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f7ff ff59 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000fde:	210e      	movs	r1, #14
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f7ff ff55 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f7ff ff51 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2011      	movs	r0, #17
 8000ff2:	f7ff ff4d 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2012      	movs	r0, #18
 8000ffa:	f7ff ff49 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2013      	movs	r0, #19
 8001002:	f7ff ff45 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8001006:	2100      	movs	r1, #0
 8001008:	2014      	movs	r0, #20
 800100a:	f7ff ff41 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800100e:	2100      	movs	r1, #0
 8001010:	2015      	movs	r0, #21
 8001012:	f7ff ff3d 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	2016      	movs	r0, #22
 800101a:	f7ff ff39 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800101e:	2100      	movs	r1, #0
 8001020:	201c      	movs	r0, #28
 8001022:	f7ff ff35 	bl	8000e90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8001026:	2100      	movs	r1, #0
 8001028:	201d      	movs	r0, #29
 800102a:	f7ff ff31 	bl	8000e90 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800102e:	f000 f9dd 	bl	80013ec <nRF24_FlushRX>
	nRF24_FlushTX();
 8001032:	f000 f9d3 	bl	80013dc <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8001036:	f000 f9e1 	bl	80013fc <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800103a:	f7ff fed4 	bl	8000de6 <nRF24_CSN_H>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <nRF24_Check+0x58>)
 800104c:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800104e:	2205      	movs	r2, #5
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	2030      	movs	r0, #48	; 0x30
 8001054:	f7ff ff76 	bl	8000f44 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8001058:	463b      	mov	r3, r7
 800105a:	2205      	movs	r2, #5
 800105c:	4619      	mov	r1, r3
 800105e:	2010      	movs	r0, #16
 8001060:	f7ff ff4e 	bl	8000f00 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e010      	b.n	800108c <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	4413      	add	r3, r2
 8001072:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1c59      	adds	r1, r3, #1
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d001      	beq.n	8001086 <nRF24_Check+0x42>
 8001082:	2300      	movs	r3, #0
 8001084:	e006      	b.n	8001094 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	3301      	adds	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d9eb      	bls.n	800106a <nRF24_Check+0x26>
	}

	return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08002e8c 	.word	0x08002e8c

080010a0 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fed6 	bl	8000e5c <nRF24_ReadReg>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d104      	bne.n	80010c4 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e003      	b.n	80010cc <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f023 0302 	bic.w	r3, r3, #2
 80010ca:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4619      	mov	r1, r3
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fedd 	bl	8000e90 <nRF24_WriteReg>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff feb7 	bl	8000e5c <nRF24_ReadReg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b25a      	sxtb	r2, r3
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4313      	orrs	r3, r2
 800110a:	b25b      	sxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4619      	mov	r1, r3
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff febc 	bl	8000e90 <nRF24_WriteReg>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe96 	bl	8000e5c <nRF24_ReadReg>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f023 030c 	bic.w	r3, r3, #12
 800113a:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	b25a      	sxtb	r2, r3
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4313      	orrs	r3, r2
 800114c:	b25b      	sxtb	r3, r3
 800114e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	4619      	mov	r1, r3
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fe9b 	bl	8000e90 <nRF24_WriteReg>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4619      	mov	r1, r3
 8001170:	2005      	movs	r0, #5
 8001172:	f7ff fe8d 	bl	8000e90 <nRF24_WriteReg>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	460a      	mov	r2, r1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	4613      	mov	r3, r2
 800118c:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b25a      	sxtb	r2, r3
 8001194:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	2004      	movs	r0, #4
 80011a8:	f7ff fe72 	bl	8000e90 <nRF24_WriteReg>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3b02      	subs	r3, #2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4619      	mov	r1, r3
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff fe62 	bl	8000e90 <nRF24_WriteReg>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d83e      	bhi.n	8001264 <nRF24_SetAddr+0x90>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <nRF24_SetAddr+0x18>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001209 	.word	0x08001209
 80011f0:	08001209 	.word	0x08001209
 80011f4:	08001251 	.word	0x08001251
 80011f8:	08001251 	.word	0x08001251
 80011fc:	08001251 	.word	0x08001251
 8001200:	08001251 	.word	0x08001251
 8001204:	08001209 	.word	0x08001209
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8001208:	2003      	movs	r0, #3
 800120a:	f7ff fe27 	bl	8000e5c <nRF24_ReadReg>
 800120e:	4603      	mov	r3, r0
 8001210:	3301      	adds	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 800121c:	f7ff fdda 	bl	8000dd4 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <nRF24_SetAddr+0x9c>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	f043 0320 	orr.w	r3, r3, #32
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fde3 	bl	8000df8 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	603a      	str	r2, [r7, #0]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fddc 	bl	8000df8 <nRF24_LL_RW>
			} while (addr_width--);
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	1e5a      	subs	r2, r3, #1
 8001244:	73fa      	strb	r2, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f3      	bne.n	8001232 <nRF24_SetAddr+0x5e>
			nRF24_CSN_H();
 800124a:	f7ff fdcc 	bl	8000de6 <nRF24_CSN_H>
			break;
 800124e:	e00a      	b.n	8001266 <nRF24_SetAddr+0x92>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <nRF24_SetAddr+0x9c>)
 8001254:	5cd2      	ldrb	r2, [r2, r3]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f7ff fe17 	bl	8000e90 <nRF24_WriteReg>
			break;
 8001262:	e000      	b.n	8001266 <nRF24_SetAddr+0x92>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001264:	bf00      	nop
	}
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08002eb0 	.word	0x08002eb0

08001274 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001282:	2006      	movs	r0, #6
 8001284:	f7ff fdea 	bl	8000e5c <nRF24_ReadReg>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	f023 0306 	bic.w	r3, r3, #6
 8001292:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4313      	orrs	r3, r2
 800129a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	4619      	mov	r1, r3
 80012a0:	2006      	movs	r0, #6
 80012a2:	f7ff fdf5 	bl	8000e90 <nRF24_WriteReg>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80012b8:	2006      	movs	r0, #6
 80012ba:	f7ff fdcf 	bl	8000e5c <nRF24_ReadReg>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80012c8:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	4619      	mov	r1, r3
 80012d6:	2006      	movs	r0, #6
 80012d8:	f7ff fdda 	bl	8000e90 <nRF24_WriteReg>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	460b      	mov	r3, r1
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	4613      	mov	r3, r2
 80012f4:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80012f6:	2002      	movs	r0, #2
 80012f8:	f7ff fdb0 	bl	8000e5c <nRF24_ReadReg>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	b25b      	sxtb	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001314:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	4619      	mov	r1, r3
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff fdb8 	bl	8000e90 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <nRF24_SetRXPipe+0xa4>)
 8001324:	5cd2      	ldrb	r2, [r2, r3]
 8001326:	797b      	ldrb	r3, [r7, #5]
 8001328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f7ff fdad 	bl	8000e90 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fd90 	bl	8000e5c <nRF24_ReadReg>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10a      	bne.n	800135c <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	b25a      	sxtb	r2, r3
 8001350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e00b      	b.n	8001374 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2201      	movs	r2, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	b25a      	sxtb	r2, r3
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4013      	ands	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	4619      	mov	r1, r3
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fd89 	bl	8000e90 <nRF24_WriteReg>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	08002ea8 	.word	0x08002ea8

0800138c <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fd60 	bl	8000e5c <nRF24_ReadReg>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2201      	movs	r2, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4619      	mov	r1, r3
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fd69 	bl	8000e90 <nRF24_WriteReg>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80013ca:	2017      	movs	r0, #23
 80013cc:	f7ff fd46 	bl	8000e5c <nRF24_ReadReg>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}

080013dc <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80013e0:	21ff      	movs	r1, #255	; 0xff
 80013e2:	20e1      	movs	r0, #225	; 0xe1
 80013e4:	f7ff fd54 	bl	8000e90 <nRF24_WriteReg>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80013f0:	21ff      	movs	r1, #255	; 0xff
 80013f2:	20e2      	movs	r0, #226	; 0xe2
 80013f4:	f7ff fd4c 	bl	8000e90 <nRF24_WriteReg>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff fd2a 	bl	8000e5c <nRF24_ReadReg>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001412:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4619      	mov	r1, r3
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fd39 	bl	8000e90 <nRF24_WriteReg>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800142c:	f7ff fcd2 	bl	8000dd4 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8001430:	2060      	movs	r0, #96	; 0x60
 8001432:	f7ff fce1 	bl	8000df8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001436:	20ff      	movs	r0, #255	; 0xff
 8001438:	f7ff fcde 	bl	8000df8 <nRF24_LL_RW>
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8001440:	f7ff fcd1 	bl	8000de6 <nRF24_CSN_H>

	return value;
 8001444:	79fb      	ldrb	r3, [r7, #7]

}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800145e:	2007      	movs	r0, #7
 8001460:	f7ff fcfc 	bl	8000e5c <nRF24_ReadReg>
 8001464:	4603      	mov	r3, r0
 8001466:	105b      	asrs	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d829      	bhi.n	80014ca <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00f      	beq.n	800149c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 800147c:	f7ff ffd3 	bl	8001426 <nRF24_GetRxDplPayloadWidth>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b20      	cmp	r3, #32
 800148e:	d90f      	bls.n	80014b0 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001496:	f7ff ffa9 	bl	80013ec <nRF24_FlushRX>
 800149a:	e009      	b.n	80014b0 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <nRF24_ReadPayloadGeneric+0x8c>)
 80014a0:	5cd3      	ldrb	r3, [r2, r3]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fcda 	bl	8000e5c <nRF24_ReadReg>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	68f9      	ldr	r1, [r7, #12]
 80014c0:	2061      	movs	r0, #97	; 0x61
 80014c2:	f7ff fd1d 	bl	8000f00 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	e003      	b.n	80014d2 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80014d0:	23ff      	movs	r3, #255	; 0xff
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08002ea8 	.word	0x08002ea8

080014e0 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffae 	bl	8001450 <nRF24_ReadPayloadGeneric>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <LL_AHB2_GRP1_EnableClock>:
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800150a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4313      	orrs	r3, r2
 8001512:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000

08001530 <LL_APB2_GRP1_EnableClock>:
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <LL_APB2_GRP1_EnableClock+0x2c>)
 800153a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <LL_APB2_GRP1_EnableClock+0x2c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4313      	orrs	r3, r2
 8001542:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4013      	ands	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <LL_SPI_SetStandard>:
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f023 0210 	bic.w	r2, r3, #16
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_SPI_DisableNSSPulseMgt>:
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f023 0208 	bic.w	r2, r3, #8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	605a      	str	r2, [r3, #4]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SPI1_Init>:
// > mode master, full duplex
// > 8 bits
// > pin NSS généré logiciellement
// > bit rate = 5 Mbps --> avec un bus clock à 80 MHz le prescaler est réglé à 16.
void SPI1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b090      	sub	sp, #64	; 0x40
 80015ac:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2228      	movs	r2, #40	; 0x28
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fbda 	bl	8002d70 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80015cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015d0:	f7ff ffae 	bl	8001530 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff ff93 	bl	8001500 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015da:	23e0      	movs	r3, #224	; 0xe0
 80015dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015de:	2302      	movs	r3, #2
 80015e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80015ee:	2305      	movs	r3, #5
 80015f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f000 fdae 	bl	800215a <LL_GPIO_Init>

  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001602:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001606:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001608:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800160c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800161c:	2318      	movs	r3, #24
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001628:	2307      	movs	r3, #7
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <SPI1_Init+0xa8>)
 8001634:	f001 f9df 	bl	80029f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001638:	2100      	movs	r1, #0
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <SPI1_Init+0xa8>)
 800163c:	f7ff ff90 	bl	8001560 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <SPI1_Init+0xa8>)
 8001642:	f7ff ffa0 	bl	8001586 <LL_SPI_DisableNSSPulseMgt>
}
 8001646:	bf00      	nop
 8001648:	3740      	adds	r7, #64	; 0x40
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40013000 	.word	0x40013000

08001654 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4013      	ands	r3, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d101      	bne.n	800166e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40010400 	.word	0x40010400

08001680 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6153      	str	r3, [r2, #20]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40010400 	.word	0x40010400

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffad 	bl	8001654 <LL_EXTI_IsActiveFlag_0_31>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff ffbd 	bl	8001680 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <SystemInit+0x64>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <SystemInit+0x64>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <SystemInit+0x68>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a13      	ldr	r2, [pc, #76]	; (8001774 <SystemInit+0x68>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <SystemInit+0x68>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <SystemInit+0x68>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <SystemInit+0x68>)
 8001738:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800173c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001740:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <SystemInit+0x68>)
 8001744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001748:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <SystemInit+0x68>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <SystemInit+0x68>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <SystemInit+0x68>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SystemInit+0x64>)
 800175e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001762:	609a      	str	r2, [r3, #8]
#endif
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	40021000 	.word	0x40021000

08001778 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d101      	bne.n	80017dc <LL_USART_IsActiveFlag_TXE+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_USART_IsActiveFlag_TXE+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <LL_AHB2_GRP1_EnableClock>:
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4013      	ands	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000

0800183c <LL_APB1_GRP1_EnableClock>:
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001846:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <LL_APB1_GRP1_EnableClock+0x2c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4313      	orrs	r3, r2
 800184e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001852:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4013      	ands	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000

0800186c <USART2_Init>:
#include "stm32l4xx_ll_gpio.h"


//Initialisation de l'USART2.
void USART2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001896:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800189a:	f7ff ffcf 	bl	800183c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff ffb4 	bl	800180c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80018a4:	230c      	movs	r3, #12
 80018a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018a8:	2302      	movs	r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80018b8:	2307      	movs	r3, #7
 80018ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f000 fc49 	bl	800215a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 80018c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018cc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018da:	230c      	movs	r3, #12
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <USART2_Init+0x9c>)
 80018ee:	f001 f941 	bl	8002b74 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <USART2_Init+0x9c>)
 80018f4:	f7ff ff50 	bl	8001798 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <USART2_Init+0x9c>)
 80018fa:	f7ff ff3d 	bl	8001778 <LL_USART_Enable>
}
 80018fe:	bf00      	nop
 8001900:	3738      	adds	r7, #56	; 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40004400 	.word	0x40004400

0800190c <UART_SendChar>:

void UART_SendChar(char b) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]

	while(!LL_USART_IsActiveFlag_TXE(USART2)){};
 8001916:	bf00      	nop
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <UART_SendChar+0x2c>)
 800191a:	f7ff ff53 	bl	80017c4 <LL_USART_IsActiveFlag_TXE>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f9      	beq.n	8001918 <UART_SendChar+0xc>
	LL_USART_TransmitData8(USART2, (uint8_t) b);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4619      	mov	r1, r3
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <UART_SendChar+0x2c>)
 800192a:	f7ff ff5e 	bl	80017ea <LL_USART_TransmitData8>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40004400 	.word	0x40004400

0800193c <UART_SendStr>:

void UART_SendStr(char *string) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	for(;(*string) != 0;string++)
 8001944:	e007      	b.n	8001956 <UART_SendStr+0x1a>
	{
		UART_SendChar(* string);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffde 	bl	800190c <UART_SendChar>
	for(;(*string) != 0;string++)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3301      	adds	r3, #1
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f3      	bne.n	8001946 <UART_SendStr+0xa>
	}
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	81fb      	strh	r3, [r7, #14]
 8001978:	e018      	b.n	80019ac <UART_SendBufHex+0x44>
		ch = *buf++;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <UART_SendBufHex+0x54>)
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ffbb 	bl	800190c <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001996:	7b7b      	ldrb	r3, [r7, #13]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <UART_SendBufHex+0x54>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ffb3 	bl	800190c <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	3301      	adds	r3, #1
 80019aa:	81fb      	strh	r3, [r7, #14]
 80019ac:	89fa      	ldrh	r2, [r7, #14]
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3e2      	bcc.n	800197a <UART_SendBufHex+0x12>
	}
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	08002e94 	.word	0x08002e94

080019c0 <UART_SendInt>:
void UART_SendHex8(uint8_t num) {
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
}

void UART_SendInt(uint32_t num) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
	if (num < 0) {
		UART_SendChar('-');
		num *= -1;
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <UART_SendInt+0x74>)
 80019d0:	fba3 2301 	umull	r2, r3, r3, r1
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	1aca      	subs	r2, r1, r3
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	1c59      	adds	r1, r3, #1
 80019e6:	6179      	str	r1, [r7, #20]
 80019e8:	3230      	adds	r2, #48	; 0x30
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f107 0118 	add.w	r1, r7, #24
 80019f0:	440b      	add	r3, r1
 80019f2:	f803 2c10 	strb.w	r2, [r3, #-16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <UART_SendInt+0x74>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e1      	bne.n	80019cc <UART_SendInt+0xc>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00a      	b.n	8001a26 <UART_SendInt+0x66>
 8001a10:	f107 0208 	add.w	r2, r7, #8
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff76 	bl	800190c <UART_SendChar>
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	daf1      	bge.n	8001a10 <UART_SendInt+0x50>
}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	cccccccd 	.word	0xcccccccd

08001a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff fe66 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a42:	e003      	b.n	8001a4c <LoopCopyDataInit>

08001a44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a4a:	3104      	adds	r1, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a4c:	480a      	ldr	r0, [pc, #40]	; (8001a78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a54:	d3f6      	bcc.n	8001a44 <CopyDataInit>
	ldr	r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a58:	e002      	b.n	8001a60 <LoopFillZerobss>

08001a5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a5c:	f842 3b04 	str.w	r3, [r2], #4

08001a60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LoopForever+0x16>)
	cmp	r2, r3
 8001a62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a64:	d3f9      	bcc.n	8001a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f001 f95f 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6a:	f7ff f8d7 	bl	8000c1c <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a70:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a74:	08002f08 	.word	0x08002f08
	ldr	r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a7c:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001a80:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001a84:	20000070 	.word	0x20000070

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>
	...

08001a8c <LL_EXTI_EnableIT_0_31>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_EXTI_EnableIT_0_31+0x20>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <LL_EXTI_EnableIT_0_31+0x20>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <LL_EXTI_EnableIT_32_63>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LL_EXTI_EnableIT_32_63+0x20>)
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <LL_EXTI_EnableIT_32_63+0x20>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	620b      	str	r3, [r1, #32]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <LL_EXTI_DisableIT_0_31>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40010400 	.word	0x40010400

08001afc <LL_EXTI_DisableIT_32_63>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_EXTI_DisableIT_32_63+0x24>)
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <LL_EXTI_DisableIT_32_63+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	620b      	str	r3, [r1, #32]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010400 	.word	0x40010400

08001b24 <LL_EXTI_EnableEvent_0_31>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4904      	ldr	r1, [pc, #16]	; (8001b44 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40010400 	.word	0x40010400

08001b48 <LL_EXTI_EnableEvent_32_63>:
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b54:	4904      	ldr	r1, [pc, #16]	; (8001b68 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40010400 	.word	0x40010400

08001b6c <LL_EXTI_DisableEvent_0_31>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40010400 	.word	0x40010400

08001b94 <LL_EXTI_DisableEvent_32_63>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40010400 	.word	0x40010400

08001bbc <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40010400 	.word	0x40010400

08001be0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bec:	4904      	ldr	r1, [pc, #16]	; (8001c00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40010400 	.word	0x40010400

08001c04 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4904      	ldr	r1, [pc, #16]	; (8001c28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010400 	.word	0x40010400

08001c2c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4904      	ldr	r1, [pc, #16]	; (8001c50 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010400 	.word	0x40010400

08001c54 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4904      	ldr	r1, [pc, #16]	; (8001c74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40010400 	.word	0x40010400

08001c78 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	4904      	ldr	r1, [pc, #16]	; (8001c98 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40010400 	.word	0x40010400

08001c9c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40010400 	.word	0x40010400

08001cec <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7a1b      	ldrb	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80c6 	beq.w	8001e8e <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d05d      	beq.n	8001dc6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7a5b      	ldrb	r3, [r3, #9]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d00e      	beq.n	8001d30 <LL_EXTI_Init+0x44>
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d017      	beq.n	8001d46 <LL_EXTI_Init+0x5a>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d120      	bne.n	8001d5c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff24 	bl	8001b6c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feaf 	bl	8001a8c <LL_EXTI_EnableIT_0_31>
          break;
 8001d2e:	e018      	b.n	8001d62 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fecd 	bl	8001ad4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fef0 	bl	8001b24 <LL_EXTI_EnableEvent_0_31>
          break;
 8001d44:	e00d      	b.n	8001d62 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fe9e 	bl	8001a8c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fee5 	bl	8001b24 <LL_EXTI_EnableEvent_0_31>
          break;
 8001d5a:	e002      	b.n	8001d62 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
          break;
 8001d60:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7a9b      	ldrb	r3, [r3, #10]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02d      	beq.n	8001dc6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7a9b      	ldrb	r3, [r3, #10]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d00e      	beq.n	8001d90 <LL_EXTI_Init+0xa4>
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d017      	beq.n	8001da6 <LL_EXTI_Init+0xba>
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d120      	bne.n	8001dbc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff8c 	bl	8001c9c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff17 	bl	8001bbc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001d8e:	e01b      	b.n	8001dc8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff58 	bl	8001c54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001da4:	e010      	b.n	8001dc8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff06 	bl	8001bbc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff4d 	bl	8001c54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001dba:	e005      	b.n	8001dc8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	60fb      	str	r3, [r7, #12]
            break;
 8001dc4:	e000      	b.n	8001dc8 <LL_EXTI_Init+0xdc>
        }
      }
 8001dc6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d073      	beq.n	8001eb8 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7a5b      	ldrb	r3, [r3, #9]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d00e      	beq.n	8001df6 <LL_EXTI_Init+0x10a>
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d017      	beq.n	8001e0c <LL_EXTI_Init+0x120>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d120      	bne.n	8001e22 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fed5 	bl	8001b94 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fe5e 	bl	8001ab0 <LL_EXTI_EnableIT_32_63>
          break;
 8001df4:	e01a      	b.n	8001e2c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fe7e 	bl	8001afc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe9f 	bl	8001b48 <LL_EXTI_EnableEvent_32_63>
          break;
 8001e0a:	e00f      	b.n	8001e2c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe4d 	bl	8001ab0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe94 	bl	8001b48 <LL_EXTI_EnableEvent_32_63>
          break;
 8001e20:	e004      	b.n	8001e2c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
          break;
 8001e2a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7a9b      	ldrb	r3, [r3, #10]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d041      	beq.n	8001eb8 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7a9b      	ldrb	r3, [r3, #10]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d00e      	beq.n	8001e5a <LL_EXTI_Init+0x16e>
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d017      	beq.n	8001e70 <LL_EXTI_Init+0x184>
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d120      	bne.n	8001e86 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff3b 	bl	8001cc4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fec4 	bl	8001be0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001e58:	e02f      	b.n	8001eba <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fee4 	bl	8001c2c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff05 	bl	8001c78 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001e6e:	e024      	b.n	8001eba <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff feb3 	bl	8001be0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fefa 	bl	8001c78 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001e84:	e019      	b.n	8001eba <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
            break;
 8001e8a:	bf00      	nop
 8001e8c:	e015      	b.n	8001eba <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fe1e 	bl	8001ad4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe65 	bl	8001b6c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fe28 	bl	8001afc <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fe6f 	bl	8001b94 <LL_EXTI_DisableEvent_32_63>
 8001eb6:	e000      	b.n	8001eba <LL_EXTI_Init+0x1ce>
      }
 8001eb8:	bf00      	nop
  }

  return status;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <LL_GPIO_SetPinMode>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	613b      	str	r3, [r7, #16]
  return result;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001eea:	2320      	movs	r3, #32
 8001eec:	e003      	b.n	8001ef6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2103      	movs	r1, #3
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	401a      	ands	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	e003      	b.n	8001f24 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	372c      	adds	r7, #44	; 0x2c
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_GPIO_SetPinOutputType>:
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	605a      	str	r2, [r3, #4]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_GPIO_SetPinSpeed>:
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b08b      	sub	sp, #44	; 0x2c
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	613b      	str	r3, [r7, #16]
  return result;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	61fb      	str	r3, [r7, #28]
  return result;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e003      	b.n	8001fce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	372c      	adds	r7, #44	; 0x2c
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_GPIO_SetPinPull>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	613b      	str	r3, [r7, #16]
  return result;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800200e:	2320      	movs	r3, #32
 8002010:	e003      	b.n	800201a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2103      	movs	r1, #3
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	401a      	ands	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	61fb      	str	r3, [r7, #28]
  return result;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e003      	b.n	8002048 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	60da      	str	r2, [r3, #12]
}
 8002056:	bf00      	nop
 8002058:	372c      	adds	r7, #44	; 0x2c
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_GPIO_SetAFPin_0_7>:
{
 8002062:	b480      	push	{r7}
 8002064:	b08b      	sub	sp, #44	; 0x2c
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	613b      	str	r3, [r7, #16]
  return result;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	210f      	movs	r1, #15
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	61fb      	str	r3, [r7, #28]
  return result;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e003      	b.n	80020c2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	621a      	str	r2, [r3, #32]
}
 80020d0:	bf00      	nop
 80020d2:	372c      	adds	r7, #44	; 0x2c
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_GPIO_SetAFPin_8_15>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b08b      	sub	sp, #44	; 0x2c
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	613b      	str	r3, [r7, #16]
  return result;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	210f      	movs	r1, #15
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	401a      	ands	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
  return result;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800214e:	bf00      	nop
 8002150:	372c      	adds	r7, #44	; 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b088      	sub	sp, #32
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	60fb      	str	r3, [r7, #12]
  return result;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <LL_GPIO_Init+0x26>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800218a:	e040      	b.n	800220e <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	69b9      	ldr	r1, [r7, #24]
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fe8a 	bl	8001ec4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d003      	beq.n	80021c0 <LL_GPIO_Init+0x66>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d106      	bne.n	80021ce <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	461a      	mov	r2, r3
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fed0 	bl	8001f6e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	461a      	mov	r2, r3
 80021d4:	69b9      	ldr	r1, [r7, #24]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff06 	bl	8001fe8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d111      	bne.n	8002208 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2bff      	cmp	r3, #255	; 0xff
 80021e8:	d807      	bhi.n	80021fa <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	461a      	mov	r2, r3
 80021f0:	69b9      	ldr	r1, [r7, #24]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff35 	bl	8002062 <LL_GPIO_SetAFPin_0_7>
 80021f8:	e006      	b.n	8002208 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	461a      	mov	r2, r3
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff6a 	bl	80020dc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1b7      	bne.n	800218c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d003      	beq.n	800222c <LL_GPIO_Init+0xd2>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d107      	bne.n	800223c <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	461a      	mov	r2, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fe81 	bl	8001f3e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <LL_RCC_HSI_IsReady>:
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <LL_RCC_HSI_IsReady+0x24>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002258:	d101      	bne.n	800225e <LL_RCC_HSI_IsReady+0x16>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_RCC_HSI_IsReady+0x18>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000

08002270 <LL_RCC_LSE_IsReady>:
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <LL_RCC_LSE_IsReady+0x24>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d101      	bne.n	8002286 <LL_RCC_LSE_IsReady+0x16>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_RCC_LSE_IsReady+0x18>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000

08002298 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d101      	bne.n	80022ac <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_MSI_GetRange>:
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <LL_RCC_MSI_GetRange+0x18>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000

080022f4 <LL_RCC_GetSysClkSource>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <LL_RCC_GetSysClkSource+0x18>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <LL_RCC_GetAHBPrescaler>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <LL_RCC_GetAHBPrescaler+0x18>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <LL_RCC_GetAPB1Prescaler>:
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000

08002348 <LL_RCC_GetAPB2Prescaler>:
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_RCC_GetAPB2Prescaler+0x18>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <LL_RCC_GetUSARTClockSource>:
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <LL_RCC_GetUSARTClockSource+0x24>)
 800236e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	4313      	orrs	r3, r2
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000

0800238c <LL_RCC_GetUARTClockSource>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <LL_RCC_GetUARTClockSource+0x24>)
 8002396:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	401a      	ands	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	4313      	orrs	r3, r2
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000

080023b4 <LL_RCC_PLL_GetMainSource>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <LL_RCC_PLL_GetMainSource+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000

080023d0 <LL_RCC_PLL_GetN>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_RCC_PLL_GetN+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000

080023ec <LL_RCC_PLL_GetR>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <LL_RCC_PLL_GetR+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000

08002408 <LL_RCC_PLL_GetDivider>:
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <LL_RCC_PLL_GetDivider+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000

08002424 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d137      	bne.n	80024a6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff94 	bl	8002364 <LL_RCC_GetUSARTClockSource>
 800243c:	4603      	mov	r3, r0
 800243e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002442:	2b03      	cmp	r3, #3
 8002444:	f200 80b2 	bhi.w	80025ac <LL_RCC_GetUSARTClockFreq+0x188>
 8002448:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	0800248f 	.word	0x0800248f
 8002454:	08002461 	.word	0x08002461
 8002458:	08002469 	.word	0x08002469
 800245c:	0800247b 	.word	0x0800247b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002460:	f000 f952 	bl	8002708 <RCC_GetSystemClockFreq>
 8002464:	60f8      	str	r0, [r7, #12]
        break;
 8002466:	e0b2      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002468:	f7ff feee 	bl	8002248 <LL_RCC_HSI_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 809e 	beq.w	80025b0 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8002474:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002476:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002478:	e09a      	b.n	80025b0 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800247a:	f7ff fef9 	bl	8002270 <LL_RCC_LSE_IsReady>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8097 	beq.w	80025b4 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8002486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800248c:	e092      	b.n	80025b4 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800248e:	f000 f93b 	bl	8002708 <RCC_GetSystemClockFreq>
 8002492:	4603      	mov	r3, r0
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f9c7 	bl	8002828 <RCC_GetHCLKClockFreq>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f9ed 	bl	800287c <RCC_GetPCLK2ClockFreq>
 80024a2:	60f8      	str	r0, [r7, #12]
        break;
 80024a4:	e093      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d146      	bne.n	800253a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff59 	bl	8002364 <LL_RCC_GetUSARTClockSource>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d87d      	bhi.n	80025b8 <LL_RCC_GetUSARTClockFreq+0x194>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	08002523 	.word	0x08002523
 80024c8:	080025b9 	.word	0x080025b9
 80024cc:	080025b9 	.word	0x080025b9
 80024d0:	080025b9 	.word	0x080025b9
 80024d4:	080024f9 	.word	0x080024f9
 80024d8:	080025b9 	.word	0x080025b9
 80024dc:	080025b9 	.word	0x080025b9
 80024e0:	080025b9 	.word	0x080025b9
 80024e4:	08002501 	.word	0x08002501
 80024e8:	080025b9 	.word	0x080025b9
 80024ec:	080025b9 	.word	0x080025b9
 80024f0:	080025b9 	.word	0x080025b9
 80024f4:	08002511 	.word	0x08002511
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80024f8:	f000 f906 	bl	8002708 <RCC_GetSystemClockFreq>
 80024fc:	60f8      	str	r0, [r7, #12]
        break;
 80024fe:	e066      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002500:	f7ff fea2 	bl	8002248 <LL_RCC_HSI_IsReady>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d058      	beq.n	80025bc <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800250a:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800250c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800250e:	e055      	b.n	80025bc <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002510:	f7ff feae 	bl	8002270 <LL_RCC_LSE_IsReady>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d052      	beq.n	80025c0 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800251a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002520:	e04e      	b.n	80025c0 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002522:	f000 f8f1 	bl	8002708 <RCC_GetSystemClockFreq>
 8002526:	4603      	mov	r3, r0
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f97d 	bl	8002828 <RCC_GetHCLKClockFreq>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f98f 	bl	8002854 <RCC_GetPCLK1ClockFreq>
 8002536:	60f8      	str	r0, [r7, #12]
        break;
 8002538:	e049      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d141      	bne.n	80025c4 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff0f 	bl	8002364 <LL_RCC_GetUSARTClockSource>
 8002546:	4603      	mov	r3, r0
 8002548:	4a24      	ldr	r2, [pc, #144]	; (80025dc <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <LL_RCC_GetUSARTClockFreq+0x146>
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d803      	bhi.n	800255c <LL_RCC_GetUSARTClockFreq+0x138>
 8002554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002558:	d01c      	beq.n	8002594 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 800255a:	e038      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800255c:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <LL_RCC_GetUSARTClockFreq+0x14e>
 8002562:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002566:	d00c      	beq.n	8002582 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8002568:	e031      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 800256a:	f000 f8cd 	bl	8002708 <RCC_GetSystemClockFreq>
 800256e:	60f8      	str	r0, [r7, #12]
          break;
 8002570:	e02d      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8002572:	f7ff fe69 	bl	8002248 <LL_RCC_HSI_IsReady>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d025      	beq.n	80025c8 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800257e:	60fb      	str	r3, [r7, #12]
          break;
 8002580:	e022      	b.n	80025c8 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8002582:	f7ff fe75 	bl	8002270 <LL_RCC_LSE_IsReady>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01f      	beq.n	80025cc <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 800258c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002590:	60fb      	str	r3, [r7, #12]
          break;
 8002592:	e01b      	b.n	80025cc <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002594:	f000 f8b8 	bl	8002708 <RCC_GetSystemClockFreq>
 8002598:	4603      	mov	r3, r0
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f944 	bl	8002828 <RCC_GetHCLKClockFreq>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f956 	bl	8002854 <RCC_GetPCLK1ClockFreq>
 80025a8:	60f8      	str	r0, [r7, #12]
          break;
 80025aa:	e010      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80025ac:	bf00      	nop
 80025ae:	e00e      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80025b0:	bf00      	nop
 80025b2:	e00c      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80025b4:	bf00      	nop
 80025b6:	e00a      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80025b8:	bf00      	nop
 80025ba:	e008      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80025bc:	bf00      	nop
 80025be:	e006      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80025c0:	bf00      	nop
 80025c2:	e004      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 80025c4:	bf00      	nop
 80025c6:	e002      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80025c8:	bf00      	nop
 80025ca:	e000      	b.n	80025ce <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80025cc:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	00300010 	.word	0x00300010
 80025e0:	00300020 	.word	0x00300020

080025e4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2bc0      	cmp	r3, #192	; 0xc0
 80025f4:	d135      	bne.n	8002662 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fec8 	bl	800238c <LL_RCC_GetUARTClockSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4a3d      	ldr	r2, [pc, #244]	; (80026f4 <LL_RCC_GetUARTClockFreq+0x110>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <LL_RCC_GetUARTClockFreq+0x3c>
 8002604:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <LL_RCC_GetUARTClockFreq+0x110>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d803      	bhi.n	8002612 <LL_RCC_GetUARTClockFreq+0x2e>
 800260a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800260e:	d01c      	beq.n	800264a <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002610:	e02c      	b.n	800266c <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002612:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <LL_RCC_GetUARTClockFreq+0x114>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <LL_RCC_GetUARTClockFreq+0x44>
 8002618:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800261c:	d00c      	beq.n	8002638 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 800261e:	e025      	b.n	800266c <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8002620:	f000 f872 	bl	8002708 <RCC_GetSystemClockFreq>
 8002624:	60f8      	str	r0, [r7, #12]
        break;
 8002626:	e021      	b.n	800266c <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8002628:	f7ff fe0e 	bl	8002248 <LL_RCC_HSI_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <LL_RCC_GetUARTClockFreq+0x118>)
 8002634:	60fb      	str	r3, [r7, #12]
        break;
 8002636:	e016      	b.n	8002666 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8002638:	f7ff fe1a 	bl	8002270 <LL_RCC_LSE_IsReady>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d013      	beq.n	800266a <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8002642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002646:	60fb      	str	r3, [r7, #12]
        break;
 8002648:	e00f      	b.n	800266a <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800264a:	f000 f85d 	bl	8002708 <RCC_GetSystemClockFreq>
 800264e:	4603      	mov	r3, r0
 8002650:	4618      	mov	r0, r3
 8002652:	f000 f8e9 	bl	8002828 <RCC_GetHCLKClockFreq>
 8002656:	4603      	mov	r3, r0
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f8fb 	bl	8002854 <RCC_GetPCLK1ClockFreq>
 800265e:	60f8      	str	r0, [r7, #12]
        break;
 8002660:	e004      	b.n	800266c <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8002662:	bf00      	nop
 8002664:	e002      	b.n	800266c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800266a:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002672:	d135      	bne.n	80026e0 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fe89 	bl	800238c <LL_RCC_GetUARTClockSource>
 800267a:	4603      	mov	r3, r0
 800267c:	4a20      	ldr	r2, [pc, #128]	; (8002700 <LL_RCC_GetUARTClockFreq+0x11c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <LL_RCC_GetUARTClockFreq+0xba>
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d803      	bhi.n	8002690 <LL_RCC_GetUARTClockFreq+0xac>
 8002688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268c:	d01c      	beq.n	80026c8 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800268e:	e02c      	b.n	80026ea <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <LL_RCC_GetUARTClockFreq+0x120>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <LL_RCC_GetUARTClockFreq+0xc2>
 8002696:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800269a:	d00c      	beq.n	80026b6 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 800269c:	e025      	b.n	80026ea <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 800269e:	f000 f833 	bl	8002708 <RCC_GetSystemClockFreq>
 80026a2:	60f8      	str	r0, [r7, #12]
        break;
 80026a4:	e021      	b.n	80026ea <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 80026a6:	f7ff fdcf 	bl	8002248 <LL_RCC_HSI_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d019      	beq.n	80026e4 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <LL_RCC_GetUARTClockFreq+0x118>)
 80026b2:	60fb      	str	r3, [r7, #12]
        break;
 80026b4:	e016      	b.n	80026e4 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 80026b6:	f7ff fddb 	bl	8002270 <LL_RCC_LSE_IsReady>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 80026c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c4:	60fb      	str	r3, [r7, #12]
        break;
 80026c6:	e00f      	b.n	80026e8 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80026c8:	f000 f81e 	bl	8002708 <RCC_GetSystemClockFreq>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8aa 	bl	8002828 <RCC_GetHCLKClockFreq>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f8bc 	bl	8002854 <RCC_GetPCLK1ClockFreq>
 80026dc:	60f8      	str	r0, [r7, #12]
        break;
 80026de:	e004      	b.n	80026ea <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 80026e0:	bf00      	nop
 80026e2:	e002      	b.n	80026ea <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80026e4:	bf00      	nop
 80026e6:	e000      	b.n	80026ea <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80026e8:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	00c00040 	.word	0x00c00040
 80026f8:	00c00080 	.word	0x00c00080
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	03000100 	.word	0x03000100
 8002704:	03000200 	.word	0x03000200

08002708 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800270e:	f7ff fdf1 	bl	80022f4 <LL_RCC_GetSysClkSource>
 8002712:	4603      	mov	r3, r0
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d851      	bhi.n	80027bc <RCC_GetSystemClockFreq+0xb4>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <RCC_GetSystemClockFreq+0x18>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002755 	.word	0x08002755
 8002724:	080027bd 	.word	0x080027bd
 8002728:	080027bd 	.word	0x080027bd
 800272c:	080027bd 	.word	0x080027bd
 8002730:	080027a9 	.word	0x080027a9
 8002734:	080027bd 	.word	0x080027bd
 8002738:	080027bd 	.word	0x080027bd
 800273c:	080027bd 	.word	0x080027bd
 8002740:	080027af 	.word	0x080027af
 8002744:	080027bd 	.word	0x080027bd
 8002748:	080027bd 	.word	0x080027bd
 800274c:	080027bd 	.word	0x080027bd
 8002750:	080027b5 	.word	0x080027b5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002754:	f7ff fda0 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d111      	bne.n	8002782 <RCC_GetSystemClockFreq+0x7a>
 800275e:	f7ff fd9b 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <RCC_GetSystemClockFreq+0x6a>
 8002768:	f7ff fda8 	bl	80022bc <LL_RCC_MSI_GetRange>
 800276c:	4603      	mov	r3, r0
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	e003      	b.n	800277a <RCC_GetSystemClockFreq+0x72>
 8002772:	f7ff fdb1 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002776:	4603      	mov	r3, r0
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	4a28      	ldr	r2, [pc, #160]	; (800281c <RCC_GetSystemClockFreq+0x114>)
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	e010      	b.n	80027a4 <RCC_GetSystemClockFreq+0x9c>
 8002782:	f7ff fd89 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <RCC_GetSystemClockFreq+0x8e>
 800278c:	f7ff fd96 	bl	80022bc <LL_RCC_MSI_GetRange>
 8002790:	4603      	mov	r3, r0
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	e003      	b.n	800279e <RCC_GetSystemClockFreq+0x96>
 8002796:	f7ff fd9f 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 800279a:	4603      	mov	r3, r0
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <RCC_GetSystemClockFreq+0x114>)
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80027a6:	e033      	b.n	8002810 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <RCC_GetSystemClockFreq+0x118>)
 80027aa:	607b      	str	r3, [r7, #4]
      break;
 80027ac:	e030      	b.n	8002810 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <RCC_GetSystemClockFreq+0x11c>)
 80027b0:	607b      	str	r3, [r7, #4]
      break;
 80027b2:	e02d      	b.n	8002810 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80027b4:	f000 f876 	bl	80028a4 <RCC_PLL_GetFreqDomain_SYS>
 80027b8:	6078      	str	r0, [r7, #4]
      break;
 80027ba:	e029      	b.n	8002810 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80027bc:	f7ff fd6c 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d111      	bne.n	80027ea <RCC_GetSystemClockFreq+0xe2>
 80027c6:	f7ff fd67 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <RCC_GetSystemClockFreq+0xd2>
 80027d0:	f7ff fd74 	bl	80022bc <LL_RCC_MSI_GetRange>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	e003      	b.n	80027e2 <RCC_GetSystemClockFreq+0xda>
 80027da:	f7ff fd7d 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 80027de:	4603      	mov	r3, r0
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <RCC_GetSystemClockFreq+0x114>)
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	e010      	b.n	800280c <RCC_GetSystemClockFreq+0x104>
 80027ea:	f7ff fd55 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <RCC_GetSystemClockFreq+0xf6>
 80027f4:	f7ff fd62 	bl	80022bc <LL_RCC_MSI_GetRange>
 80027f8:	4603      	mov	r3, r0
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	e003      	b.n	8002806 <RCC_GetSystemClockFreq+0xfe>
 80027fe:	f7ff fd6b 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002802:	4603      	mov	r3, r0
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <RCC_GetSystemClockFreq+0x114>)
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800280e:	bf00      	nop
  }

  return frequency;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08002ed0 	.word	0x08002ed0
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002830:	f7ff fd6e 	bl	8002310 <LL_RCC_GetAHBPrescaler>
 8002834:	4603      	mov	r3, r0
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <RCC_GetHCLKClockFreq+0x28>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	40d3      	lsrs	r3, r2
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	08002eb8 	.word	0x08002eb8

08002854 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800285c:	f7ff fd66 	bl	800232c <LL_RCC_GetAPB1Prescaler>
 8002860:	4603      	mov	r3, r0
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <RCC_GetPCLK1ClockFreq+0x24>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	40d3      	lsrs	r3, r2
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	08002ec8 	.word	0x08002ec8

0800287c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002884:	f7ff fd60 	bl	8002348 <LL_RCC_GetAPB2Prescaler>
 8002888:	4603      	mov	r3, r0
 800288a:	0adb      	lsrs	r3, r3, #11
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	40d3      	lsrs	r3, r2
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	08002ec8 	.word	0x08002ec8

080028a4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80028aa:	f7ff fd83 	bl	80023b4 <LL_RCC_PLL_GetMainSource>
 80028ae:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d02d      	beq.n	8002912 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d02e      	beq.n	8002918 <RCC_PLL_GetFreqDomain_SYS+0x74>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d12f      	bne.n	800291e <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80028be:	f7ff fceb 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <RCC_PLL_GetFreqDomain_SYS+0x48>
 80028c8:	f7ff fce6 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <RCC_PLL_GetFreqDomain_SYS+0x38>
 80028d2:	f7ff fcf3 	bl	80022bc <LL_RCC_MSI_GetRange>
 80028d6:	4603      	mov	r3, r0
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	e003      	b.n	80028e4 <RCC_PLL_GetFreqDomain_SYS+0x40>
 80028dc:	f7ff fcfc 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 80028e0:	4603      	mov	r3, r0
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	e010      	b.n	800290e <RCC_PLL_GetFreqDomain_SYS+0x6a>
 80028ec:	f7ff fcd4 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80028f6:	f7ff fce1 	bl	80022bc <LL_RCC_MSI_GetRange>
 80028fa:	4603      	mov	r3, r0
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	e003      	b.n	8002908 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8002900:	f7ff fcea 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002904:	4603      	mov	r3, r0
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002910:	e02f      	b.n	8002972 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002912:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8002914:	607b      	str	r3, [r7, #4]
      break;
 8002916:	e02c      	b.n	8002972 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800291a:	607b      	str	r3, [r7, #4]
      break;
 800291c:	e029      	b.n	8002972 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800291e:	f7ff fcbb 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8002928:	f7ff fcb6 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <RCC_PLL_GetFreqDomain_SYS+0x98>
 8002932:	f7ff fcc3 	bl	80022bc <LL_RCC_MSI_GetRange>
 8002936:	4603      	mov	r3, r0
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	e003      	b.n	8002944 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 800293c:	f7ff fccc 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002940:	4603      	mov	r3, r0
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	e010      	b.n	800296e <RCC_PLL_GetFreqDomain_SYS+0xca>
 800294c:	f7ff fca4 	bl	8002298 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8002956:	f7ff fcb1 	bl	80022bc <LL_RCC_MSI_GetRange>
 800295a:	4603      	mov	r3, r0
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	e003      	b.n	8002968 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8002960:	f7ff fcba 	bl	80022d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002964:	4603      	mov	r3, r0
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002970:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002972:	f7ff fd49 	bl	8002408 <LL_RCC_PLL_GetDivider>
 8002976:	4603      	mov	r3, r0
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	3301      	adds	r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	fbb2 f4f3 	udiv	r4, r2, r3
 8002982:	f7ff fd25 	bl	80023d0 <LL_RCC_PLL_GetN>
 8002986:	4603      	mov	r3, r0
 8002988:	fb03 f404 	mul.w	r4, r3, r4
 800298c:	f7ff fd2e 	bl	80023ec <LL_RCC_PLL_GetR>
 8002990:	4603      	mov	r3, r0
 8002992:	0e5b      	lsrs	r3, r3, #25
 8002994:	3301      	adds	r3, #1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	08002ed0 	.word	0x08002ed0
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <LL_SPI_IsEnabled>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d101      	bne.n	80029c8 <LL_SPI_IsEnabled+0x18>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <LL_SPI_IsEnabled+0x1a>
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_SPI_SetCRCPolynomial>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ffd3 	bl	80029b0 <LL_SPI_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d13b      	bne.n	8002a88 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a18:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	6811      	ldr	r1, [r2, #0]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	6852      	ldr	r2, [r2, #4]
 8002a24:	4311      	orrs	r1, r2
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68d2      	ldr	r2, [r2, #12]
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	6912      	ldr	r2, [r2, #16]
 8002a30:	4311      	orrs	r1, r2
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6952      	ldr	r2, [r2, #20]
 8002a36:	4311      	orrs	r1, r2
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	6992      	ldr	r2, [r2, #24]
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	69d2      	ldr	r2, [r2, #28]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6a12      	ldr	r2, [r2, #32]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6891      	ldr	r1, [r2, #8]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	6952      	ldr	r2, [r2, #20]
 8002a64:	0c12      	lsrs	r2, r2, #16
 8002a66:	430a      	orrs	r2, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a76:	d105      	bne.n	8002a84 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa9 	bl	80029d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <LL_USART_IsEnabled>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <LL_USART_IsEnabled+0x18>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_USART_IsEnabled+0x1a>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_USART_SetStopBitsLength>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_USART_SetHWFlowCtrl>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_USART_SetBaudRate>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d11a      	bne.n	8002b50 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	441a      	add	r2, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]
}
 8002b4e:	e00a      	b.n	8002b66 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	085a      	lsrs	r2, r3, #1
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	441a      	add	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	60da      	str	r2, [r3, #12]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ff83 	bl	8002a92 <LL_USART_IsEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d15b      	bne.n	8002c4a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <LL_USART_Init+0xe0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	6851      	ldr	r1, [r2, #4]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	6912      	ldr	r2, [r2, #16]
 8002ba8:	4311      	orrs	r1, r2
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	6992      	ldr	r2, [r2, #24]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff7b 	bl	8002ab8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff88 	bl	8002ade <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <LL_USART_Init+0xe4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d104      	bne.n	8002be0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f7ff fc24 	bl	8002424 <LL_RCC_GetUSARTClockFreq>
 8002bdc:	60b8      	str	r0, [r7, #8]
 8002bde:	e023      	b.n	8002c28 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <LL_USART_Init+0xe8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d104      	bne.n	8002bf2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002be8:	200c      	movs	r0, #12
 8002bea:	f7ff fc1b 	bl	8002424 <LL_RCC_GetUSARTClockFreq>
 8002bee:	60b8      	str	r0, [r7, #8]
 8002bf0:	e01a      	b.n	8002c28 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <LL_USART_Init+0xec>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d104      	bne.n	8002c04 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002bfa:	2030      	movs	r0, #48	; 0x30
 8002bfc:	f7ff fc12 	bl	8002424 <LL_RCC_GetUSARTClockFreq>
 8002c00:	60b8      	str	r0, [r7, #8]
 8002c02:	e011      	b.n	8002c28 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <LL_USART_Init+0xf0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d104      	bne.n	8002c16 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002c0c:	20c0      	movs	r0, #192	; 0xc0
 8002c0e:	f7ff fce9 	bl	80025e4 <LL_RCC_GetUARTClockFreq>
 8002c12:	60b8      	str	r0, [r7, #8]
 8002c14:	e008      	b.n	8002c28 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <LL_USART_Init+0xf4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d104      	bne.n	8002c28 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002c1e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002c22:	f7ff fcdf 	bl	80025e4 <LL_RCC_GetUARTClockFreq>
 8002c26:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff5d 	bl	8002b04 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	efff69f3 	.word	0xefff69f3
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40004400 	.word	0x40004400
 8002c60:	40004800 	.word	0x40004800
 8002c64:	40004c00 	.word	0x40004c00
 8002c68:	40005000 	.word	0x40005000

08002c6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <LL_InitTick+0x30>)
 8002c80:	3b01      	subs	r3, #1
 8002c82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <LL_InitTick+0x30>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <LL_InitTick+0x30>)
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002ca8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ffdd 	bl	8002c6c <LL_InitTick>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <LL_mDelay+0x48>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002cce:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d00c      	beq.n	8002cf2 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002cde:	e008      	b.n	8002cf2 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <LL_mDelay+0x48>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f3      	bne.n	8002ce0 <LL_mDelay+0x24>
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e010 	.word	0xe000e010

08002d08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <LL_SetSystemCoreClock+0x1c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000002c 	.word	0x2000002c

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4e0d      	ldr	r6, [pc, #52]	; (8002d60 <__libc_init_array+0x38>)
 8002d2c:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d2e:	1ba4      	subs	r4, r4, r6
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	2500      	movs	r5, #0
 8002d34:	42a5      	cmp	r5, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	4e0b      	ldr	r6, [pc, #44]	; (8002d68 <__libc_init_array+0x40>)
 8002d3a:	4c0c      	ldr	r4, [pc, #48]	; (8002d6c <__libc_init_array+0x44>)
 8002d3c:	f000 f820 	bl	8002d80 <_init>
 8002d40:	1ba4      	subs	r4, r4, r6
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	2500      	movs	r5, #0
 8002d46:	42a5      	cmp	r5, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d50:	4798      	blx	r3
 8002d52:	3501      	adds	r5, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d5a:	4798      	blx	r3
 8002d5c:	3501      	adds	r5, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002f00 	.word	0x08002f00
 8002d64:	08002f00 	.word	0x08002f00
 8002d68:	08002f00 	.word	0x08002f00
 8002d6c:	08002f04 	.word	0x08002f04

08002d70 <memset>:
 8002d70:	4402      	add	r2, r0
 8002d72:	4603      	mov	r3, r0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d100      	bne.n	8002d7a <memset+0xa>
 8002d78:	4770      	bx	lr
 8002d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7e:	e7f9      	b.n	8002d74 <memset+0x4>

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
